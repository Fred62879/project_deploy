{"version":3,"sources":["assets/ccLogo.svg","assets/user.svg","icons/composeIcon.svg","icons/plusIcon.svg","icons/sendIcon.svg","assets/defaultPostFeaturedImage.jpg","icons/bookmarkEmpty.svg","assets/write_the_first_comment.svg","assets/reply.svg","constants.ts","pages/common/PurpleButton.tsx","pages/login/login.ts","containers/header/Header.tsx","pages/create_post/ImgPanel.tsx","pages/create_post/TextPanel.tsx","pages/common/Avatar.tsx","pages/group/TextFields.tsx","pages/group/AddMuliple.tsx","pages/create_post/TagPanel.tsx","api-auth/fetch-container.ts","api/api.ts","reducers/postsCreationSlice.ts","api-upload/index.ts","pages/create_post/Submit.tsx","pages/create_post/CreatePost.tsx","api/configuration.ts","reducers/commentsSlice.ts","reducers/postsSlice.ts","pages/common/Loading.tsx","pages/common/NotFoundError.tsx","pages/common/NoAccessibilityError.tsx","pages/common/NotLoggedInError.tsx","pages/update_post/TagPanel.tsx","pages/update_post/Submit.tsx","pages/update_post/index.tsx","pages/home/LeftSideBar.tsx","util/helperFunctions.ts","reducers/isLoggedInSlice.ts","reducers/groupsSlice.ts","reducers/userSlice.ts","hooks/useLikePost.ts","pages/home/Card.tsx","pages/home/TagsCarousel.tsx","pages/home/Main.tsx","pages/home/RightSideBar.tsx","pages/common/ErrorPage.tsx","reducers/usersSlice.ts","pages/group/RadioButtons.tsx","pages/group/CreateGroupForm.tsx","pages/group/CreateGroupModal.tsx","pages/group/index.tsx","pages/home/index.tsx","pages/login/DevLogin.tsx","reducers/messagesSlice.ts","reducers/conversationsSlice.ts","pages/messenger/CreateGroupChatForm.tsx","pages/messenger/CreateGroupChatModal.tsx","pages/messenger/SideBar.tsx","pages/messenger/ChatInfo.tsx","pages/messenger/ChatInput.tsx","pages/messenger/ChatMessage.tsx","pages/messenger/NewConversation.tsx","pages/messenger/ChatArea.tsx","pages/messenger/index.tsx","pages/post_detail/NewComment.tsx","pages/post_detail/UpdateButton.tsx","pages/post_detail/ChildComment.tsx","pages/post_detail/TopLevelComment.tsx","ws-dto/comments/dto/createComment.ws.dto.ts","pages/post_detail/Comments.tsx","ws-dto/comments/dto/getCommentsByPostID.ws.dto.ts","pages/post_detail/Tag.tsx","pages/post_detail/TagPanel.tsx","pages/post_detail/index.tsx","pages/search_result/TagCard.tsx","pages/search_result/RightSideBar.tsx","pages/search_result/SearchResult.tsx","pages/view_profile/ProfileBanner.tsx","pages/view_profile/TradingCard.tsx","pages/view_profile/OwnPostsBoard.tsx","pages/view_profile/OwnProfile.tsx","pages/view_profile/OtherPostsBoard.tsx","pages/view_profile/OtherProfile.tsx","hooks/useFollow.ts","pages/view_profile/ViewProfile.tsx","pages/login/Logout.tsx","pages/experimental/Experimental.tsx","pages/login/LoginGitHub.tsx","pages/search/SearchHomePage.tsx","reducers/search.ts","pages/search/Search.tsx","pages/search/SearchPage.tsx","pages/group_profile/TradingGroupCard.tsx","pages/group_profile/GroupPostsBoard.tsx","pages/group_profile/ViewGroupProfile.tsx","App.tsx","theme.js","reducers/tagsSlice.ts","reducers/videosSlice.ts","reducers/rootReducer.ts","store/index.ts","index.tsx","assets/404.svg","assets/defaultUserProfileBannerImg.jpg","icons/commentIcon.svg","icons/heartIcon.svg","icons/heartIconRed.svg"],"names":["module","exports","ImageType","useStyles","makeStyles","root","backgroundColor","color","width","height","border","borderRadius","fontSize","padding","display","alignItems","PurpleButton","handleClick","content","params","classes","onClick","className","stateContainer","state","initializeGitHubOAuth","console","log","uuid","window","location","href","theme","appBar","zIndex","drawer","toolbar","mixins","drawerPaper","boxShadow","menuButton","breakpoints","up","search","shape","paddingTop","paddingBottom","marginRight","marginLeft","spacing","maxWidth","searchIcon","position","pointerEvents","marginTop","inputRoot","inputInput","transition","transitions","create","sectionDesktop","sectionMobile","link","textDecoration","Header","props","ListItemDiv","styled","div","isLoggedIn","useSelector","user","history","useHistory","useDispatch","React","useState","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","Boolean","isMobileMenuOpen","handleProfileMenuOpen","event","currentTarget","handleMobileMenuClose","handleMenuClose","menuId","renderMenu","Menu","anchorOrigin","vertical","horizontal","id","keepMounted","transformOrigin","open","onClose","MenuItem","push","userID","renderMobileMenu","IconButton","aria-label","Badge","badgeContent","aria-controls","aria-haspopup","alt","src","profilePic","AppBar","style","Toolbar","edge","handleDrawerToggle","Logo","Typography","InputBase","placeholder","input","inputProps","onKeyDown","keyCode","query","target","value","flex","ListItem","ListItemIcon","to","flexDirection","marginBottom","paddingLeft","paddingRight","button","outline","margin","fontFamily","ImgPanel","setImg","buttonText","withPreview","withIcon","onChange","img","imgExtension","maxFileSize","singleImage","buttonStyles","cptext","cptitle","cpcontent","fontWeight","overflow","TextPanel","param","title","type","setTitle","setContent","account","accountImg","smallAccountImg","imgTitle","nameTime","TitleText","span","titleSrc","isPost","isText","ExtraText","SideButton","buttonIsClicked","Avatar","small","pic","subtitle","extraText","extraTextOnClick","isButton","subtitleIsDate","setButtonIsClicked","prevState","CssTextField","withStyles","borderBottomColor","TextField","createStyles","flexWrap","TextFields","name","description","setName","setDescription","label","e","required","AddMultiple","options","defaultValID","imgKey","setItems","panelWidth","limit","Autocomplete","multiple","defaultValue","map","disableCloseOnSelect","renderOption","option","getOptionLabel","filterSelectedOptions","renderInput","variant","values","ids","_id","cptag","h4","background","tags","TagPanel","allTagsArr","setPostTags","portableFetchReplacement","path","headers","Headers","localStorage","getItem","err","fetch","BASE_PATH","replace","BaseAPI","configuration","basePath","portableFetch","this","RequiredError","field","msg","Error","AuthApiFetchParamCreator","authControllerLogOut","body","undefined","localVarPath","localVarUrlObj","url","localVarRequestOptions","Object","assign","method","localVarHeaderParameter","localVarQueryParameter","needsSerialization","JSON","stringify","authControllerLoginGitHub","authControllerLoginGoogle","AuthApiFp","localVarFetchArgs","then","response","status","json","AuthApi","DevApiFetchParamCreator","devControllerCreateCustomUser","devControllerCreatePostDev","devControllerGetJwt","encodeURIComponent","String","devControllerLoginDev","devControllerMarco","devControllerMarcoPersonal","DevApiFp","DevApi","GroupsApiFetchParamCreator","groupsControllerCreateGroup","groupsControllerGetGroups","groupsControllerGetPrivateGroup","privateId","groupsControllerGetPublicGroup","groupsControllerJoinGroup","groupsControllerLeaveGroup","GroupsApiFp","GroupsApi","MessagesApiFetchParamCreator","messagesControllerCreateMessage","conversationID","messagesControllerGetMessagesInConversation","MessagesApiFp","MessagesApi","PostsApiFetchParamCreator","postsControllerCreatePost","postsControllerGetPostByID","postID","postsControllerGetPostBySlug","slug","getAuthor","postsControllerIncrementView","postsControllerLikePost","postsControllerUnlikePost","postsControllerUpdatePostBySlug","tagsControllerGetPostsByTag","tagID","requestedCount","startIdx","excludePostIDs","PostsApiFp","PostsApi","SearchApiFp","searchControllerSearch","q","SearchApiFetchParamCreator","SearchApi","TrendingApiFetchParamCreator","trendingControllerGetTrending","fetchCount","trendingControllerGetTrendingLoggedIn","TrendingApiFp","TrendingApi","UserApiFetchParamCreator","userControllerAddFollowing","userControllerEditProfile","userControllerGetUser","userControllerGetUserByUsername","username","userControllerGetUsersByIDs","userControllerRemoveFollowing","userControllerSavePost","UserApiFp","UserApi","VideoApiFetchParamCreator","videoControllerCreateVideo","videoControllerGetAllVideos","VideoApiFp","VideoApi","submitPost","createAsyncThunk","createdPost","a","createPostSuccessDto","post","featuredImg","likes","views","author","comments","commentsCount","createdAt","Date","now","toString","updatePost","update","newSlug","oldSlug","uploadPublicAsset","file","uploadHelper","endpoint","Array","isArray","data","FormData","append","res","result","operation","Submit","dispatch","curUser","onSubmit","newPost","isUpdate","unwrapResult","dto","onCancel","createPost","CreatePost","postTags","allTags","entities","commentsAdapter","createEntityAdapter","selectId","item","commentsSlice","createSlice","initialState","getInitialState","isLoading","reducers","getCommentsByPostIDSuccess","action","upsertMany","payload","createCommentPending","createCommentSuccess","addOne","comment","parentComment","replies","extraReducers","actions","postsAdapter","fetchTrendingPosts","getState","rejectWithValue","api","initialData","fetchPostsByTag","fetchPostBySlug","fetchPostByID","postsSlice","trendingPosts","trendingPostsSet","slugToID","trendingPostFetchCount","fetchedComments","hasMorePosts","pending","fulfilled","posts","forEach","rejected","upsertOne","increment","updateOne","changes","commentRoot","parentPost","Loading","CircularProgress","NotFoundError","justifyContent","NotFoundSvg","NoAccessibilityError","NotLoggedInError","oldTagsID","UpdatePost","useParams","tagsArray","oldTagsIDArr","oldTagsSet","Set","i","length","has","error","setError","useEffect","catch","cursor","diplayAccount","displayImg","displayName","groupLinks","showPostsText","borderBottom","LeftSideBar","convertArrToMap","arr","reduce","obj","getFollowingFollowersOfUser","users","followingFollowers","followers","concat","following","isLoggedInSlice","loginSuccess","reducer","prepare","jwt","setItem","logOut","removeItem","groupsAdapter","fetchGroups","_","groups","fetchGroupById","groupID","foundGroup","createGroup","newGroup","successDto","admins","leaveGroup","joinGroup","groupsSlice","currentGroupID","selectGroup","addMany","_private","private","profileBanner","toLocaleString","updatedAt","videos","pull","getLoggedInUser","updateProfile","code","userSlice","savePost","savedPosts","savedPostsSet","toggleLikePost","likedPostsSet","likedPosts","follow","other","followingSet","unfollow","userDto","followersSet","freshlyLoggedInUser","useLikePost","postIsLikedByUser","handleToggleLike","minHeight","interactions","commentIcon","heartIcon","interactionsIcons","readSave","tagText","Card","authorID","DefaultPic","objectFit","previewContent","key","HeartIconRed","HeartIcon","CommentIcon","a11yProps","index","flexGrow","palette","paper","TagsCarousel","setValue","tagsArr","Tabs","newValue","indicatorColor","textColor","scrollButtons","tag","idx","Tab","Main","hasMore","items","currFetchCount","hasMoreTrendingPosts","tabIndex","setTabIndex","hasMorePostsInTags","currentTag","currentTagID","newIdx","keys","postsSet","prev","dataLength","next","loader","endMessage","textAlign","right","savePostSection","overflowY","savePostText","RightSideBar","substr","ErrorPage","top","usersAdapter","fetchUsersByIDs","IDs","join","fetchUserByUsername","usersSlice","usernameToID","authors","icon","backgroundImage","outlineOffset","checkedIcon","StyledRadio","Radio","disableRipple","clsx","RadioButtons","FormControl","component","FormLabel","focused","RadioGroup","row","FormControlLabel","control","TextWrapper","DialogActions","MuiDialogActions","CreateGroupForm","handleClose","people","setPeople","profileBannerFile","setProfileBanner","profilePicFile","setProfilePic","setPrivate","usersMap","loading","setLoading","creatingGroupLoading","setCreatingGroupLoading","handleSubmit","preventDefault","picture","CreateGroupButton","p","DialogTitle","closeButton","grey","children","disableTypography","DialogContent","MuiDialogContent","CreateGroupModal","setOpen","Dialog","aria-labelledby","dividers","GroupContainer","GroupContent","GroupCard","currentGroup","isUserAMember","GroupTab","joinedGroupIDs","otherGroupsIDs","filter","includes","home","main","Home","useRouteMatch","exact","DevLogin","messagesAdapter","fetchMessagesInConversation","messagesSlice","isSending","isTyping","isError","pendingMessages","createMessagePending","newMessage","text","createMessageSuccess","remove","message","createMessageError","receiveNewMessage","conversationsAdapter","conversationSlice","currentConversationID","isGroupConversation","isDirectConversation","addConversation","setNewConversation","selectConversation","createDirectConversationPending","createGroupConversationPending","createConversationSuccess","conversations","messages","CreateGroupChatForm","socket","useContext","SocketContext","otherUsers","current","emit","GroupConversations","groupConv","c","PlusIcon","float","HeadingText","group","CreateGroupChatModal","disableBackdropClick","SideBarContainer","DirectMessages","directConv","ComposeIcon","otherUserID","otherUser","SideBar","ChatInfoContainer","H2","h2","ChatInfoHeader","ChatInfo","currentConversation","uID","Editor","ChatInput","newMessageSelectedUserIDs","editor","useRef","handleSend","innerHTML","createMessageBodyDto","setText","initialMessage","foundExistingConversation","conv","messageDto","Quill","modules","keyboard","bindings","enter","handler","fontStyle","SendIcon","ChatBubble","isUser","ChatMessage","chatMessage","ref","NewConversation","ChatHeader","ChatAreaContainer","GroupChatHeader","conversation","DirectChatHeader","ChatArea","messagesArr","pendingMessagesFromCurrConversation","moment","calendar","pendingMsg","ChatContainer","Messenger","alignContent","NewComment","inputRef","createPending","trim","newCommentDto","UpdateButton","Container","CommentContent","ChildComment","commentID","TopLevelCommentContainer","ChildCommentsContainer","CreateCommentReplyContainer","CreateCommentInfo","CreateCommentReplyInput","TopLevelComment","expanded","setExpanded","openReplyModal","setOpenReplyModal","replyInputRef","currentUser","reply","Modal","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","ReplySvg","NoCommentsContainer","SubtleEncouragement","Comments","topLevelComments","ret","WriteThefirstComment","Tag","Button","postDetail","shareIcon","Interactions","PostDetail","canUpdate","defaultPostFeaturedImage","BookmarkEmpty","TagCard","endIcon","rightbar","searchoption","filtertags","checked","bannerImg","maxHeight","ProfileBanner","imgSrc","TradingCardContainer","AvatarPic","AllCapsName","h3","Subtitle","FollowersAndPostsCountContainer","FollowersCountContainer","PostsCountContainer","BigBoldNumber","SpaceBetweenFollowersAndPosts","SpaceAround","TradingCardButton","TradingCard","isCurrentUser","followHook","toUpperCase","followsOtherUser","isFollowedByOtherUser","handleToggleFollow","PostsContainer","SavedPostsContainer","OwnPostsBoard","tabIdx","setTabIdx","textTransform","FlexSpace","WidthSpace","HeightSpace","OwnProfile","DefaultImg","OtherPostsBoard","OtherProfile","userObjectID","notFound","setNotFound","useFollow","container","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","banner","gridArea","card","board","ViewProfile","loggedInUsername","LogOut","Experimental","LoginGitHub","useLocation","parsed","qs","parse","expectedState","loginSuccessDto","SearchHomePage","Content","Search","results","setResults","SearchPage","TradingGroupCard","GroupPostsBoard","child","ViewGroupProfile","createContext","App","io","on","connected","isCreator","Provider","createMuiTheme","primary","textPrimary","red","A400","default","tagsAdapter","tagsSlice","tagEntity","videosAdapter","video","getAllVideos","createVideo","videoDto","videosSlice","videosToAdd","rootReducer","combineReducers","isLoggedInReducer","userReducer","usersReducer","postsReducer","tagsReducer","groupsReducer","commentsReducer","conversationsReducer","videosReducer","messagesReducer","store","configureStore","Root","StrictMode","ThemeProvider","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.63f6287a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ccLogo.5d681d75.svg\";","module.exports = __webpack_public_path__ + \"static/media/user.009b5d66.svg\";","module.exports = __webpack_public_path__ + \"static/media/composeIcon.cdf45bb1.svg\";","module.exports = __webpack_public_path__ + \"static/media/plusIcon.94cbdea1.svg\";","module.exports = __webpack_public_path__ + \"static/media/sendIcon.2847a67b.svg\";","module.exports = __webpack_public_path__ + \"static/media/defaultPostFeaturedImage.af665b7b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bookmarkEmpty.965f5f60.svg\";","module.exports = __webpack_public_path__ + \"static/media/write_the_first_comment.e1e50607.svg\";","module.exports = __webpack_public_path__ + \"static/media/reply.2e768d34.svg\";","// These are used by `AuthService` on the back end, and during the Login process on the front end\n// There are two copies of this file, one in `backend/src` and one in `frontend/src`\n\n// export const GitHubOAuthClientID = 'f397e7312eb6205b3256';\nexport const GitHubOAuthClientID = 'ce865d5fed800ce68727';\nexport const GoogleOAuthClientID =\n  '378315098234-caculcp2l4rg87nb7tds0j37v420cth9.apps.googleusercontent.com';\n\nexport const JwtLocalStorageKey = \"jwt\";\n\nexport enum ImageType {\n    ProfilePic = \"ProfilePic\",\n    BannerPic = \"BannerPic\",\n}\n\nexport const BackEndBaseUri = \"http://localhost:3001\";\nexport const BackEndBaseUriForWs = BackEndBaseUri;","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: \"#5D67E9\",\n    color: \"white\",\n    width: \"fit-content\",\n    height: \"2em\",\n    border: \"none\",\n    borderRadius: \"10px\",\n    fontSize: \"15px\",\n    padding: \"10px\",\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n});\n\nconst PurpleButton = ({ handleClick, params, content }: { handleClick?: (params) => any, params?: any, content: string }) => {\n  const classes = useStyles();\n  return <button onClick={handleClick} className={classes.root}>{content}</button>;\n};\nexport default PurpleButton;\n","import { GitHubOAuthClientID } from \"../../constants\";\nimport { v4 as uuid } from \"uuid\";\n\nexport const stateContainer = {\n  state: \"abc\",\n};\n\n/**\n * Should be invoked on Login button click.\n *\n * https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/\n */\nexport function initializeGitHubOAuth() {\n  console.log(\"LOGIN\");\n  console.log(GitHubOAuthClientID);\n  console.log(stateContainer.state);\n  // Generate random state\n  stateContainer.state = uuid();\n  // Smell ya later!\n  window.location.href = `https://github.com/login/oauth/authorize?client_id=${GitHubOAuthClientID}&state=${stateContainer.state}`;\n}\n","import styled from '@emotion/styled';\nimport AppBar from '@material-ui/core/AppBar';\nimport Badge from '@material-ui/core/Badge';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputBase from '@material-ui/core/InputBase';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MessageIcon from '@material-ui/icons/Message';\nimport MoreIcon from '@material-ui/icons/MoreVert';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport SearchIcon from '@material-ui/icons/Search';\nimport React from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {Link, useHistory} from 'react-router-dom';\nimport Logo from '../../assets/ccLogo.svg';\nimport PurpleButton from '../../pages/common/PurpleButton';\nimport {initializeGitHubOAuth} from '../../pages/login/login';\nimport {Avatar} from '@material-ui/core';\nimport {RootState} from '../../reducers/rootReducer';\nimport {User} from '../../store/types';\nimport {AppDispatch} from \"../../store\";\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: \"black\",\n        backgroundColor: \"white\",\n\n    },\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n        width: drawerWidth,\n        boxShadow: \"5px 2px 5px #cccccc\",\n    },\n    menuButton: {\n        // marginRight: theme.spacing(2),\n        [theme.breakpoints.up(\"sm\")]: {\n            display: \"none\",\n        },\n        toolbar: theme.mixins.toolbar,\n        drawerPaper: {\n            width: drawerWidth,\n        },\n\n        boxShadow: \"5px 2px 5px #cccccc\",\n    },\n    search: {\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: \"#FAFAFA\",\n        paddingTop: \"10px\",\n        paddingBottom: \"10px\",\n        // \"&:hover\": {\n        //   backgroundColor: fade(theme.palette.common.white, 0.25),\n        // },\n\n        marginRight: \"auto\",\n        width: \"100%\",\n        [theme.breakpoints.up(\"sm\")]: {\n            marginLeft: theme.spacing(3),\n            width: \"auto\",\n            maxWidth: \"120%\",\n        },\n    },\n    searchIcon: {\n        width: theme.spacing(7),\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        marginTop: \"0.5em\",\n        marginLeft: \"1em\",\n    },\n    inputRoot: {\n        color: \"inherit\",\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 7),\n        transition: theme.transitions.create(\"width\"),\n        width: \"100%\",\n        [theme.breakpoints.up(\"md\")]: {\n            width: 550,\n        },\n    },\n    sectionDesktop: {\n        display: \"none\",\n        [theme.breakpoints.up(\"md\")]: {\n            display: \"flex\",\n        },\n    },\n    sectionMobile: {\n        display: \"flex\",\n        [theme.breakpoints.up(\"md\")]: {\n            display: \"none\",\n        },\n    },\n    link: {\n        textDecoration: \"none\",\n    },\n}));\n\n\nexport default function Header(props) {\n    const ListItemDiv = styled.div`\n  margin-top: 17px;\n  margin-right: 0.7em;\n  cursor: pointer;\n`;\n    const isLoggedIn = useSelector<RootState, boolean>((state) => state.isLoggedIn);\n    const user = useSelector<RootState, User>(state => state.user);\n    const history = useHistory();\n    const dispatch = useDispatch<AppDispatch>();\n\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\n\n    const isMenuOpen = Boolean(anchorEl);\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n    const handleSearchKeyDown = (event) => {\n        if (event.keyCode === 13) { // https://stackoverflow.com/questions/43384039/how-to-get-input-textfield-values-when-enter-key-is-pressed-in-react-js\n            const query = event.target.value;\n            history.push(`/search?q=${query}`);\n        }\n    }\n\n    const handleProfileMenuOpen = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMobileMenuClose = () => {\n        setMobileMoreAnchorEl(null);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n        handleMobileMenuClose();\n    };\n\n    const handleMobileMenuOpen = (event) => {\n        setMobileMoreAnchorEl(event.currentTarget);\n    };\n\n    const menuId = \"primary-search-account-menu\";\n    const renderMenu = (\n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{vertical: \"top\", horizontal: \"right\"}}\n            id={menuId}\n            keepMounted\n            transformOrigin={{vertical: \"top\", horizontal: \"right\"}}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={() => {\n                history.push(`/user/${user.userID}`);\n                handleMenuClose();\n            }}>Profile</MenuItem>\n            <MenuItem onClick={() => {\n                history.push('/logout');\n                handleMenuClose();\n            }}>Log Out</MenuItem>\n        </Menu>\n    );\n\n    const mobileMenuId = \"primary-search-account-menu-mobile\";\n    const renderMobileMenu = (\n        <Menu\n            anchorEl={mobileMoreAnchorEl}\n            anchorOrigin={{vertical: \"top\", horizontal: \"right\"}}\n            id={mobileMenuId}\n            keepMounted\n            transformOrigin={{vertical: \"top\", horizontal: \"right\"}}\n            open={isMobileMenuOpen}\n            onClose={handleMobileMenuClose}\n        >\n            <MenuItem>\n                <IconButton aria-label=\"show 2 new messages\" color=\"inherit\">\n                    <Badge badgeContent={2} color=\"secondary\">\n                        <MessageIcon/>\n                    </Badge>\n                </IconButton>\n                <p>Messages</p>\n            </MenuItem>\n            <MenuItem>\n                <IconButton aria-label=\"show 1 new notifications\" color=\"inherit\">\n                    <Badge badgeContent={1} color=\"secondary\">\n                        <NotificationsIcon/>\n                    </Badge>\n                </IconButton>\n                <p>Notifications</p>\n            </MenuItem>\n            <MenuItem onClick={handleProfileMenuOpen}>\n                <IconButton\n                    aria-label=\"account of current user\"\n                    aria-controls=\"primary-search-account-menu\"\n                    aria-haspopup=\"true\"\n                    color=\"inherit\"\n                >\n                    <Avatar alt=\"avatar\" src={user?.profilePic}/>\n                </IconButton>\n                <p>Profile</p>\n            </MenuItem>\n        </Menu>\n    );\n\n    return (\n        <div>\n            <AppBar\n                position=\"fixed\"\n                className={classes.appBar}\n                style={{display: \"flex\"}}\n            >\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"Open drawer\"\n                        onClick={props.handleDrawerToggle}\n                        className={classes.menuButton}\n                    >\n                        <MenuIcon/>\n                    </IconButton>\n                    <img src={Logo} style={{width: \"5em\"}} alt=\"\"/>\n                    <div className={classes.search}>\n                        <div className={classes.searchIcon}>\n                            <SearchIcon/>\n                        </div>\n                        <Typography>\n                            <InputBase\n                                placeholder=\"Search…\"\n                                classes={{\n                                    root: classes.inputRoot,\n                                    input: classes.inputInput,\n                                }}\n                                inputProps={{\"aria-label\": \"search\"}}\n                                onKeyDown={handleSearchKeyDown}\n                            />\n                        </Typography>\n                    </div>\n                    <div style={{display: \"flex\", flex: 1}}></div>\n\n                    <ListItem style={{width: \"unset\"}}>\n                        <ListItemIcon>\n\n                            <Link to=\"/\" className={classes.link}>\n                                <h4 style={{marginRight: \"0.7em\"}}>Home</h4>\n                            </Link>\n\n                            {isLoggedIn &&\n                            <ListItemDiv>\n                                <Link to=\"/create-post\" className={classes.link}>\n                                    <PurpleButton content=\"Add a Post\"/>\n                                </Link>\n                            </ListItemDiv>}\n\n                            {!isLoggedIn &&\n                            <ListItemDiv>\n                                <div onClick={initializeGitHubOAuth}>\n                                    <PurpleButton content=\"Log In with GitHub\"/>\n                                </div>\n                            </ListItemDiv>}\n\n                        </ListItemIcon>\n                    </ListItem>\n\n                    {isLoggedIn &&\n                    <div className={classes.sectionDesktop}>\n                        <IconButton aria-label=\"show 2 new messages\" color=\"inherit\">\n                            <Badge badgeContent={2} color=\"secondary\">\n                                <MessageIcon/>\n                            </Badge>\n                        </IconButton>\n                        <IconButton aria-label=\"show 1 new notifications\" color=\"inherit\">\n                            <Badge badgeContent={1} color=\"secondary\">\n                                <NotificationsIcon/>\n                            </Badge>\n                        </IconButton>\n                        <IconButton\n                            edge=\"end\"\n                            aria-label=\"account of current user\"\n                            aria-controls={menuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleProfileMenuOpen}\n                            color=\"inherit\"\n                        >\n                            <Avatar alt=\"avatar\" src={user?.profilePic}/>\n                        </IconButton>\n                    </div>}\n\n                    <div className={classes.sectionDesktop}>\n\n                    </div>\n\n                    <div className={classes.sectionMobile}>\n                        <IconButton\n                            aria-label=\"show more\"\n                            aria-controls={mobileMenuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleMobileMenuOpen}\n                            color=\"inherit\"\n                        >\n                            <MoreIcon/>\n                        </IconButton>\n                    </div>\n                </Toolbar>\n            </AppBar>\n            {renderMobileMenu}\n            {renderMenu}\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport ImageUploader from \"react-images-upload\";\nimport \"../../App.css\"\n\nconst useStyles = makeStyles({\n  root: {\n    marginTop: \"3em\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"auto\",\n    width: \"40vw\",\n    backgroundColor: \"white\",\n    boxShadow: \"3px 3px #F2F2F2\",\n    marginBottom: \"1em\",\n    borderRadius: \"5px\",\n    paddingLeft: \"1.5em\",\n    paddingRight: \"1.5em\",\n  },\n  button: {\n    border: \"none\",\n    outline: \"none\",\n    borderRadius: \"5px\",\n    margin: \"2em auto\",\n    // width: \"100%\",\n    height: \"7vh\",\n    backgroundColor: \"#F2F2F2\",\n    '&:hover': {\n      backgroundColor: \"#fafafa\",\n    },\n    fontFamily: \"Arial\",\n    fontSize: \"1.5em\"\n  }\n});\n\nexport default function ImgPanel({ setImg }) {\n  const classes = useStyles();\n  // const [image, setImage] = useState<File>(null);\n\n  const handleImageUpload = img => {\n    console.log(\"CREATEPOST::IMGPANEL\");\n    console.log(img);\n    setImg(img)\n  }\n  return (\n    <div className={classes.root}>\n      <form>\n        <ImageUploader\n          buttonText='Upload Image'\n          withPreview={true}\n          withIcon={true}\n          onChange={handleImageUpload}\n          imgExtension={[\".jpg\", \".jpeg\", \".gif\", \".png\", \".gif\"]}\n          maxFileSize={5242880}\n          singleImage={true}\n          buttonStyles={{ backgroundColor: \"#6a6a6a\", boxShadow: \"3px 3px #FFFFFF\", }}\n        />\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch } from 'react-redux';\n// import { createTitle, createContent } from '../../actions/postsCreation';\n// import { createTitle, createContent } from '../../reducers/postsCreationSlice';\n// import { RootState, Post } from '../../initialData';\n\nconst useStyles = makeStyles({\n  cptext: {\n    display: \"flex\",\n    outline: \"none\",\n    flexDirection: \"column\",\n    height: \"60vh\",\n    width: \"40vw\",\n    backgroundColor: \"white\",\n    boxShadow: \"3px 3px #F2F2F2\",\n    marginBottom: \"1em\",\n    borderRadius: \"5px\",\n    paddingLeft: \"1.5em\",\n    paddingRight: \"1.5em\",\n  },\n  cptitle: {\n    border: \"none\",\n    outline: \"none\",\n    '&:hover': {\n      backgroundColor: \"#F2F2F2\",\n    },\n    margin: \"0.5em auto\",\n    width: \"100%\",\n    height: \"10vh\",\n    fontFamily: \"Arial\",\n    fontSize: \"2em\"\n  },\n  cpcontent: {\n    border: \"none\",\n    outline: \"none\",\n    '&:hover': {\n      backgroundColor: \"#F2F2F2\",\n    },\n    margin: \"0.5em auto\",\n    width: \"100%\",\n    height: \"15vh\",\n    fontFamily: \"Arial\",\n    fontSize: \"1em\",\n    fontWeight: \"bold\",\n    display: \"flex\",\n    overflow: \"auto\"\n  },\n});\n\n/*\nconst updateContent = (event, dispatch) => {\n  dispatch(createContent(event.target.value));\n}\n\nconst updateTitle = (event, dispatch) => {\n  // alert(event.target.value);\n  dispatch(createTitle(event.target.value));\n}\n */\n\nexport default function TextPanel(param) {\n  const { title, content } = param;\n  const classes = useStyles();\n  return (\n    <div className={classes.cptext}>\n      <form>\n        <input className={classes.cptitle} type=\"text\" placeholder={title || \"Title\"} onChange={(event) => {\n          // updateTitle(event, dispatch);\n          param.setTitle(event.target.value);\n        }}>\n        </input>\n        <br></br>\n        <textarea className={classes.cpcontent} id=\"text\" onChange={(event) => {\n          param.setContent(event.target.value);\n\n        }} placeholder={content || \"Type content\"}></textarea>\n      </form>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport styled from \"@emotion/styled\";\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles({\n  account: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    // paddingTop: \"1em\",\n  },\n  accountImg: {\n    width: \"3em\",\n    height: \"3em\",\n    borderRadius: \"50%\",\n    marginTop: \"0.5em\",\n  },\n  smallAccountImg: {\n    width: \"2.2em\",\n    height: \"2.2em\",\n    borderRadius: \"50%\",\n    marginTop: \"1em\",\n    marginRight: \"0.3em\",\n  },\n  imgTitle: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  nameTime: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginLeft: \"0.5em\",\n  },\n});\n\nconst TitleText = styled.span<{ isPost: boolean, isText: boolean, titleSrc?: string }>`\n  cursor: ${({titleSrc}) => titleSrc ? \"pointer\" : \"default\"};\n  font-weight: bold;\n  color: ${({ isPost, isText }) => isPost ? \"#5D67E9\" : isText ? \"black\" : \"#5DCBAF\"}\n`;\n\nconst ExtraText = styled.span`\n  color: black;\n  font-size: small;\n`;\n\nexport const SideButton = styled.span <{ buttonIsClicked: boolean }>`\n  color: ${({ buttonIsClicked }) => buttonIsClicked ? \"white\" : \"#5D67E9\"};\n  font-size: small;\n  background-color: ${({ buttonIsClicked }) => buttonIsClicked ? \"#5D67E9\" : \"white\"};\n  min-width: fit-content;\n  padding: 5px 10px 5px 10px;\n  border: 1px solid #5D67E9;\n  border-radius: 5px;\n  cursor: pointer;\n`\n\nconst Avatar = ({ small, pic, title, titleSrc, subtitle, extraText, extraTextOnClick, isPost, isButton, isText, subtitleIsDate }: { pic: string, title?: string, subtitle?: string, subtitleIsDate?: boolean, extraText?: string, isPost?: boolean, isButton?: boolean, isText?: boolean, titleSrc?: string, extraTextOnClick?: any, small?: boolean }) => {\n  const classes = useStyles();\n  const [buttonIsClicked, setButtonIsClicked] = useState(false);\n  const history = useHistory();\n  return (\n    <div className={classes.account}>\n      <img className={small ? classes.smallAccountImg : classes.accountImg} src={pic} alt=\"avatar\" />\n      <div className={classes.nameTime}>\n        <p>\n          <TitleText isPost={isPost} isText={isText} onClick={titleSrc && (() => {history.push(titleSrc)})} titleSrc={titleSrc}>\n            {title}&nbsp;&nbsp;&nbsp;\n          </TitleText>\n          {!isButton && <ExtraText onClick={extraTextOnClick}>{extraText}</ExtraText>}\n          {isButton && <SideButton buttonIsClicked={buttonIsClicked} onClick={() => setButtonIsClicked((prevState) => !prevState)}>{extraText}</SideButton>}\n          {/* {isButton && buttonIsClicked && <SideButtonClicked>{extraText}</SideButtonClicked>} */}\n        </p>\n        <p style={{ marginTop: subtitleIsDate? \"-1.1em\" : \"-0.8em\", fontSize: subtitleIsDate ? \"13px\" : \"15px\", color: subtitleIsDate ? \"gray\" : \"black\" }}>{subtitle}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Avatar;","import React from 'react';\nimport {\n  createStyles,\n  withStyles,\n  makeStyles,\n  Theme,\n} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nexport const CssTextField = withStyles({\n  root: {\n    '& label.Mui-focused': {\n      color: 'black',\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: 'black',\n    },\n  },\n})(TextField);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      flexWrap: 'wrap',\n    },\n    margin: {\n      width: \"97%\",\n      paddingRight: \"10px\",\n      margin: theme.spacing(1),\n    },\n  }),\n);\n\nexport const TextFields = ({ name, description, setName, setDescription }:\n  { name: string, description?: string, setName: React.Dispatch<React.SetStateAction<string>>, setDescription?: React.Dispatch<React.SetStateAction<string>> }) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <CssTextField className={classes.margin} id=\"custom-css-standard-input\" label={name} onChange={(e) => {\n        setName(e.target.value);\n      }} required={true} />\n      {description &&\n        <CssTextField className={classes.margin} id=\"custom-css-standard-input\" label={description}\n          onChange={(e) => setDescription(e.target.value)} />}\n    </>\n  )\n}","/* eslint-disable no-use-before-define */\nimport React, {useState} from 'react';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport Avatar from '../common/Avatar';\nimport {CssTextField} from './TextFields';\n\n\nexport default function AddMultiple({label, options, defaultValID, imgKey, setItems, limit, panelWidth}: { label: string, options: Array<{ name: string }>, defaultValID?: [number], imgKey?: string, setItems: Function, limit?: number, panelWidth?: any\n}) {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            root: {\n                // width: 500,\n                // width: \"40vw\",\n                width: panelWidth,\n                '& > * + *': {\n                    marginTop: theme.spacing(3),\n                },\n            },\n        }),\n    );\n\n    const classes = useStyles();\n\n    const handleChange = (e, values) => {\n        // console.log(\"ADDMULTIPLE::ONCHANGE\");\n        const ids = values.map(value => value._id);\n        // console.log(ids);\n        // console.log(values);\n        setItems(ids);\n    }\n\n    // console.log(\"ADDMILTIPLE\");\n    // console.log(options);\n  let arr = [0,1];\n    return (\n        <div className={classes.root}>\n            <Autocomplete\n                multiple\n                id=\"tags-standard\"\n                // defaultValue={defaultVal}\n                defaultValue={defaultValID?.map(id => options[id])}\n                options={options}\n                disableCloseOnSelect={true}\n                renderOption={imgKey && ((option) =>\n                        <Avatar pic={option[imgKey]} title={option.name} subtitle=\"\" extraText=\"\"/>\n                )}\n                getOptionLabel={(option) => option.name}\n                filterSelectedOptions={true}\n                renderInput={(params) => (\n                    <CssTextField\n                        {...params}\n                        variant=\"standard\"\n                        label={label}\n                        placeholder=\"\"\n                    />\n                )}\n                onChange={handleChange}\n            />\n        </div>\n    );\n}","import React from \"react\";\nimport Tag from \"./Tag\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AddMultiple from \"../group/AddMuliple\";\n\nconst useStyles = makeStyles({\n  cptag: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"50vh\",\n    width: \"40vw\",\n    backgroundColor: \"white\",\n    boxShadow: \"3px 3px #F2F2F2\",\n    marginBottom: \"1em\",\n    borderRadius: \"5px\",\n    paddingLeft: \"1.5em\",\n    paddingRight: \"1.5em\",\n  },\n  h4: {\n    marginBottom: \"0.5em\",\n  },\n  display: {\n    fontWeight: \"bold\",\n    marginBottom: \"1em\",\n  },\n  input: {\n    width: \"100%\",\n    height: \"2em\",\n    border: \"none\",\n    outline: \"none\",\n    background: \"white\",\n    \"&:hover\": {\n      backgroundColor: \"#F2F2F2\",\n    },\n  },\n  tags: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    margin: \"0 0\",\n    padding: \"0 0\",\n  },\n});\n\nexport default function TagPanel(params) {\n  const classes = useStyles();\n  const alltags = []; // useState<RootState, >()\n\n  console.log(\"CREATEPOST::TAGPANEL\");\n  console.log(params.allTagsArr);\n  return (\n    <div className={classes.cptag}>\n      <form id=\"tagform\">\n        {/*<h4 className={classes.h4}>Add tags</h4>\n        <hr className={classes.display}></hr>\n        <ul className={classes.tags}>\n          <Tag />\n        </ul>*/}\n        <AddMultiple label=\"Add Tags\" options={params.allTagsArr} setItems={params.setPostTags} panelWidth={\"40vw\"} />\n        {/*<input\n          className={classes.input}\n          onChange={_onChange}\n          placeholder=\"Type here\"\n        ></input> */}\n        {/*<br></br>*/}\n      </form>\n      {/*<ul id=\"tags\" onClick={_onDel}>\n        {alltags}\n      </ul>*/}\n    </div>\n  );\n}\n","import { JwtLocalStorageKey } from \"../constants\";\n\nexport default function portableFetchReplacement(path, options: any = {}) {\n  if (!options.headers) {\n    options.headers = new Headers();\n  }\n  try {\n    options.headers[\"Authorization\"] =\n      \"Bearer \" + localStorage.getItem(JwtLocalStorageKey);\n  } catch (err) {\n    console.log(err);\n  }\n\n  return fetch(path, options);\n}\n","/// <reference path=\"./custom.d.ts\" />\n// tslint:disable\n/**\n * Coder Community\n * The Coder Community API description\n *\n * OpenAPI spec version: 0.0.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as url from \"url\";\nimport portableFetch from \"../api-auth/fetch-container\"; // modified by backend/scripts/generate-api.js\nimport { Configuration } from \"./configuration\";\n\nconst BASE_PATH = \"http://localhost:3001\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface FetchAPI\n */\nexport interface FetchAPI {\n    (url: string, init?: any): Promise<Response>;\n}\n\n/**\n *\n * @export\n * @interface FetchArgs\n */\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\"\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n\n/**\n * \n * @export\n * @interface CreateConversationBodyDto\n */\nexport interface CreateConversationBodyDto {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateConversationBodyDto\n     */\n    userID: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateConversationBodyDto\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreateConversationBodyDto\n     */\n    users: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateConversationBodyDto\n     */\n    message?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateConversationBodyDto\n     */\n    createdAt: number;\n}\n/**\n * \n * @export\n * @interface CreateConversationSuccessDto\n */\nexport interface CreateConversationSuccessDto {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateConversationSuccessDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof CreateConversationSuccessDto\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreateConversationSuccessDto\n     */\n    users: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreateConversationSuccessDto\n     */\n    messages: Array<string>;\n    /**\n     * \n     * @type {any}\n     * @memberof CreateConversationSuccessDto\n     */\n    createdAt: any;\n}\n/**\n * \n * @export\n * @interface CreateCustomUser\n */\nexport interface CreateCustomUser {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateCustomUser\n     */\n    userID: string;\n}\n/**\n * \n * @export\n * @interface CreateGroupDto\n */\nexport interface CreateGroupDto {\n    /**\n     * The name of the group\n     * @type {string}\n     * @memberof CreateGroupDto\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateGroupDto\n     */\n    description?: string;\n    /**\n     * The ObjectIDs of the invited users of the new group\n     * @type {Array<string>}\n     * @memberof CreateGroupDto\n     */\n    users: Array<string>;\n    /**\n     * The URL for the group's circular profile avatar image\n     * @type {string}\n     * @memberof CreateGroupDto\n     */\n    profilePic?: string;\n    /**\n     * The URL for the group's background image\n     * @type {string}\n     * @memberof CreateGroupDto\n     */\n    profileBanner?: string;\n    /**\n     * Whether the group is viewable by non-members\n     * @type {boolean}\n     * @memberof CreateGroupDto\n     */\n    private: boolean; // modified by backend/scripts/generate-api.js\n}\n/**\n * \n * @export\n * @interface CreateGroupSuccessDto\n */\nexport interface CreateGroupSuccessDto {\n    /**\n     * The newly created group's object ID\n     * @type {string}\n     * @memberof CreateGroupSuccessDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n}\n/**\n * \n * @export\n * @interface CreateMessageBodyDto\n */\nexport interface CreateMessageBodyDto {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyDto\n     */\n    userID: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyDto\n     */\n    conversationID: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyDto\n     */\n    text: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateMessageBodyDto\n     */\n    createdAt: number;\n}\n/**\n * \n * @export\n * @interface CreateMessageSuccessDto\n */\nexport interface CreateMessageSuccessDto {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageSuccessDto\n     */\n    conversationID: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageSuccessDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageSuccessDto\n     */\n    author: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageSuccessDto\n     */\n    text: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateMessageSuccessDto\n     */\n    createdAt: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateMessageSuccessDto\n     */\n    updatedAt?: number;\n}\n/**\n * \n * @export\n * @interface CreatePostBodyDto\n */\nexport interface CreatePostBodyDto {\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePostBodyDto\n     */\n    title: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePostBodyDto\n     */\n    content: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreatePostBodyDto\n     */\n    tags: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePostBodyDto\n     */\n    featuredImg: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePostBodyDto\n     */\n    group?: string;\n}\n/**\n * \n * @export\n * @interface CreatePostSuccessDto\n */\nexport interface CreatePostSuccessDto {\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePostSuccessDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePostSuccessDto\n     */\n    slug: string;\n}\n/**\n * \n * @export\n * @interface CreateVideoDto\n */\nexport interface CreateVideoDto {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateVideoDto\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateVideoDto\n     */\n    description: string;\n}\n/**\n * \n * @export\n * @interface FileUploadDto\n */\nexport interface FileUploadDto {\n    /**\n     * \n     * @type {any}\n     * @memberof FileUploadDto\n     */\n    file: any;\n}\n/**\n * \n * @export\n * @interface GetAllVideosDto\n */\nexport interface GetAllVideosDto {\n    /**\n     * \n     * @type {Array<VideoDto>}\n     * @memberof GetAllVideosDto\n     */\n    videos: Array<VideoDto>;\n}\n/**\n * \n * @export\n * @interface GetGroupsSuccessDto\n */\nexport interface GetGroupsSuccessDto {\n    /**\n     * \n     * @type {Array<GroupDto>}\n     * @memberof GetGroupsSuccessDto\n     */\n    groups: Array<GroupDto>;\n}\n/**\n * \n * @export\n * @interface GetInitialDataDto\n */\nexport interface GetInitialDataDto {\n    /**\n     * \n     * @type {Array<PostDto>}\n     * @memberof GetInitialDataDto\n     */\n    posts: Array<PostDto>;\n    /**\n     * \n     * @type {Array<UserDto>}\n     * @memberof GetInitialDataDto\n     */\n    users: Array<UserDto>;\n    /**\n     * \n     * @type {Array<TagsDto>}\n     * @memberof GetInitialDataDto\n     */\n    tags: Array<TagsDto>;\n}\n/**\n * \n * @export\n * @interface GetInitialDataLoggedInDto\n */\nexport interface GetInitialDataLoggedInDto {\n    /**\n     * \n     * @type {Array<PostDto>}\n     * @memberof GetInitialDataLoggedInDto\n     */\n    posts: Array<PostDto>;\n    /**\n     * \n     * @type {Array<UserDto>}\n     * @memberof GetInitialDataLoggedInDto\n     */\n    users: Array<UserDto>;\n    /**\n     * \n     * @type {UserDto}\n     * @memberof GetInitialDataLoggedInDto\n     */\n    user: UserDto;\n    /**\n     * \n     * @type {Array<TagsDto>}\n     * @memberof GetInitialDataLoggedInDto\n     */\n    tags: Array<TagsDto>;\n}\n/**\n * \n * @export\n * @interface GetPostDetailsSuccessDto\n */\nexport interface GetPostDetailsSuccessDto {\n    /**\n     * \n     * @type {PostWithDetails}\n     * @memberof GetPostDetailsSuccessDto\n     */\n    post: PostWithDetails;\n    /**\n     * \n     * @type {UserDto}\n     * @memberof GetPostDetailsSuccessDto\n     */\n    author?: UserDto;\n}\n/**\n * \n * @export\n * @interface GetPostsByTagDto\n */\nexport interface GetPostsByTagDto {\n    /**\n     * \n     * @type {number}\n     * @memberof GetPostsByTagDto\n     */\n    cursor: number;\n    /**\n     * \n     * @type {string}\n     * @memberof GetPostsByTagDto\n     */\n    tagID: string;\n    /**\n     * \n     * @type {Array<PostDto>}\n     * @memberof GetPostsByTagDto\n     */\n    posts: Array<PostDto>;\n}\n/**\n * \n * @export\n * @interface GetUsersSuccessDto\n */\nexport interface GetUsersSuccessDto {\n    /**\n     * \n     * @type {Array<UserDto>}\n     * @memberof GetUsersSuccessDto\n     */\n    users: Array<UserDto>;\n}\n/**\n * \n * @export\n * @interface GitHubLoginBody\n */\nexport interface GitHubLoginBody {\n    /**\n     * \n     * @type {string}\n     * @memberof GitHubLoginBody\n     */\n    code: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GitHubLoginBody\n     */\n    state: string;\n}\n/**\n * \n * @export\n * @interface GoogleLoginBody\n */\nexport interface GoogleLoginBody {\n}\n/**\n * \n * @export\n * @interface GroupDto\n */\nexport interface GroupDto {\n    /**\n     * \n     * @type {string}\n     * @memberof GroupDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof GroupDto\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupDto\n     */\n    description: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof GroupDto\n     */\n    private: boolean; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof GroupDto\n     */\n    profilePic: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupDto\n     */\n    profileBanner: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof GroupDto\n     */\n    admins: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof GroupDto\n     */\n    users: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof GroupDto\n     */\n    posts: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof GroupDto\n     */\n    videos: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupDto\n     */\n    createdAt: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupDto\n     */\n    updatedAt: string;\n}\n/**\n * \n * @export\n * @interface LogOut\n */\nexport interface LogOut {\n}\n/**\n * \n * @export\n * @interface LogOutSuccess\n */\nexport interface LogOutSuccess {\n}\n/**\n * \n * @export\n * @interface LoginSuccess\n */\nexport interface LoginSuccess {\n    /**\n     * The CoderCommunity JWT\n     * @type {string}\n     * @memberof LoginSuccess\n     */\n    jwt: string;\n    /**\n     * The MongoDB user _id\n     * @type {string}\n     * @memberof LoginSuccess\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * The visible User ID\n     * @type {string}\n     * @memberof LoginSuccess\n     */\n    userID: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof LoginSuccess\n     */\n    isNewUser: boolean;\n}\n/**\n * \n * @export\n * @interface MessageDto\n */\nexport interface MessageDto {\n    /**\n     * \n     * @type {string}\n     * @memberof MessageDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof MessageDto\n     */\n    author: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MessageDto\n     */\n    text: string;\n    /**\n     * \n     * @type {any}\n     * @memberof MessageDto\n     */\n    createdAt: any;\n    /**\n     * \n     * @type {any}\n     * @memberof MessageDto\n     */\n    updatedAt: any;\n}\n/**\n * \n * @export\n * @interface Post\n */\nexport interface Post {\n    /**\n     * \n     * @type {any}\n     * @memberof Post\n     */\n    author: any;\n    /**\n     * \n     * @type {string}\n     * @memberof Post\n     */\n    title: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Post\n     */\n    slug: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Post\n     */\n    previewContent: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Post\n     */\n    content: string;\n    /**\n     * \n     * @type {Array<any>}\n     * @memberof Post\n     */\n    tags: Array<any>;\n    /**\n     * \n     * @type {string}\n     * @memberof Post\n     */\n    featuredImg: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Post\n     */\n    likes: number;\n    /**\n     * \n     * @type {Array<any>}\n     * @memberof Post\n     */\n    comments: Array<any>;\n    /**\n     * \n     * @type {number}\n     * @memberof Post\n     */\n    views: number;\n    /**\n     * \n     * @type {any}\n     * @memberof Post\n     */\n    group: any;\n}\n/**\n * \n * @export\n * @interface PostDto\n */\nexport interface PostDto {\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    author: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    title: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    previewContent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    content?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof PostDto\n     */\n    tags: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    featuredImg: string;\n    /**\n     * \n     * @type {number}\n     * @memberof PostDto\n     */\n    likes: number;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof PostDto\n     */\n    comments: Array<string>;\n    /**\n     * \n     * @type {number}\n     * @memberof PostDto\n     */\n    commentsCount: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PostDto\n     */\n    views: number;\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    createdAt: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    slug: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    group?: string;\n}\n/**\n * \n * @export\n * @interface PostWithDetails\n */\nexport interface PostWithDetails {\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    author: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    title: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    previewContent: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    content: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof PostWithDetails\n     */\n    tags: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    featuredImg: string;\n    /**\n     * \n     * @type {number}\n     * @memberof PostWithDetails\n     */\n    likes: number;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof PostWithDetails\n     */\n    comments: Array<string>;\n    /**\n     * \n     * @type {number}\n     * @memberof PostWithDetails\n     */\n    commentsCount: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PostWithDetails\n     */\n    views: number;\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    createdAt: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    updatedAt: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    slug: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    group?: string;\n}\n/**\n * \n * @export\n * @interface SearchResultDto\n */\nexport interface SearchResultDto {\n    /**\n     * \n     * @type {Array<Post>}\n     * @memberof SearchResultDto\n     */\n    posts: Array<Post>;\n}\n/**\n * \n * @export\n * @interface TagsDto\n */\nexport interface TagsDto {\n    /**\n     * \n     * @type {string}\n     * @memberof TagsDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof TagsDto\n     */\n    name: string;\n}\n/**\n * \n * @export\n * @interface UpdatePostBodyDto\n */\nexport interface UpdatePostBodyDto {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdatePostBodyDto\n     */\n    title?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdatePostBodyDto\n     */\n    content?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdatePostBodyDto\n     */\n    featuredImg?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UpdatePostBodyDto\n     */\n    tags?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdatePostBodyDto\n     */\n    oldSlug?: string;\n}\n/**\n * \n * @export\n * @interface UpdatePostSuccessDto\n */\nexport interface UpdatePostSuccessDto {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdatePostSuccessDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof UpdatePostSuccessDto\n     */\n    slug: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdatePostSuccessDto\n     */\n    oldSlug?: string;\n}\n/**\n * \n * @export\n * @interface UpdateProfileReqDto\n */\nexport interface UpdateProfileReqDto {\n    /**\n     * Updated name\n     * @type {string}\n     * @memberof UpdateProfileReqDto\n     */\n    name?: string;\n    /**\n     * Updated status\n     * @type {string}\n     * @memberof UpdateProfileReqDto\n     */\n    status?: string;\n    /**\n     * Array of tag ObjectIDs, which will completely replace the previous tags of the user\n     * @type {Array<string>}\n     * @memberof UpdateProfileReqDto\n     */\n    tags?: Array<string>;\n}\n/**\n * \n * @export\n * @interface UploadSuccess\n */\nexport interface UploadSuccess {\n    /**\n     * The URL of the file which is now statically served as a result of this upload.\n     * @type {string}\n     * @memberof UploadSuccess\n     */\n    url: string;\n}\n/**\n * \n * @export\n * @interface UserDto\n */\nexport interface UserDto {\n    /**\n     * \n     * @type {string}\n     * @memberof UserDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof UserDto\n     */\n    userID: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserDto\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserDto\n     */\n    profilePic?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserDto\n     */\n    profileBanner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserDto\n     */\n    status?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UserDto\n     */\n    followers?: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UserDto\n     */\n    following?: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UserDto\n     */\n    groups?: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UserDto\n     */\n    posts?: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UserDto\n     */\n    savedPosts?: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UserDto\n     */\n    likedPosts: Array<string>;\n}\n/**\n * \n * @export\n * @interface VideoDto\n */\nexport interface VideoDto {\n    /**\n     * \n     * @type {string}\n     * @memberof VideoDto\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VideoDto\n     */\n    description: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VideoDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof VideoDto\n     */\n    createdAt: string;\n}\n/**\n * AuthApi - fetch parameter creator\n * @export\n */\nexport const AuthApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {LogOut} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLogOut(body: LogOut, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling authControllerLogOut.');\n            }\n            const localVarPath = `/api/logout`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"LogOut\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {GitHubLoginBody} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLoginGitHub(body: GitHubLoginBody, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling authControllerLoginGitHub.');\n            }\n            const localVarPath = `/api/login/github`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"GitHubLoginBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {GoogleLoginBody} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLoginGoogle(body: GoogleLoginBody, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling authControllerLoginGoogle.');\n            }\n            const localVarPath = `/api/login/google`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"GoogleLoginBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AuthApi - functional programming interface\n * @export\n */\nexport const AuthApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {LogOut} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLogOut(body: LogOut, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LogOutSuccess> {\n            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerLogOut(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {GitHubLoginBody} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLoginGitHub(body: GitHubLoginBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginSuccess> {\n            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerLoginGitHub(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {GoogleLoginBody} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLoginGoogle(body: GoogleLoginBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginSuccess> {\n            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerLoginGoogle(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * AuthApi - factory interface\n * @export\n */\nexport const AuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {LogOut} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLogOut(body: LogOut, options?: any) {\n            return AuthApiFp(configuration).authControllerLogOut(body, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {GitHubLoginBody} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLoginGitHub(body: GitHubLoginBody, options?: any) {\n            return AuthApiFp(configuration).authControllerLoginGitHub(body, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {GoogleLoginBody} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLoginGoogle(body: GoogleLoginBody, options?: any) {\n            return AuthApiFp(configuration).authControllerLoginGoogle(body, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * AuthApi - object-oriented interface\n * @export\n * @class AuthApi\n * @extends {BaseAPI}\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     * \n     * @param {LogOut} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public authControllerLogOut(body: LogOut, options?: any) {\n        return AuthApiFp(this.configuration).authControllerLogOut(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {GitHubLoginBody} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public authControllerLoginGitHub(body: GitHubLoginBody, options?: any) {\n        return AuthApiFp(this.configuration).authControllerLoginGitHub(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {GoogleLoginBody} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public authControllerLoginGoogle(body: GoogleLoginBody, options?: any) {\n        return AuthApiFp(this.configuration).authControllerLoginGoogle(body, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * ConversationsApi - fetch parameter creator\n * @export\n */\nexport const ConversationsApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateConversationBodyDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        conversationsControllerCreateConversation(body: CreateConversationBodyDto, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling conversationsControllerCreateConversation.');\n            }\n            const localVarPath = `/api/conversations`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"CreateConversationBodyDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ConversationsApi - functional programming interface\n * @export\n */\nexport const ConversationsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateConversationBodyDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        conversationsControllerCreateConversation(body: CreateConversationBodyDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateConversationSuccessDto> {\n            const localVarFetchArgs = ConversationsApiFetchParamCreator(configuration).conversationsControllerCreateConversation(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * ConversationsApi - factory interface\n * @export\n */\nexport const ConversationsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {CreateConversationBodyDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        conversationsControllerCreateConversation(body: CreateConversationBodyDto, options?: any) {\n            return ConversationsApiFp(configuration).conversationsControllerCreateConversation(body, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * ConversationsApi - object-oriented interface\n * @export\n * @class ConversationsApi\n * @extends {BaseAPI}\n */\nexport class ConversationsApi extends BaseAPI {\n    /**\n     * \n     * @param {CreateConversationBodyDto} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ConversationsApi\n     */\n    public conversationsControllerCreateConversation(body: CreateConversationBodyDto, options?: any) {\n        return ConversationsApiFp(this.configuration).conversationsControllerCreateConversation(body, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * DefaultApi - fetch parameter creator\n * @export\n */\nexport const DefaultApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        appControllerGetHello(options: any = {}): FetchArgs {\n            const localVarPath = `/api/hello`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        appControllerGetHello(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).appControllerGetHello(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        appControllerGetHello(options?: any) {\n            return DefaultApiFp(configuration).appControllerGetHello(options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public appControllerGetHello(options?: any) {\n        return DefaultApiFp(this.configuration).appControllerGetHello(options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * DevApi - fetch parameter creator\n * @export\n */\nexport const DevApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateCustomUser} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerCreateCustomUser(body: CreateCustomUser, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling devControllerCreateCustomUser.');\n            }\n            const localVarPath = `/api/dev/create-user`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"CreateCustomUser\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerCreatePostDev(options: any = {}): FetchArgs {\n            const localVarPath = `/api/dev/create-post`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerGetJwt(id: string, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling devControllerGetJwt.');\n            }\n            const localVarPath = `/api/dev/jwt/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerLoginDev(options: any = {}): FetchArgs {\n            const localVarPath = `/api/dev/login`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerMarco(options: any = {}): FetchArgs {\n            const localVarPath = `/api/dev/marco`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerMarcoPersonal(options: any = {}): FetchArgs {\n            const localVarPath = `/api/dev/marco/personal`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DevApi - functional programming interface\n * @export\n */\nexport const DevApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateCustomUser} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerCreateCustomUser(body: CreateCustomUser, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginSuccess> {\n            const localVarFetchArgs = DevApiFetchParamCreator(configuration).devControllerCreateCustomUser(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerCreatePostDev(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreatePostSuccessDto> {\n            const localVarFetchArgs = DevApiFetchParamCreator(configuration).devControllerCreatePostDev(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerGetJwt(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DevApiFetchParamCreator(configuration).devControllerGetJwt(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerLoginDev(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginSuccess> {\n            const localVarFetchArgs = DevApiFetchParamCreator(configuration).devControllerLoginDev(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerMarco(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = DevApiFetchParamCreator(configuration).devControllerMarco(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerMarcoPersonal(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = DevApiFetchParamCreator(configuration).devControllerMarcoPersonal(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * DevApi - factory interface\n * @export\n */\nexport const DevApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {CreateCustomUser} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerCreateCustomUser(body: CreateCustomUser, options?: any) {\n            return DevApiFp(configuration).devControllerCreateCustomUser(body, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerCreatePostDev(options?: any) {\n            return DevApiFp(configuration).devControllerCreatePostDev(options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerGetJwt(id: string, options?: any) {\n            return DevApiFp(configuration).devControllerGetJwt(id, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerLoginDev(options?: any) {\n            return DevApiFp(configuration).devControllerLoginDev(options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerMarco(options?: any) {\n            return DevApiFp(configuration).devControllerMarco(options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerMarcoPersonal(options?: any) {\n            return DevApiFp(configuration).devControllerMarcoPersonal(options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * DevApi - object-oriented interface\n * @export\n * @class DevApi\n * @extends {BaseAPI}\n */\nexport class DevApi extends BaseAPI {\n    /**\n     * \n     * @param {CreateCustomUser} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DevApi\n     */\n    public devControllerCreateCustomUser(body: CreateCustomUser, options?: any) {\n        return DevApiFp(this.configuration).devControllerCreateCustomUser(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DevApi\n     */\n    public devControllerCreatePostDev(options?: any) {\n        return DevApiFp(this.configuration).devControllerCreatePostDev(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DevApi\n     */\n    public devControllerGetJwt(id: string, options?: any) {\n        return DevApiFp(this.configuration).devControllerGetJwt(id, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DevApi\n     */\n    public devControllerLoginDev(options?: any) {\n        return DevApiFp(this.configuration).devControllerLoginDev(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DevApi\n     */\n    public devControllerMarco(options?: any) {\n        return DevApiFp(this.configuration).devControllerMarco(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DevApi\n     */\n    public devControllerMarcoPersonal(options?: any) {\n        return DevApiFp(this.configuration).devControllerMarcoPersonal(options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * GroupsApi - fetch parameter creator\n * @export\n */\nexport const GroupsApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateGroupDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerCreateGroup(body: CreateGroupDto, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsControllerCreateGroup.');\n            }\n            const localVarPath = `/api/groups`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"CreateGroupDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetGroups(options: any = {}): FetchArgs {\n            const localVarPath = `/api/groups`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} privateId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetPrivateGroup(privateId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'privateId' is not null or undefined\n            if (privateId === null || privateId === undefined) {\n                throw new RequiredError('privateId','Required parameter privateId was null or undefined when calling groupsControllerGetPrivateGroup.');\n            }\n            const localVarPath = `/api/groups/{privateId}`\n                .replace(`{${\"privateId\"}}`, encodeURIComponent(String(privateId)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetPublicGroup(id: string, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerGetPublicGroup.');\n            }\n            const localVarPath = `/api/groups/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerJoinGroup(id: string, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerJoinGroup.');\n            }\n            const localVarPath = `/api/groups/join/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerLeaveGroup(id: string, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerLeaveGroup.');\n            }\n            const localVarPath = `/api/groups/leave/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * GroupsApi - functional programming interface\n * @export\n */\nexport const GroupsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateGroupDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerCreateGroup(body: CreateGroupDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateGroupSuccessDto> {\n            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerCreateGroup(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetGroups(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetGroupsSuccessDto> {\n            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerGetGroups(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} privateId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetPrivateGroup(privateId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupDto> {\n            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerGetPrivateGroup(privateId, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetPublicGroup(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupDto> {\n            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerGetPublicGroup(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerJoinGroup(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerJoinGroup(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerLeaveGroup(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerLeaveGroup(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * GroupsApi - factory interface\n * @export\n */\nexport const GroupsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {CreateGroupDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerCreateGroup(body: CreateGroupDto, options?: any) {\n            return GroupsApiFp(configuration).groupsControllerCreateGroup(body, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetGroups(options?: any) {\n            return GroupsApiFp(configuration).groupsControllerGetGroups(options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} privateId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetPrivateGroup(privateId: string, options?: any) {\n            return GroupsApiFp(configuration).groupsControllerGetPrivateGroup(privateId, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetPublicGroup(id: string, options?: any) {\n            return GroupsApiFp(configuration).groupsControllerGetPublicGroup(id, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerJoinGroup(id: string, options?: any) {\n            return GroupsApiFp(configuration).groupsControllerJoinGroup(id, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerLeaveGroup(id: string, options?: any) {\n            return GroupsApiFp(configuration).groupsControllerLeaveGroup(id, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * GroupsApi - object-oriented interface\n * @export\n * @class GroupsApi\n * @extends {BaseAPI}\n */\nexport class GroupsApi extends BaseAPI {\n    /**\n     * \n     * @param {CreateGroupDto} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupsApi\n     */\n    public groupsControllerCreateGroup(body: CreateGroupDto, options?: any) {\n        return GroupsApiFp(this.configuration).groupsControllerCreateGroup(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupsApi\n     */\n    public groupsControllerGetGroups(options?: any) {\n        return GroupsApiFp(this.configuration).groupsControllerGetGroups(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} privateId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupsApi\n     */\n    public groupsControllerGetPrivateGroup(privateId: string, options?: any) {\n        return GroupsApiFp(this.configuration).groupsControllerGetPrivateGroup(privateId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupsApi\n     */\n    public groupsControllerGetPublicGroup(id: string, options?: any) {\n        return GroupsApiFp(this.configuration).groupsControllerGetPublicGroup(id, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupsApi\n     */\n    public groupsControllerJoinGroup(id: string, options?: any) {\n        return GroupsApiFp(this.configuration).groupsControllerJoinGroup(id, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupsApi\n     */\n    public groupsControllerLeaveGroup(id: string, options?: any) {\n        return GroupsApiFp(this.configuration).groupsControllerLeaveGroup(id, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * MessagesApi - fetch parameter creator\n * @export\n */\nexport const MessagesApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateMessageBodyDto} body \n         * @param {string} conversationID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        messagesControllerCreateMessage(body: CreateMessageBodyDto, conversationID: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling messagesControllerCreateMessage.');\n            }\n            // verify required parameter 'conversationID' is not null or undefined\n            if (conversationID === null || conversationID === undefined) {\n                throw new RequiredError('conversationID','Required parameter conversationID was null or undefined when calling messagesControllerCreateMessage.');\n            }\n            const localVarPath = `/api/messages/{conversationID}`\n                .replace(`{${\"conversationID\"}}`, encodeURIComponent(String(conversationID)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"CreateMessageBodyDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} conversationID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        messagesControllerGetMessagesInConversation(conversationID: string, options: any = {}): FetchArgs {\n            // verify required parameter 'conversationID' is not null or undefined\n            if (conversationID === null || conversationID === undefined) {\n                throw new RequiredError('conversationID','Required parameter conversationID was null or undefined when calling messagesControllerGetMessagesInConversation.');\n            }\n            const localVarPath = `/api/messages/{conversationID}`\n                .replace(`{${\"conversationID\"}}`, encodeURIComponent(String(conversationID)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * MessagesApi - functional programming interface\n * @export\n */\nexport const MessagesApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateMessageBodyDto} body \n         * @param {string} conversationID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        messagesControllerCreateMessage(body: CreateMessageBodyDto, conversationID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateMessageSuccessDto> {\n            const localVarFetchArgs = MessagesApiFetchParamCreator(configuration).messagesControllerCreateMessage(body, conversationID, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} conversationID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        messagesControllerGetMessagesInConversation(conversationID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<MessageDto>> {\n            const localVarFetchArgs = MessagesApiFetchParamCreator(configuration).messagesControllerGetMessagesInConversation(conversationID, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * MessagesApi - factory interface\n * @export\n */\nexport const MessagesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {CreateMessageBodyDto} body \n         * @param {string} conversationID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        messagesControllerCreateMessage(body: CreateMessageBodyDto, conversationID: string, options?: any) {\n            return MessagesApiFp(configuration).messagesControllerCreateMessage(body, conversationID, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} conversationID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        messagesControllerGetMessagesInConversation(conversationID: string, options?: any) {\n            return MessagesApiFp(configuration).messagesControllerGetMessagesInConversation(conversationID, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * MessagesApi - object-oriented interface\n * @export\n * @class MessagesApi\n * @extends {BaseAPI}\n */\nexport class MessagesApi extends BaseAPI {\n    /**\n     * \n     * @param {CreateMessageBodyDto} body \n     * @param {string} conversationID \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MessagesApi\n     */\n    public messagesControllerCreateMessage(body: CreateMessageBodyDto, conversationID: string, options?: any) {\n        return MessagesApiFp(this.configuration).messagesControllerCreateMessage(body, conversationID, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} conversationID \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MessagesApi\n     */\n    public messagesControllerGetMessagesInConversation(conversationID: string, options?: any) {\n        return MessagesApiFp(this.configuration).messagesControllerGetMessagesInConversation(conversationID, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * PostsApi - fetch parameter creator\n * @export\n */\nexport const PostsApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreatePostBodyDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerCreatePost(body: CreatePostBodyDto, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling postsControllerCreatePost.');\n            }\n            const localVarPath = `/api/posts`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"CreatePostBodyDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerGetPostByID(postID: string, options: any = {}): FetchArgs {\n            // verify required parameter 'postID' is not null or undefined\n            if (postID === null || postID === undefined) {\n                throw new RequiredError('postID','Required parameter postID was null or undefined when calling postsControllerGetPostByID.');\n            }\n            const localVarPath = `/api/posts/byID/{postID}`\n                .replace(`{${\"postID\"}}`, encodeURIComponent(String(postID)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {boolean} getAuthor \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerGetPostBySlug(slug: string, getAuthor: boolean, options: any = {}): FetchArgs {\n            // verify required parameter 'slug' is not null or undefined\n            if (slug === null || slug === undefined) {\n                throw new RequiredError('slug','Required parameter slug was null or undefined when calling postsControllerGetPostBySlug.');\n            }\n            // verify required parameter 'getAuthor' is not null or undefined\n            if (getAuthor === null || getAuthor === undefined) {\n                throw new RequiredError('getAuthor','Required parameter getAuthor was null or undefined when calling postsControllerGetPostBySlug.');\n            }\n            const localVarPath = `/api/posts/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (getAuthor !== undefined) {\n                localVarQueryParameter['get-author'] = getAuthor;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerIncrementView(postID: string, options: any = {}): FetchArgs {\n            // verify required parameter 'postID' is not null or undefined\n            if (postID === null || postID === undefined) {\n                throw new RequiredError('postID','Required parameter postID was null or undefined when calling postsControllerIncrementView.');\n            }\n            const localVarPath = `/api/posts/increment-view/{postID}`\n                .replace(`{${\"postID\"}}`, encodeURIComponent(String(postID)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerLikePost(postID: string, options: any = {}): FetchArgs {\n            // verify required parameter 'postID' is not null or undefined\n            if (postID === null || postID === undefined) {\n                throw new RequiredError('postID','Required parameter postID was null or undefined when calling postsControllerLikePost.');\n            }\n            const localVarPath = `/api/posts/like`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            if (postID !== undefined) {\n                localVarQueryParameter['postID'] = postID;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerUnlikePost(postID: string, options: any = {}): FetchArgs {\n            // verify required parameter 'postID' is not null or undefined\n            if (postID === null || postID === undefined) {\n                throw new RequiredError('postID','Required parameter postID was null or undefined when calling postsControllerUnlikePost.');\n            }\n            const localVarPath = `/api/posts/unlike`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            if (postID !== undefined) {\n                localVarQueryParameter['postID'] = postID;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {UpdatePostBodyDto} body \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerUpdatePostBySlug(body: UpdatePostBodyDto, slug: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling postsControllerUpdatePostBySlug.');\n            }\n            // verify required parameter 'slug' is not null or undefined\n            if (slug === null || slug === undefined) {\n                throw new RequiredError('slug','Required parameter slug was null or undefined when calling postsControllerUpdatePostBySlug.');\n            }\n            const localVarPath = `/api/posts/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"UpdatePostBodyDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} tagID The ObjectID of the tag\n         * @param {number} [requestedCount] How many posts to fetch\n         * @param {number} [startIdx] What index to start at, e.g. if startIdx &#x3D; 5, then the 5 posts (0th, 1st, 2nd, 3rd, 4th) of this tag will not be fetched\n         * @param {any} [excludePostIDs] An object that works like a set of Post ObjectIDs to exclude\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tagsControllerGetPostsByTag(tagID: string, requestedCount?: number, startIdx?: number, excludePostIDs?: any, options: any = {}): FetchArgs {\n            // verify required parameter 'tagID' is not null or undefined\n            if (tagID === null || tagID === undefined) {\n                throw new RequiredError('tagID','Required parameter tagID was null or undefined when calling tagsControllerGetPostsByTag.');\n            }\n            const localVarPath = `/api/tags/posts`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (tagID !== undefined) {\n                localVarQueryParameter['tagID'] = tagID;\n            }\n\n            if (requestedCount !== undefined) {\n                localVarQueryParameter['requestedCount'] = requestedCount;\n            }\n\n            if (startIdx !== undefined) {\n                localVarQueryParameter['startIdx'] = startIdx;\n            }\n\n            if (excludePostIDs !== undefined) {\n                localVarQueryParameter['excludePostIDs'] = excludePostIDs;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * PostsApi - functional programming interface\n * @export\n */\nexport const PostsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreatePostBodyDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerCreatePost(body: CreatePostBodyDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreatePostSuccessDto> {\n            const localVarFetchArgs = PostsApiFetchParamCreator(configuration).postsControllerCreatePost(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerGetPostByID(postID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetPostDetailsSuccessDto> {\n            const localVarFetchArgs = PostsApiFetchParamCreator(configuration).postsControllerGetPostByID(postID, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {boolean} getAuthor \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerGetPostBySlug(slug: string, getAuthor: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetPostDetailsSuccessDto> {\n            const localVarFetchArgs = PostsApiFetchParamCreator(configuration).postsControllerGetPostBySlug(slug, getAuthor, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerIncrementView(postID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = PostsApiFetchParamCreator(configuration).postsControllerIncrementView(postID, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerLikePost(postID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = PostsApiFetchParamCreator(configuration).postsControllerLikePost(postID, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerUnlikePost(postID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = PostsApiFetchParamCreator(configuration).postsControllerUnlikePost(postID, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {UpdatePostBodyDto} body \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerUpdatePostBySlug(body: UpdatePostBodyDto, slug: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UpdatePostSuccessDto> {\n            const localVarFetchArgs = PostsApiFetchParamCreator(configuration).postsControllerUpdatePostBySlug(body, slug, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} tagID The ObjectID of the tag\n         * @param {number} [requestedCount] How many posts to fetch\n         * @param {number} [startIdx] What index to start at, e.g. if startIdx &#x3D; 5, then the 5 posts (0th, 1st, 2nd, 3rd, 4th) of this tag will not be fetched\n         * @param {any} [excludePostIDs] An object that works like a set of Post ObjectIDs to exclude\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tagsControllerGetPostsByTag(tagID: string, requestedCount?: number, startIdx?: number, excludePostIDs?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetPostsByTagDto> {\n            const localVarFetchArgs = PostsApiFetchParamCreator(configuration).tagsControllerGetPostsByTag(tagID, requestedCount, startIdx, excludePostIDs, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * PostsApi - factory interface\n * @export\n */\nexport const PostsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {CreatePostBodyDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerCreatePost(body: CreatePostBodyDto, options?: any) {\n            return PostsApiFp(configuration).postsControllerCreatePost(body, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerGetPostByID(postID: string, options?: any) {\n            return PostsApiFp(configuration).postsControllerGetPostByID(postID, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {boolean} getAuthor \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerGetPostBySlug(slug: string, getAuthor: boolean, options?: any) {\n            return PostsApiFp(configuration).postsControllerGetPostBySlug(slug, getAuthor, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerIncrementView(postID: string, options?: any) {\n            return PostsApiFp(configuration).postsControllerIncrementView(postID, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerLikePost(postID: string, options?: any) {\n            return PostsApiFp(configuration).postsControllerLikePost(postID, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerUnlikePost(postID: string, options?: any) {\n            return PostsApiFp(configuration).postsControllerUnlikePost(postID, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {UpdatePostBodyDto} body \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerUpdatePostBySlug(body: UpdatePostBodyDto, slug: string, options?: any) {\n            return PostsApiFp(configuration).postsControllerUpdatePostBySlug(body, slug, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} tagID The ObjectID of the tag\n         * @param {number} [requestedCount] How many posts to fetch\n         * @param {number} [startIdx] What index to start at, e.g. if startIdx &#x3D; 5, then the 5 posts (0th, 1st, 2nd, 3rd, 4th) of this tag will not be fetched\n         * @param {any} [excludePostIDs] An object that works like a set of Post ObjectIDs to exclude\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tagsControllerGetPostsByTag(tagID: string, requestedCount?: number, startIdx?: number, excludePostIDs?: any, options?: any) {\n            return PostsApiFp(configuration).tagsControllerGetPostsByTag(tagID, requestedCount, startIdx, excludePostIDs, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * PostsApi - object-oriented interface\n * @export\n * @class PostsApi\n * @extends {BaseAPI}\n */\nexport class PostsApi extends BaseAPI {\n    /**\n     * \n     * @param {CreatePostBodyDto} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PostsApi\n     */\n    public postsControllerCreatePost(body: CreatePostBodyDto, options?: any) {\n        return PostsApiFp(this.configuration).postsControllerCreatePost(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} postID \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PostsApi\n     */\n    public postsControllerGetPostByID(postID: string, options?: any) {\n        return PostsApiFp(this.configuration).postsControllerGetPostByID(postID, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} slug \n     * @param {boolean} getAuthor \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PostsApi\n     */\n    public postsControllerGetPostBySlug(slug: string, getAuthor: boolean, options?: any) {\n        return PostsApiFp(this.configuration).postsControllerGetPostBySlug(slug, getAuthor, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} postID \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PostsApi\n     */\n    public postsControllerIncrementView(postID: string, options?: any) {\n        return PostsApiFp(this.configuration).postsControllerIncrementView(postID, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} postID \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PostsApi\n     */\n    public postsControllerLikePost(postID: string, options?: any) {\n        return PostsApiFp(this.configuration).postsControllerLikePost(postID, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} postID \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PostsApi\n     */\n    public postsControllerUnlikePost(postID: string, options?: any) {\n        return PostsApiFp(this.configuration).postsControllerUnlikePost(postID, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {UpdatePostBodyDto} body \n     * @param {string} slug \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PostsApi\n     */\n    public postsControllerUpdatePostBySlug(body: UpdatePostBodyDto, slug: string, options?: any) {\n        return PostsApiFp(this.configuration).postsControllerUpdatePostBySlug(body, slug, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} tagID The ObjectID of the tag\n     * @param {number} [requestedCount] How many posts to fetch\n     * @param {number} [startIdx] What index to start at, e.g. if startIdx &#x3D; 5, then the 5 posts (0th, 1st, 2nd, 3rd, 4th) of this tag will not be fetched\n     * @param {any} [excludePostIDs] An object that works like a set of Post ObjectIDs to exclude\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PostsApi\n     */\n    public tagsControllerGetPostsByTag(tagID: string, requestedCount?: number, startIdx?: number, excludePostIDs?: any, options?: any) {\n        return PostsApiFp(this.configuration).tagsControllerGetPostsByTag(tagID, requestedCount, startIdx, excludePostIDs, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * SearchApi - fetch parameter creator\n * @export\n */\nexport const SearchApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Finds posts containing any of the terms in the query string\n         * @param {string} q \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchControllerSearch(q: string, options: any = {}): FetchArgs {\n            // verify required parameter 'q' is not null or undefined\n            if (q === null || q === undefined) {\n                throw new RequiredError('q','Required parameter q was null or undefined when calling searchControllerSearch.');\n            }\n            const localVarPath = `/api/search`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (q !== undefined) {\n                localVarQueryParameter['q'] = q;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * SearchApi - functional programming interface\n * @export\n */\nexport const SearchApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Finds posts containing any of the terms in the query string\n         * @param {string} q \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchControllerSearch(q: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SearchResultDto> {\n            const localVarFetchArgs = SearchApiFetchParamCreator(configuration).searchControllerSearch(q, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * SearchApi - factory interface\n * @export\n */\nexport const SearchApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Finds posts containing any of the terms in the query string\n         * @param {string} q \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchControllerSearch(q: string, options?: any) {\n            return SearchApiFp(configuration).searchControllerSearch(q, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * SearchApi - object-oriented interface\n * @export\n * @class SearchApi\n * @extends {BaseAPI}\n */\nexport class SearchApi extends BaseAPI {\n    /**\n     * Finds posts containing any of the terms in the query string\n     * @param {string} q \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SearchApi\n     */\n    public searchControllerSearch(q: string, options?: any) {\n        return SearchApiFp(this.configuration).searchControllerSearch(q, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * TrendingApi - fetch parameter creator\n * @export\n */\nexport const TrendingApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {number} fetchCount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        trendingControllerGetTrending(fetchCount: number, options: any = {}): FetchArgs {\n            // verify required parameter 'fetchCount' is not null or undefined\n            if (fetchCount === null || fetchCount === undefined) {\n                throw new RequiredError('fetchCount','Required parameter fetchCount was null or undefined when calling trendingControllerGetTrending.');\n            }\n            const localVarPath = `/api/trending/fetchCount`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (fetchCount !== undefined) {\n                localVarQueryParameter['fetchCount'] = fetchCount;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} fetchCount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        trendingControllerGetTrendingLoggedIn(fetchCount: number, options: any = {}): FetchArgs {\n            // verify required parameter 'fetchCount' is not null or undefined\n            if (fetchCount === null || fetchCount === undefined) {\n                throw new RequiredError('fetchCount','Required parameter fetchCount was null or undefined when calling trendingControllerGetTrendingLoggedIn.');\n            }\n            const localVarPath = `/api/trending/loggedIn`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (fetchCount !== undefined) {\n                localVarQueryParameter['fetchCount'] = fetchCount;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * TrendingApi - functional programming interface\n * @export\n */\nexport const TrendingApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {number} fetchCount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        trendingControllerGetTrending(fetchCount: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetInitialDataDto> {\n            const localVarFetchArgs = TrendingApiFetchParamCreator(configuration).trendingControllerGetTrending(fetchCount, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {number} fetchCount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        trendingControllerGetTrendingLoggedIn(fetchCount: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetInitialDataLoggedInDto> {\n            const localVarFetchArgs = TrendingApiFetchParamCreator(configuration).trendingControllerGetTrendingLoggedIn(fetchCount, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * TrendingApi - factory interface\n * @export\n */\nexport const TrendingApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {number} fetchCount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        trendingControllerGetTrending(fetchCount: number, options?: any) {\n            return TrendingApiFp(configuration).trendingControllerGetTrending(fetchCount, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {number} fetchCount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        trendingControllerGetTrendingLoggedIn(fetchCount: number, options?: any) {\n            return TrendingApiFp(configuration).trendingControllerGetTrendingLoggedIn(fetchCount, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * TrendingApi - object-oriented interface\n * @export\n * @class TrendingApi\n * @extends {BaseAPI}\n */\nexport class TrendingApi extends BaseAPI {\n    /**\n     * \n     * @param {number} fetchCount \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TrendingApi\n     */\n    public trendingControllerGetTrending(fetchCount: number, options?: any) {\n        return TrendingApiFp(this.configuration).trendingControllerGetTrending(fetchCount, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {number} fetchCount \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TrendingApi\n     */\n    public trendingControllerGetTrendingLoggedIn(fetchCount: number, options?: any) {\n        return TrendingApiFp(this.configuration).trendingControllerGetTrendingLoggedIn(fetchCount, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * UploadApi - fetch parameter creator\n * @export\n */\nexport const UploadApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Not implemented. Once implemented, use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work.)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadPrivateFile(options: any = {}): FetchArgs {\n            const localVarPath = `/api/upload/private/file`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work. )\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadProfileBannerPic(body: FileUploadDto, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling uploadControllerUploadProfileBannerPic.');\n            }\n            const localVarPath = `/api/upload/profile-banner-pic`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"FileUploadDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. The generated version for this front end API helpers (frontend/src/api) doesn't work.\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadProfilePic(body: FileUploadDto, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling uploadControllerUploadProfilePic.');\n            }\n            const localVarPath = `/api/upload/profile-pic`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"FileUploadDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work.)\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadPublicAsset(body: FileUploadDto, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling uploadControllerUploadPublicAsset.');\n            }\n            const localVarPath = `/api/upload/public/asset`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"FileUploadDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * UploadApi - functional programming interface\n * @export\n */\nexport const UploadApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Not implemented. Once implemented, use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work.)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadPrivateFile(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UploadSuccess> {\n            const localVarFetchArgs = UploadApiFetchParamCreator(configuration).uploadControllerUploadPrivateFile(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work. )\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadProfileBannerPic(body: FileUploadDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UploadSuccess> {\n            const localVarFetchArgs = UploadApiFetchParamCreator(configuration).uploadControllerUploadProfileBannerPic(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. The generated version for this front end API helpers (frontend/src/api) doesn't work.\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadProfilePic(body: FileUploadDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UploadSuccess> {\n            const localVarFetchArgs = UploadApiFetchParamCreator(configuration).uploadControllerUploadProfilePic(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work.)\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadPublicAsset(body: FileUploadDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UploadSuccess> {\n            const localVarFetchArgs = UploadApiFetchParamCreator(configuration).uploadControllerUploadPublicAsset(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * UploadApi - factory interface\n * @export\n */\nexport const UploadApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Not implemented. Once implemented, use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work.)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadPrivateFile(options?: any) {\n            return UploadApiFp(configuration).uploadControllerUploadPrivateFile(options)(fetch, basePath);\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work. )\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadProfileBannerPic(body: FileUploadDto, options?: any) {\n            return UploadApiFp(configuration).uploadControllerUploadProfileBannerPic(body, options)(fetch, basePath);\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. The generated version for this front end API helpers (frontend/src/api) doesn't work.\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadProfilePic(body: FileUploadDto, options?: any) {\n            return UploadApiFp(configuration).uploadControllerUploadProfilePic(body, options)(fetch, basePath);\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work.)\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadPublicAsset(body: FileUploadDto, options?: any) {\n            return UploadApiFp(configuration).uploadControllerUploadPublicAsset(body, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * UploadApi - object-oriented interface\n * @export\n * @class UploadApi\n * @extends {BaseAPI}\n */\nexport class UploadApi extends BaseAPI {\n    /**\n     * Not implemented. Once implemented, use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work.)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UploadApi\n     */\n    public uploadControllerUploadPrivateFile(options?: any) {\n        return UploadApiFp(this.configuration).uploadControllerUploadPrivateFile(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Note: use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work. )\n     * @param {FileUploadDto} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UploadApi\n     */\n    public uploadControllerUploadProfileBannerPic(body: FileUploadDto, options?: any) {\n        return UploadApiFp(this.configuration).uploadControllerUploadProfileBannerPic(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Note: use helper function in 'frontend/src/api-upload'. The generated version for this front end API helpers (frontend/src/api) doesn't work.\n     * @param {FileUploadDto} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UploadApi\n     */\n    public uploadControllerUploadProfilePic(body: FileUploadDto, options?: any) {\n        return UploadApiFp(this.configuration).uploadControllerUploadProfilePic(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Note: use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work.)\n     * @param {FileUploadDto} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UploadApi\n     */\n    public uploadControllerUploadPublicAsset(body: FileUploadDto, options?: any) {\n        return UploadApiFp(this.configuration).uploadControllerUploadPublicAsset(body, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * UserApi - fetch parameter creator\n * @export\n */\nexport const UserApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerAddFollowing(id: string, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling userControllerAddFollowing.');\n            }\n            const localVarPath = `/api/user/addFollowing/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * For updating user's name, status and tags. To update profile image or banner image, use their upload endpoints instead.\n         * @param {UpdateProfileReqDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerEditProfile(body: UpdateProfileReqDto, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling userControllerEditProfile.');\n            }\n            const localVarPath = `/api/user/edit-profile`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"UpdateProfileReqDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve the current logged in user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUser(options: any = {}): FetchArgs {\n            const localVarPath = `/api/user`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} username \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUserByUsername(username: string, options: any = {}): FetchArgs {\n            // verify required parameter 'username' is not null or undefined\n            if (username === null || username === undefined) {\n                throw new RequiredError('username','Required parameter username was null or undefined when calling userControllerGetUserByUsername.');\n            }\n            const localVarPath = `/api/user/byUsername/{username}`\n                .replace(`{${\"username\"}}`, encodeURIComponent(String(username)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} ids \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUsersByIDs(ids: string, options: any = {}): FetchArgs {\n            // verify required parameter 'ids' is not null or undefined\n            if (ids === null || ids === undefined) {\n                throw new RequiredError('ids','Required parameter ids was null or undefined when calling userControllerGetUsersByIDs.');\n            }\n            const localVarPath = `/api/user/byIds`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            if (ids !== undefined) {\n                localVarQueryParameter['ids'] = ids;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerRemoveFollowing(id: string, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling userControllerRemoveFollowing.');\n            }\n            const localVarPath = `/api/user/removeFollowing/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerSavePost(postID: string, options: any = {}): FetchArgs {\n            // verify required parameter 'postID' is not null or undefined\n            if (postID === null || postID === undefined) {\n                throw new RequiredError('postID','Required parameter postID was null or undefined when calling userControllerSavePost.');\n            }\n            const localVarPath = `/api/user/save-post/{postID}`\n                .replace(`{${\"postID\"}}`, encodeURIComponent(String(postID)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * UserApi - functional programming interface\n * @export\n */\nexport const UserApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerAddFollowing(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userControllerAddFollowing(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * For updating user's name, status and tags. To update profile image or banner image, use their upload endpoints instead.\n         * @param {UpdateProfileReqDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerEditProfile(body: UpdateProfileReqDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userControllerEditProfile(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Retrieve the current logged in user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUser(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDto> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userControllerGetUser(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} username \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUserByUsername(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDto> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userControllerGetUserByUsername(username, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} ids \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUsersByIDs(ids: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetUsersSuccessDto> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userControllerGetUsersByIDs(ids, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerRemoveFollowing(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userControllerRemoveFollowing(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerSavePost(postID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userControllerSavePost(postID, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * UserApi - factory interface\n * @export\n */\nexport const UserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerAddFollowing(id: string, options?: any) {\n            return UserApiFp(configuration).userControllerAddFollowing(id, options)(fetch, basePath);\n        },\n        /**\n         * For updating user's name, status and tags. To update profile image or banner image, use their upload endpoints instead.\n         * @param {UpdateProfileReqDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerEditProfile(body: UpdateProfileReqDto, options?: any) {\n            return UserApiFp(configuration).userControllerEditProfile(body, options)(fetch, basePath);\n        },\n        /**\n         * Retrieve the current logged in user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUser(options?: any) {\n            return UserApiFp(configuration).userControllerGetUser(options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} username \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUserByUsername(username: string, options?: any) {\n            return UserApiFp(configuration).userControllerGetUserByUsername(username, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} ids \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUsersByIDs(ids: string, options?: any) {\n            return UserApiFp(configuration).userControllerGetUsersByIDs(ids, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerRemoveFollowing(id: string, options?: any) {\n            return UserApiFp(configuration).userControllerRemoveFollowing(id, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerSavePost(postID: string, options?: any) {\n            return UserApiFp(configuration).userControllerSavePost(postID, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * UserApi - object-oriented interface\n * @export\n * @class UserApi\n * @extends {BaseAPI}\n */\nexport class UserApi extends BaseAPI {\n    /**\n     * \n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public userControllerAddFollowing(id: string, options?: any) {\n        return UserApiFp(this.configuration).userControllerAddFollowing(id, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * For updating user's name, status and tags. To update profile image or banner image, use their upload endpoints instead.\n     * @param {UpdateProfileReqDto} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public userControllerEditProfile(body: UpdateProfileReqDto, options?: any) {\n        return UserApiFp(this.configuration).userControllerEditProfile(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Retrieve the current logged in user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public userControllerGetUser(options?: any) {\n        return UserApiFp(this.configuration).userControllerGetUser(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} username \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public userControllerGetUserByUsername(username: string, options?: any) {\n        return UserApiFp(this.configuration).userControllerGetUserByUsername(username, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} ids \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public userControllerGetUsersByIDs(ids: string, options?: any) {\n        return UserApiFp(this.configuration).userControllerGetUsersByIDs(ids, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public userControllerRemoveFollowing(id: string, options?: any) {\n        return UserApiFp(this.configuration).userControllerRemoveFollowing(id, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} postID \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public userControllerSavePost(postID: string, options?: any) {\n        return UserApiFp(this.configuration).userControllerSavePost(postID, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * VideoApi - fetch parameter creator\n * @export\n */\nexport const VideoApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateVideoDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        videoControllerCreateVideo(body: CreateVideoDto, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling videoControllerCreateVideo.');\n            }\n            const localVarPath = `/api/video`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"CreateVideoDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        videoControllerGetAllVideos(options: any = {}): FetchArgs {\n            const localVarPath = `/api/video`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * VideoApi - functional programming interface\n * @export\n */\nexport const VideoApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateVideoDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        videoControllerCreateVideo(body: CreateVideoDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VideoDto> {\n            const localVarFetchArgs = VideoApiFetchParamCreator(configuration).videoControllerCreateVideo(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        videoControllerGetAllVideos(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetAllVideosDto> {\n            const localVarFetchArgs = VideoApiFetchParamCreator(configuration).videoControllerGetAllVideos(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * VideoApi - factory interface\n * @export\n */\nexport const VideoApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {CreateVideoDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        videoControllerCreateVideo(body: CreateVideoDto, options?: any) {\n            return VideoApiFp(configuration).videoControllerCreateVideo(body, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        videoControllerGetAllVideos(options?: any) {\n            return VideoApiFp(configuration).videoControllerGetAllVideos(options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * VideoApi - object-oriented interface\n * @export\n * @class VideoApi\n * @extends {BaseAPI}\n */\nexport class VideoApi extends BaseAPI {\n    /**\n     * \n     * @param {CreateVideoDto} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VideoApi\n     */\n    public videoControllerCreateVideo(body: CreateVideoDto, options?: any) {\n        return VideoApiFp(this.configuration).videoControllerCreateVideo(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VideoApi\n     */\n    public videoControllerGetAllVideos(options?: any) {\n        return VideoApiFp(this.configuration).videoControllerGetAllVideos(options)(this.fetch, this.basePath);\n    }\n\n}\n","import {CreatePostBodyDto, PostsApi, UpdatePostBodyDto} from '../api/api';\nimport {Post, Tag} from \"../store/types\";\nimport {createEntityAdapter, createSlice, createAsyncThunk, PayloadAction} from \"@reduxjs/toolkit\";\n\n/*\nexport const submitPost = createdPost => {\n    let newPost: CreatePostBodyDto = {\n        title: createdPost.title,\n        content: createdPost.content,\n        tags: createdPost.tags,\n        featuredImg: ''\n    }\n    // console.log(\"POST CREATE SLICE\");\n    return dispatch => {\n        return fetch(`http://localhost:3001/api/posts`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                newPost,\n                // user: {_id: \"5f07dd25be9a5c6510208dce\"} // curUser._id }\n            }),\n        }).then((response) => {\n            return response.json();\n        }).then((res) => {\n            console.log(res);\n        }).catch(e => console.log(e))\n    }\n}\n*/\n\n/*\nexport const updatePost = createdPost => {\n    let newPost: CreatePostBodyDto = {\n        title: createdPost.title,\n        content: createdPost.content,\n        tags: createdPost.tags,\n        featuredImg: ''\n    }\n    // const slug = urlSlug(createdPost.title);\n    console.log(createdPost.slug);\n    return dispatch => {\n        return fetch(`http://localhost:3001/api/posts/${createdPost.slug}`, {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                newPost,\n                // user: { _id: \"5eeebd4d1333dd0f79ca9be3\" } //curUser._id }\n            }),\n        }).catch(e => console.log(e))\n    }\n}\n*/\n\nexport const submitPost = createAsyncThunk(\n    'submitPost',\n    async (createdPost: CreatePostBodyDto & { author: string }) => {\n        // console.log(createdPost.title + \" \" + createdPost.content);\n        const createPostSuccessDto = await new PostsApi().postsControllerCreatePost(createdPost);\n        const {_id, slug} = createPostSuccessDto;\n        const post: Post = {\n            featuredImg: createdPost.featuredImg,\n            likes: 0,\n            tags: createdPost.tags,\n            title: createdPost.title,\n            views: 0,\n            _id: _id,\n            slug: slug,\n            author: createdPost.author,\n            comments: [],\n            commentsCount: 0,\n            content: createdPost.content,\n            createdAt: Date.now().toString()\n        }\n        return post;\n    }\n)\n\nexport const updatePost = createAsyncThunk(\n    'updatePost',\n    async ({update, slug}: { update: UpdatePostBodyDto, slug: string }) => {\n        console.log(update);\n        console.log(slug);\n        const {_id, slug: newSlug} = await new PostsApi().postsControllerUpdatePostBySlug(update, slug);\n        return {update, _id, slug: newSlug, oldSlug: slug};\n    }\n);\n","import {UploadSuccess} from \"../api\";\nimport {JwtLocalStorageKey} from \"../constants\";\n\n// These functions are manually written because the generated version in `frontend/src/api` don't work for file upload\n// For example usage, see `frontend/src/pages/group/CreateGroupForm.tsx` around line 100\n\n/**\n * @returns the URL of the file (in a Promise)\n *\n * @param file The file we get from upload component is an array even for single uploads, but this function\n * will take *either* that array *or* the single file. Since the back end only handles 1 file at a time, it will use the\n * first file in the array, if it's an array\n */\nexport function uploadUserProfilePic(file: File | File[]): Promise<string> {\n    return uploadHelper(file, \"profile-pic\");\n}\n\n/**\n * @returns the URL of the file (in a Promise)\n *\n * @param file The file we get from upload component is an array even for single uploads, but this function\n * will take *either* that array *or* the single file. Since the back end only handles 1 file at a time, it will use the\n * first file in the array, if it's an array\n */\nexport function uploadUserBannerPic(file: File | File[]): Promise<string> {\n    return uploadHelper(file, \"profile-banner-pic\");\n}\n\n/**\n * The same as uploadPublicAsset.\n *\n * @returns the URL of the file (in a Promise)\n *\n * @param file The file we get from upload component is an array even for single uploads, but this function\n * will take *either* that array *or* the single file. Since the back end only handles 1 file at a time, it will use the\n * first file in the array, if it's an array\n */\nexport function uploadPublicVideo(file: File | File[]): Promise<string> {\n    return uploadPublicAsset(file);\n}\n\n/**\n * For uploading anything non-private and not user profile picture or user profile banner.\n *\n * @returns the URL of the file (in a Promise)\n *\n * @param file The file we get from upload component is an array even for single uploads, but this function\n * will take *either* that array *or* the single file. Since the back end only handles 1 file at a time, it will use the\n * first file in the array, if it's an array\n */\nexport function uploadPublicAsset(file: File | File[]): Promise<string> {\n    return uploadHelper(file, \"public/asset\");\n}\n\n\nasync function uploadHelper(file: File | File[], endpoint: string): Promise<string> {\n    if (Array.isArray(file)) {\n        file = file[0];\n    }\n    const data = new FormData();\n    data.append('file', file);\n    const result: UploadSuccess = await fetch(`http://localhost:3001/api/upload/${endpoint}`, {\n        headers: {\n            'Authorization': 'Bearer ' + localStorage.getItem(JwtLocalStorageKey),\n        },\n        method: 'POST',\n        body: data\n    }).then(res => res.json());\n    return result.url;\n}","import React, {useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {User} from \"../../store/types\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport {submitPost, updatePost} from \"../../reducers/postsCreationSlice\";\nimport {AppDispatch} from \"../../store\";\nimport {unwrapResult} from \"@reduxjs/toolkit\";\nimport {useHistory} from \"react-router-dom\";\nimport PurpleButton from \"../common/PurpleButton\";\nimport {uploadPublicAsset} from \"../../api-upload\";\n\nconst useStyles = makeStyles({\n    operation: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        flex: 0,\n        marginTop: \"20px\",\n    }\n});\n\nconst onCancel = (params, dispatch) => {\n    const newPost = {\n        title: params.title,\n        content: params.content,\n        tags: params.tags,\n        featuredImg: params.img,\n    }\n    console.log(\"SUBMIT\" + newPost);\n}\n\n\nexport default function Submit(params) {\n    const classes = useStyles();\n    const dispatch = useDispatch<AppDispatch>();\n    const history = useHistory();\n    // const createdPost = useSelector<RootState, PostsCreation>(state => state.postsCreation);\n    const curUser = useSelector<RootState, User>(state => state.user);\n\n    const onSubmit = async (params, author, dispatch, history) => {\n        // console.log(newPost);\n        let featuredImg: string;\n        if (params.img) {\n            featuredImg = await uploadPublicAsset(params.img);\n        }\n\n        const newPost = {\n            title: params.title,\n            content: params.content,\n            tags: params.tags,\n            featuredImg,\n            author: author,\n        }\n        // Handle update differently\n        if (params.isUpdate) {\n            dispatch(updatePost({update: newPost, slug: params.isUpdate})).then(unwrapResult).then(\n                dto => {\n                    history.push(`/post/${dto.slug}`)\n                }\n            );\n        } else {\n            // Create new post\n            dispatch(submitPost(newPost)).then(unwrapResult).then(\n                dto => {\n                    console.log(\"CREATEPOST::SUBMIT\");\n                    console.log(dto);\n                    history.push(`/post/${dto.slug}`)\n                }\n            );\n        }\n    }\n    // console.log(\"CREATEPOST::SUBMIT\");\n    // console.log(params.tags);\n    return (\n        <div className={classes.operation}>\n            <div onClick={(event) => {\n                onCancel(params, dispatch);\n            }}>\n                <PurpleButton content=\"Cancel\"/>\n            </div>\n            <div style={{width: \"15px\"}}></div>\n            <div onClick={(event) => {\n                onSubmit(params, curUser, dispatch, history);\n            }}>\n                <PurpleButton content=\"Submit\"/>\n            </div>\n        </div>\n    );\n}\n\n","import React, {useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport ImgP from \"./ImgPanel\";\nimport TextP from \"./TextPanel\";\nimport TagP from \"./TagPanel\";\nimport Submit from \"./Submit\";\nimport AddMultiple from \"../group/AddMuliple\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport {Dictionary} from \"@reduxjs/toolkit\";\nimport {Tag} from \"../../store/types\";\nimport {useSelector} from \"react-redux\";\nimport styled from '@emotion/styled';\n\nconst useStyles = makeStyles({\n    createPost: {\n        paddingTop: \"7vh\",\n        paddingBottom: \"7vh\",\n        // paddingTop: \"3em\",\n        display: \"flex\",\n        flex: 1,\n        flexDirection: \"column\",\n        height: \"110vh\",\n        alignItems: \"center\",\n        // overflowY: \"scroll\",\n    }\n});\n\nexport const TagsContainer = styled.div`\n  background-color: white;\n  width: 49em;\n  height: 20vh;\n  display: flex;\n  box-shadow: 3px 3px #F2F2F2;\n  border-radius: 5px;\n  padding-left: 2em;\n  padding-top: 1em;\n`;\nexport default function CreatePost() {\n    const classes = useStyles();\n    const [title, setTitle] = useState('');\n    const [content, setContent] = useState('');\n    const [postTags, setPostTags] = useState([]);\n    const [featuredImg, setImg] = useState('');\n    const allTags = useSelector<RootState, Dictionary<Tag>>(state => state.tags.entities);\n    const allTagsArr = Object.values(allTags);\n    // console.log(\"CREATEPOST::INDEX\");\n    // console.log(allTags);\n    // console.log(allTagsArr);\n    // console.log(postTags);\n\n    return (\n        <div className={classes.createPost}>\n            <ImgP setImg={setImg}/>\n            <TextP setTitle={setTitle} setContent={setContent}/>\n            <TagP setPostTags={setPostTags} allTagsArr={allTagsArr}/>\n            <Submit title={title} content={content} tags={postTags} img={featuredImg}/>\n        </div>\n    );\n}\n","// tslint:disable\n/**\n * Coder Community\n * The Coder Community API description\n *\n * OpenAPI spec version: 0.0.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface ConfigurationParameters {\n    apiKey?: string | ((name: string) => string);\n    username?: string;\n    password?: string;\n    accessToken?: string | ((name: string, scopes?: string[]) => string);\n    basePath?: string;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | ((name: string) => string);\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | ((name: string, scopes?: string[]) => string);\n    /**\n     * override base path\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n    }\n}\n","import {createEntityAdapter, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport { Comment } from \"../store/types\";\nimport {CreateCommentServerToClientDto} from \"../ws-dto/comments/dto/createComment.ws.dto\";\nimport {GetCommentsServerToClientDto} from \"../ws-dto/comments/dto/getCommentsByPostID.ws.dto\";\n\nconst commentsAdapter = createEntityAdapter<Comment>({\n  selectId: item => item._id\n});\n\nexport const commentsSlice = createSlice({\n  name: \"comments\",\n  initialState: commentsAdapter.getInitialState<{isLoading: boolean}>({\n    isLoading: false,\n  }),//also has ids[] and entities{}\n  reducers: {\n    getCommentsByPostIDSuccess: (state, action: PayloadAction<GetCommentsServerToClientDto>) => {\n      commentsAdapter.upsertMany(state, action.payload.comments);\n    },\n    createCommentPending: (state) => {state.isLoading = true},\n    createCommentSuccess: (state, action: PayloadAction<CreateCommentServerToClientDto>) => {\n      state.isLoading = false;\n      commentsAdapter.addOne(state, action.payload.comment);\n      // if comment is a reply to the comment, then update the parent comment\n      const parentComment = action.payload.comment.parentComment;\n      if (parentComment) {\n        state.entities[parentComment].replies.push(action.payload.comment._id);\n      }\n    }\n  },\n  extraReducers: {}\n})\n\nexport default commentsSlice.reducer;\nexport const {createCommentPending, createCommentSuccess, getCommentsByPostIDSuccess} = commentsSlice.actions;","import {createAsyncThunk, createEntityAdapter, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {\n  GetInitialDataDto,\n  GetInitialDataLoggedInDto,\n  GetPostDetailsSuccessDto,\n  GetPostsByTagDto,\n  PostsApi,\n  TrendingApi,\n  UpdatePostBodyDto,\n  UpdatePostSuccessDto\n} from \"../api\";\nimport {RootState} from \"./rootReducer\";\nimport {Post, User} from \"../store/types\";\nimport {createCommentSuccess, getCommentsByPostIDSuccess} from \"./commentsSlice\";\nimport {GetCommentsServerToClientDto} from \"../ws-dto/comments/dto/getCommentsByPostID.ws.dto\";\nimport {CreateCommentServerToClientDto} from \"../ws-dto/comments/dto/createComment.ws.dto\";\nimport {submitPost, updatePost} from \"./postsCreationSlice\";\nimport {PostIDPayload} from \"./userSlice\";\n\n;\n\nconst postsAdapter = createEntityAdapter<Post>({\n  selectId: item => item._id\n});\n\n//https://redux-toolkit.js.org/api/createAsyncThunk\nexport const fetchTrendingPosts = createAsyncThunk(\n  'fetchTrendingPosts',\n  async ({fetchCount}: { fetchCount: number }, {getState, rejectWithValue}) => {\n    const api = new TrendingApi();\n    let initialData: GetInitialDataLoggedInDto | GetInitialDataDto;\n    const isLoggedIn = (getState() as RootState).isLoggedIn;\n    console.log(\"fetchTrendingPosts... isLoggedIn:\", isLoggedIn);\n    try {\n      if (isLoggedIn) {\n        initialData = await api.trendingControllerGetTrendingLoggedIn(fetchCount);\n      } else {\n        initialData = await api.trendingControllerGetTrending(fetchCount);\n      }\n    } catch (err) {\n      console.log(\"Got err from fetchTrendingPosts api call\", err);\n      return rejectWithValue(null);\n    }\n\n    return initialData; //{users[], posts[], tags[]}\n  }\n);\n\n// The backend endpoint can also take optional parameters for excluded post IDs and startIdx\nexport const fetchPostsByTag = createAsyncThunk(\n  'fetchPostsByTag',\n  async ({tagID, startIdx}: { tagID: string, startIdx: number }, {rejectWithValue}) => {\n    let payload: GetPostsByTagDto;\n    try {\n      payload = await new PostsApi().tagsControllerGetPostsByTag(tagID, undefined, startIdx);\n    } catch (err) {\n      return rejectWithValue(tagID);\n    }\n\n    return payload;\n  }\n)\n\nexport const fetchPostBySlug = createAsyncThunk(\n  'fetchPostBySlug',\n  ({slug, getAuthor}: { slug: string, getAuthor: boolean }) => new PostsApi().postsControllerGetPostBySlug(slug, getAuthor)\n)\n\nexport const fetchPostByID = createAsyncThunk(\n  'fetchPostByID',\n  ({id, getAuthor}: { id: string, getAuthor: boolean }) => new PostsApi().postsControllerGetPostByID(id, getAuthor)\n)\n\n//https://redux-toolkit.js.org/api/createSlice\nexport const postsSlice = createSlice({\n  name: \"posts\",\n  initialState: postsAdapter.getInitialState<{\n    trendingPosts: string[],\n    trendingPostsSet: Record<string, boolean>,\n    slugToID: Record<string, string>,\n    trendingPostFetchCount: number,\n    fetchedComments: Record<string, boolean>,\n    hasMorePosts: boolean\n  }>({ //extends EntityState\n    trendingPosts: [],\n    trendingPostsSet: {},\n    slugToID: {},\n    trendingPostFetchCount: 0,\n    fetchedComments: {},\n    hasMorePosts: true,//only for trending posts (of all tags)\n  }),//also has ids[] and entities{}\n  reducers: {},\n  extraReducers: {\n    [fetchTrendingPosts.pending.type]: (state, action: PayloadAction<GetInitialDataDto | GetInitialDataLoggedInDto>) => {\n      state.trendingPostFetchCount++;\n    },\n    [fetchTrendingPosts.fulfilled.type]: (state, action: PayloadAction<GetInitialDataDto | GetInitialDataLoggedInDto>) => {\n      action.payload.posts.forEach(post => {\n        state.slugToID[post.slug] = post._id;\n        if (!state.trendingPostsSet[post._id]) {\n          state.trendingPostsSet[post._id] = true;\n          state.trendingPosts.push(post._id);\n        }\n      })\n      postsAdapter.upsertMany(state, action.payload.posts) //add posts to ids and entities\n    },\n    [fetchTrendingPosts.rejected.type]: (state, action) => {\n      state.hasMorePosts = false;\n    },\n    [fetchPostBySlug.fulfilled.type]: (state, action: PayloadAction<GetPostDetailsSuccessDto>) => {\n      const post = action.payload.post;\n      const _id = post._id;\n      state.slugToID[post.slug] = _id;\n      postsAdapter.upsertOne(state, post);\n    },\n    [fetchPostByID.fulfilled.type]: (state, action: PayloadAction<GetPostDetailsSuccessDto>) => {\n      const post = action.payload.post;\n      const _id = post._id;\n      state.slugToID[post.slug] = _id;\n      postsAdapter.upsertOne(state, post);\n    },\n    [fetchPostsByTag.fulfilled.type]: (state, action: PayloadAction<GetPostsByTagDto>) => {\n      postsAdapter.upsertMany(state, action.payload.posts);\n    },\n    'user/toggleLikePost': (state, action: PayloadAction<PostIDPayload & { increment: boolean }>) => {\n      if (action.payload.increment) {\n        state.entities[action.payload.postID].likes++;\n      } else {\n        state.entities[action.payload.postID].likes--;\n      }\n    },\n\n    // Create and update post:\n    [submitPost.fulfilled.type]: (state, action: PayloadAction<Post>) => {\n      const newPost = action.payload;\n      postsAdapter.addOne(state, newPost);\n    },\n    [updatePost.fulfilled.type]: (state, action: PayloadAction<UpdatePostSuccessDto & UpdatePostBodyDto>) => {\n      state.slugToID[action.payload.slug] = state.slugToID[action.payload.oldSlug];\n      console.log(\"POSTSLICE::UPDATEPOST\");\n      console.log(action.payload);\n      // state.slugToID.delete(action.payload.slug);\n      postsAdapter.updateOne(state, {\n            id: action.payload._id,\n            changes: action.payload\n      });\n      console.log(\"** UPDATE DONE **\");\n    },\n    [getCommentsByPostIDSuccess.type]: (state, action: PayloadAction<GetCommentsServerToClientDto>) => {\n      state.fetchedComments[action.payload.postID] = true;\n    },\n    [createCommentSuccess.type]: (state, action: PayloadAction<CreateCommentServerToClientDto>) => {\n      if (action.payload.comment.commentRoot === 'post') {\n        state.entities[action.payload.comment.parentPost].comments.push(action.payload.comment._id);\n      }\n    }\n  }\n})\n\nexport default postsSlice.reducer;","import React from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nexport function Loading() {\n  return <CircularProgress />;\n}\n","import React from 'react';\nimport NotFoundSvg from \"../../assets/404.svg\";\n\nexport function NotFoundError() {\n\n  return <div style={{display: \"flex\", width: \"100vw\", height: \"100vh\", position: \"absolute\", justifyContent: \"center\"}}>\n    <img src={NotFoundSvg} alt=\"Not Found!\"/>\n  </div>;\n}\n","import React from 'react';\nimport NotFoundSvg from \"../../assets/404.svg\";\n\nexport function NoAccessibilityError() {\n    return <div style={{display: \"flex\", width: \"100vw\", height: \"100vh\", position: \"absolute\", justifyContent: \"center\"}}>\n        <img src={NotFoundSvg} alt=\"No Accessibility!\"/>\n    </div>;\n}\n","import React from \"react\";\nimport NotFoundSvg from \"../../assets/404.svg\";\n\nexport function NotLoggedInError() {\n    return <div style={{display: \"flex\", width: \"100vw\", height: \"100vh\", position: \"absolute\", justifyContent: \"center\"}}>\n        <img src={NotFoundSvg} alt=\"Please log in first to see this page!\"/>\n    </div>\n}","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AddMultiple from \"../group/AddMuliple\";\n\nconst useStyles = makeStyles({\n  cptag: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"50vh\",\n    width: \"40vw\",\n    backgroundColor: \"white\",\n    boxShadow: \"3px 3px #F2F2F2\",\n    marginBottom: \"1em\",\n    borderRadius: \"5px\",\n    paddingLeft: \"1.5em\",\n    paddingRight: \"1.5em\",\n  },\n  h4: {\n    marginBottom: \"0.5em\",\n  },\n  display: {\n    fontWeight: \"bold\",\n    marginBottom: \"1em\",\n  },\n  input: {\n    width: \"100%\",\n    height: \"2em\",\n    border: \"none\",\n    outline: \"none\",\n    background: \"white\",\n    \"&:hover\": {\n      backgroundColor: \"#F2F2F2\",\n    },\n  },\n  tags: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    margin: \"0 0\",\n    padding: \"0 0\",\n  },\n});\n\nexport default function TagPanel(params) {\n  const classes = useStyles();\n  const alltags = []; // useState<RootState, >()\n  // console.log(\"UPDATEPOST::TAGPANEL\");\n  // console.log(params.allTagsArr);\n  // console.log(params.oldTagsID);\n  return (\n      <div className={classes.cptag}>\n        <form id=\"tagform\">\n          <AddMultiple label=\"Add Tags\" options={params.allTagsArr} defaultValID={params.oldTagsID} setItems={params.setPostTags} panelWidth={\"40vw\"} />\n        </form>\n      </div>\n  );\n}\n","import React, {useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {User} from \"../../store/types\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport {submitPost, updatePost} from \"../../reducers/postsCreationSlice\";\nimport {AppDispatch} from \"../../store\";\nimport {unwrapResult} from \"@reduxjs/toolkit\";\nimport {useHistory} from \"react-router-dom\";\nimport PurpleButton from \"../common/PurpleButton\";\nimport {uploadPublicAsset} from \"../../api-upload\";\n\nconst useStyles = makeStyles({\n  operation: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flex: 0,\n    marginTop: \"20px\",\n  }\n});\n\nconst onCancel = (params, dispatch) => {\n  const newPost = {\n    title: params.title,\n    content: params.content,\n    tags: params.tags,\n    featuredImg: params.img,\n  }\n  // console.log(\"SUBMIT\" + newPost);\n}\n\n\nexport default function Submit(params) {\n  // console.log(\"UPDATEPOST::SUBMIT\");\n  const classes = useStyles();\n  const dispatch = useDispatch<AppDispatch>();\n  const history = useHistory();\n  // const createdPost = useSelector<RootState, PostsCreation>(state => state.postsCreation);\n  const curUser = useSelector<RootState, User>(state => state.user);\n\n  // const onSubmit = async (params, author, dispatch, history) => {\n  const onSubmit = async () => {\n    console.log(\"UPDATEPOST::INDEX::ONSUBMIT\");\n    let featuredImg: string;\n    if (params.img) {\n      featuredImg = await uploadPublicAsset(params.img);\n    }\n\n    console.log(params.tags);\n    const newPost = {\n      title: params.title,\n      content: params.content,\n      tags: params.tags,\n      featuredImg,\n      author: curUser._id,\n    }\n    // Handle update differently\n    if (params.isUpdate) {\n      dispatch(updatePost({update: newPost, slug: params.isUpdate})).then(unwrapResult).then(\n        dto => {\n          // console.log(\"UPDATEPOST::SUBMIT::onsubmit\");\n          // console.log(dto.slug);\n          // console.log(dto);\n          // console.log(params.tags);\n          history.push(`/post/${dto.slug}`)\n        }\n      );\n    } else {\n      // Create new post\n      dispatch(submitPost(newPost))\n        .then(unwrapResult)\n        .then(dto => {\n          // console.log(\"UPDATEPOST::SUBMIT::onSubmit\");\n          // console.log(dto.slug);\n          history.push(`/post/${dto.slug}`)\n        });\n    }\n\n  }\n\n  return (\n    <div className={classes.operation}>\n      <div onClick={(event) => {\n        onCancel(params, dispatch);\n      }}>\n        <PurpleButton content=\"Cancel\"/>\n      </div>\n      <div style={{width: \"15px\"}}></div>\n      {/*<button onClick={(event) => {\n        onSubmit(params, curUser, dispatch, history);\n      }}>*/}\n      <PurpleButton content=\"Submit\" handleClick={onSubmit} />\n    </div>\n  );\n}\n","import React, {useEffect, useState} from \"react\";\nimport {Redirect, useParams} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppDispatch} from \"../../store\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport {Post, Tag, User} from \"../../store/types\";\nimport defaultPostFeaturedImage from \"../../assets/defaultPostFeaturedImage.jpg\";\nimport {fetchPostBySlug} from \"../../reducers/postsSlice\";\nimport {Loading} from \"../common/Loading\";\nimport {NotFoundError} from \"../common/NotFoundError\";\nimport {NoAccessibilityError} from \"../common/NoAccessibilityError\";\nimport {NotLoggedInError} from \"../common/NotLoggedInError\";\nimport ImgP from \"../create_post/ImgPanel\";\nimport TextP from \"../create_post/TextPanel\";\nimport TagP from \"./TagPanel\";\nimport Submit from \"./Submit\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Dictionary, unwrapResult} from \"@reduxjs/toolkit\";\n\nconst useStyles = makeStyles({\n  createPost: {\n    paddingTop: \"7vh\",\n    paddingBottom: \"7vh\",\n    // paddingTop: \"3em\",\n    display: \"flex\",\n    flex: 1,\n    flexDirection: \"column\",\n    height: \"110vh\",\n    alignItems: \"center\",\n    // overflowY: \"scroll\",\n  }\n});\n\nexport default function UpdatePost() {\n  console.log(\"UPDATEPOST::INDEX\");\n  const {slug} = useParams<{ slug: string }>();\n  const classes = useStyles();\n  const dispatch = useDispatch<AppDispatch>();\n\n  const allTags = useSelector<RootState, Dictionary<Tag>>(state => state.tags.entities);\n  const allTagsArr = Object.values(allTags);\n\n  const {post} = useSelector<RootState, { post: Post }>(state => {\n    const postID = state.posts.slugToID[slug];\n    if (!postID) {\n      return {post: null};\n    }\n    const post = state.posts.entities[postID];\n    return {post};\n  })\n  console.log(post);\n\n  // fetch tags\n  const tags = useSelector<RootState, Dictionary<Tag>>(state => state.tags.entities);\n  const tagsArray = Object.values(tags);\n  let oldTagsIDArr = []\n  const oldTagsSet = new Set(post.tags);\n  for (let i = 0; i < tagsArray.length; i++) {\n    if (oldTagsSet.has(tagsArray[i]._id))\n      oldTagsIDArr.push(i);\n  }\n\n  const user = useSelector<RootState, User>(state => state.user);\n  const [title, setTitle] = useState(post?.title);\n  const [content, setContent] = useState(post?.content);\n  const [postTags, setPostTags] = useState(post?.tags);\n  const [featuredImg, setImg] = useState(post?.featuredImg);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (slug == null || slug === \"\") {\n      return;\n    }\n    if (!post?.content) {\n      dispatch(fetchPostBySlug({slug, getAuthor: false}))\n        .then(unwrapResult)\n        .then(dto => {\n          setTitle(dto.post.title);\n          setContent(dto.post.content);\n          setPostTags(dto.post.tags);\n        })\n        .catch(setError);\n    }\n  }, []);\n\n  if (slug == null || slug === \"\") {\n    return <Redirect to=\"/\"/>\n  }\n\n  if (!post?.content) {\n    return <Loading/>\n  }\n\n  if (error) {\n    return <NotFoundError/>\n  }\n\n  // console.log(\"UPDATEPOST::INDEX\");\n  if (!user) {\n    return <NotLoggedInError/>\n  }\n  if (user._id !== post.author) {\n    return <NoAccessibilityError/>\n  }\n\n  return (\n    <div className={classes.createPost}>\n      <ImgP setImg={setImg}/>\n      <TextP setTitle={setTitle} setContent={setContent} title={post?.title} content={post?.content}/>\n      <TagP setPostTags={setPostTags} allTagsArr={allTagsArr} oldTagsID={oldTagsIDArr}/>\n      <Submit title={title} content={content} tags={postTags} img={featuredImg} isUpdate={post?.slug}/>\n    </div>\n  );\n}","import { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link, useHistory } from 'react-router-dom';\nimport { RootState } from '../../reducers/rootReducer';\nimport { CurrentLoggedInUser, User } from '../../store/types';\nimport { Loading } from '../common/Loading';\nimport \"../../App.css\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"14vw\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"93vh\",\n    cursor: \"pointer\",\n    paddingLeft: \"7em\",\n    position: \"fixed\",\n    marginLeft: \"8vw\",\n    marginTop: \"4vh\",\n  },\n  diplayAccount: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  displayImg: {\n    width: \"5em\",\n    height: \"5em\",\n    borderRadius: \"50%\",\n    marginTop: \"2em\",\n    marginRight: \"1em\",\n  },\n  displayName: {\n    marginTop: \"4em\",\n    color: \"#5DCBAF\",\n  },\n  groupLinks: {\n    marginTop: \"2em\",\n  },\n  showPostsText: {\n    marginTop: \"1em\",\n    borderBottom: \"solid 1px lightgray\",\n    fontSize: \"large\",\n    fontFamily: \"Passion One, cursive\",\n    color: \"#707070\",\n  },\n  link: {\n    textDecoration: \"none\",\n  },\n});\n\nconst LeftSideBar = () => {\n  const classes = useStyles();\n  const user = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\n  const isLoggedIn = useSelector<RootState, boolean>(state => state.isLoggedIn);\n\n  const history = useHistory(); //to redirect to different route (from current route)\n\n  if (!user) {\n    return <Loading />\n  }\n\n  return (\n      <div className={classes.root}>\n        {isLoggedIn &&\n        <div className={classes.diplayAccount}>\n          <img className={classes.displayImg} src={user.profilePic} alt=\"\" />\n          <Link to={`/user/${user.userID}`} className={classes.link}>\n            <h3 className={classes.displayName}>{user.name}</h3>\n          </Link>\n        </div>\n        }\n        <div className={classes.groupLinks}>\n          <h3>Daily Challenge</h3>\n          {isLoggedIn &&\n          <Link to={`/messages`} className={classes.link}>\n            <h3>Messages</h3>\n          </Link>\n          }\n          <h3>Hacker News</h3>\n          <h3>Posts</h3>\n          <h3>Videos</h3>\n\n          <h3 onClick={() => {\n            history.push(\"/home/groups\");\n          }}>Groups</h3>\n\n          {/* <FilterPost /> */}\n        </div>\n      </div>\n  );\n};\n\nexport default LeftSideBar;\n","import { Dictionary } from \"@reduxjs/toolkit\";\nimport { useSelector } from \"react-redux\";\nimport { GetInitialDataDto, GetInitialDataLoggedInDto } from \"../api\";\nimport { RootState } from \"../reducers/rootReducer\";\nimport { User } from \"../store/types\";\n\nexport const randomImage = () => {\n  // get a random number from 200-350\n  const randomNumber = Math.floor(Math.random() * 150 + 200);\n  return `https://picsum.photos/${randomNumber}`;\n};\n\nexport const randomBackgroundImage = () => {\n  // get a random number from 1000-1400\n  const randomNumber = Math.floor(Math.random() * 400 + 1000);\n  return `https://picsum.photos/${randomNumber}`;\n};\n\nexport const howLongAgo = (unixTime) => {\n  const diff = Date.now() - unixTime;\n  if (diff < 60 * 1000) {\n    return \"Just now\";\n  }\n\n  const minutes = Math.round(diff / 60000);\n\n  if (minutes === 1) {\n    return \"1 minute ago\";\n  }\n  if (minutes < 60) {\n    return `${minutes} minutes ago`;\n  }\n\n  const hours = Math.round(minutes / 60);\n  if (hours === 1) {\n    return \"1 hour ago\";\n  }\n  if (hours < 24) {\n    return `${hours} hours ago`;\n  }\n\n  const days = Math.round(hours / 24);\n  if (days === 1) {\n    return \"1 day ago\";\n  }\n  if (days < 7) {\n    return `${days} days ago`;\n  }\n\n  const weeks = Math.round(days / 7);\n  if (weeks === 1) {\n    return \"1 week ago\";\n  }\n  if (weeks < 4) {\n    return `${weeks} weeks ago`;\n  }\n\n  const months = Math.round(weeks / 4);\n  if (months === 1) {\n    return \"1 month ago\";\n  }\n  if (months < 12) {\n    return `${months} months ago`;\n  }\n\n  const years = Math.round(months / 12);\n  if (years === 1) {\n    return \"1 year ago\";\n  }\n  return `${years} years ago`;\n};\n\n/**\n *\n * @param arr backend response eg: posts[], users[]\n * convert to maps from _id to Post, User etc.\n */\nexport const convertArrToMap = (arr): Record<string, any> => {\n  return arr.reduce((map, obj) => {\n    map[obj._id] = obj;\n    return map;\n  }, {});\n}\n\n// Type check\nexport const isGetInitialDataLoggedInDto\n  = (dto: GetInitialDataDto | GetInitialDataLoggedInDto): dto is GetInitialDataLoggedInDto => !!(dto as any).user\n\n\nexport const getFollowingFollowersOfUser = (users: Dictionary<User>, user: User): User[] => {\n  let followingFollowers: User[] = [];\n  user.followers.concat(user.following).forEach((_id) => {\n    if (users[_id]) {\n      followingFollowers.push(users[_id])\n    }\n  });\n  return Object.values(convertArrToMap(followingFollowers));\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { JwtLocalStorageKey } from \"../constants\";\n\n//https://redux-toolkit.js.org/api/createSlice\nexport const isLoggedInSlice = createSlice({\n  name: \"isLoggedIn\",\n  initialState: !!localStorage.getItem(JwtLocalStorageKey),//also has ids[] and entities{}\n  reducers: {\n    loginSuccess: {\n      reducer: (user, action: PayloadAction<null>) => {\n        return true;\n      },\n      prepare: ({jwt}: {jwt: string}) => {\n        localStorage.setItem(JwtLocalStorageKey, jwt);\n        return {payload: null};\n      },\n    },\n    logOut: {\n      reducer: (user, action: PayloadAction<null>) => {\n        return false;\n      },\n      prepare: () => {\n        localStorage.removeItem(JwtLocalStorageKey);\n        return { payload: null };\n      }\n    },\n  }\n})\n\nexport default isLoggedInSlice.reducer;\n\nexport const {\n  loginSuccess, logOut\n} = isLoggedInSlice.actions;","import { createEntityAdapter, createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Group, CurrentLoggedInUser } from \"../store/types\";\nimport { GroupsApi, GetGroupsSuccessDto, CreateGroupDto, CreateGroupSuccessDto, GroupDto } from \"../api\";\nimport { RootState } from \"./rootReducer\";\nimport _ from \"lodash\";\nimport { async } from \"rxjs/internal/scheduler/async\";\n\nconst groupsAdapter = createEntityAdapter<Group>({\n  selectId: item => item._id\n})\n\nconst api = new GroupsApi();\n//https://redux-toolkit.js.org/api/createAsyncThunk\nexport const fetchGroups = createAsyncThunk(\n  'fetchGroups',\n  async (_, { getState }) => {\n    const groups: GetGroupsSuccessDto = await api.groupsControllerGetGroups();\n    // console.log(groups);\n    return groups;\n  }\n)\n\nexport const fetchGroupById = createAsyncThunk(\n  'fetchGroupById',\n  async (groupID: string) => {\n    const foundGroup: GroupDto = await api.groupsControllerGetPrivateGroup(groupID);\n    return foundGroup;\n  }\n)\nexport const createGroup = createAsyncThunk(\n  'createGroup',\n  async (newGroup: CreateGroupDto, { getState }) => {\n    const user = (getState() as RootState).user as CurrentLoggedInUser;\n    const successDto = await api.groupsControllerCreateGroup(newGroup);\n    return { ...newGroup, _id: successDto._id, admins: [user._id] };\n  }\n)\n\nexport const leaveGroup = createAsyncThunk(\n  'leaveGroup',\n  async (groupID: string, { getState }) => {\n    const user = (getState() as RootState).user as CurrentLoggedInUser;\n    await api.groupsControllerLeaveGroup(groupID, user._id);\n    return { groupID: groupID, userID: user._id }\n  }\n)\n\nexport const joinGroup = createAsyncThunk(\n  'joinGroup',\n  async (groupID: string, { getState }) => {\n    const user = (getState() as RootState).user as CurrentLoggedInUser;\n    await api.groupsControllerJoinGroup(groupID, user._id);\n    return { groupID: groupID, userID: user._id }\n  }\n)\n\n//https://redux-toolkit.js.org/api/createSlice\nexport const groupsSlice = createSlice({\n  name: \"groups\",\n  initialState: groupsAdapter.getInitialState<{ currentGroupID: string }>({\n    currentGroupID: '',\n  }),\n  reducers: {\n    selectGroup: (state, action: PayloadAction<{ groupID: string }>) => {\n      state.currentGroupID = action.payload.groupID;\n    },\n  },\n  extraReducers: {\n    [fetchGroups.fulfilled.type]: (state, action: PayloadAction<GetGroupsSuccessDto>) => {\n      groupsAdapter.addMany(state, action.payload.groups) //add posts to ids and entities\n    },\n    [fetchGroupById.fulfilled.type]: (state, action: PayloadAction<GetGroupsSuccessDto>) => {\n      // groupsAdapter.addMany(state, action.payload.groups) //add posts to ids and entities\n    },\n    [createGroup.fulfilled.type]: (state, action: PayloadAction<CreateGroupSuccessDto & CreateGroupDto & { admins: string[] }>) => {\n      const { _id, name, private: _private, description, profileBanner, profilePic, admins, users } = action.payload;\n      groupsAdapter.addOne(state, {\n        _id, name, private: _private, description, profileBanner, profilePic,\n        admins,\n        users: [admins[0], ...users],\n        createdAt: Date.now().toLocaleString(),\n        posts: [],\n        updatedAt: Date.now().toLocaleString(),\n        videos: []\n      });\n    },\n    [leaveGroup.fulfilled.type]: (state, action: PayloadAction<{ groupID: string, userID: string }>) => {\n      _.pull(state.entities[action.payload.groupID].users, action.payload.userID); //lodash mutates the state\n    },\n    [joinGroup.fulfilled.type]: (state, action: PayloadAction<{ groupID: string, userID: string }>) => {\n      state.entities[action.payload.groupID].users.push(action.payload.userID)\n    }\n  }\n})\n\nexport default groupsSlice.reducer;\nexport const { selectGroup } = groupsSlice.actions;","import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\nimport { UserApi, GetInitialDataDto, GetInitialDataLoggedInDto, PostsApi, AuthApi, UpdateProfileReqDto, CreateGroupSuccessDto } from \"../api\";\nimport { fetchTrendingPosts } from \"./postsSlice\";\nimport { CurrentLoggedInUser } from \"../store/types\";\nimport _ from \"lodash\";\nimport { isGetInitialDataLoggedInDto } from \"../util/helperFunctions\";\nimport { JwtLocalStorageKey } from \"../constants\";\nimport { isLoggedInSlice } from \"./isLoggedInSlice\";\nimport { createGroup, leaveGroup, joinGroup } from \"./groupsSlice\";\nimport {GetCommentsServerToClientDto} from \"../ws-dto/comments/dto/getCommentsByPostID.ws.dto\";\nimport { getCommentsByPostIDSuccess } from \"./commentsSlice\";\n\nconst api = new UserApi();\nexport const getLoggedInUser = createAsyncThunk(\n  'getLoggedInUser',\n  async () => {\n    return await api.userControllerGetUser();\n  }\n)\n\nexport const login = createAsyncThunk(\n  'loginStatus',\n  async ({ code, state }: { code: string, state: string }) => {\n    await new AuthApi().authControllerLoginGitHub({ code, state })\n  }\n);\n\nexport const updateProfile = createAsyncThunk(\n  'updateProfile',\n  async (update: UpdateProfileReqDto) => {\n    await api.userControllerEditProfile(update);\n    return { update };\n  }\n)\n\n/**\n * @deprecated\n * (Not implemented.) Use fetchUserByUsername from usersSlice instead.\n */\nexport const getUserForViewProfile = (userName) => createAsyncThunk(\n  'getUserForViewProfile',\n  async () => {\n    // Use fetchUserByUsername from usersSlice instead.\n  }\n)\n\nexport type PostIDPayload = { postID: string };\nexport type UserIDPayload = { userID: string };\nexport type LikePostPayload = { postID: string, increment: boolean };\n\n//https://redux-toolkit.js.org/api/createSlice\n// The state is just User, and initialized to null\nconst initialState: CurrentLoggedInUser = null;\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    loginSuccess: {\n      reducer: (user, action: PayloadAction<null>) => {\n        return null;\n      },\n      prepare: ({ jwt }: { jwt: string }) => {\n        localStorage.setItem(JwtLocalStorageKey, jwt);\n        return { payload: null };\n      },\n    },\n    logOut: {\n      reducer: (user, action: PayloadAction<null>) => {\n        return null;\n      },\n      prepare: () => {\n        localStorage.removeItem(JwtLocalStorageKey);\n        return { payload: null };\n      }\n    },\n    savePost: {\n      reducer: (user, action: PayloadAction<PostIDPayload>) => {\n        // optimistic update\n        if (user) {\n          user.savedPosts.push(action.payload.postID);\n          user.savedPostsSet[action.payload.postID] = true;\n        }\n\n        return user;\n      },\n      // to perform side effect. Does not affect payload\n      prepare: (payload: PostIDPayload) => {\n        // Send request to back end silently\n        new UserApi().userControllerSavePost(payload.postID)\n          .then(_ => console.log(\"Optimistic update (SAVE POST) finished in back end\"))\n          .catch(err => console.log(\"Optimistic update (SAVE POST) rejected! \", err));\n        return { payload };\n      },\n    },\n    toggleLikePost: {\n      reducer: (user, action: PayloadAction<PostIDPayload & { increment: boolean }>) => {\n        if (user) {\n          // optimistic update\n          const { postID } = action.payload;\n          // User didn't previously like the post\n          if (!user.likedPostsSet[postID]) {\n            user.likedPostsSet[postID] = true;\n            user.likedPosts.push(action.payload.postID);\n          } else {\n            // User previously liked the post, now un-likes it\n            user.likedPostsSet[postID] = false;\n            _.pull(user.likedPosts, action.payload.postID);\n          }\n        }\n        return user;\n      },\n      prepare: ({ postID, increment }: LikePostPayload) => {\n        // Send request to back end silently\n        if (increment) {\n          new PostsApi().postsControllerLikePost(postID)\n            .then(_ => console.log(\"Optimistic update (LIKE POST) finished in back end for Post ID\"))\n            .catch(err => console.log(\"Optimistic update (LIKE POST) rejected! \", err));\n        } else {\n          new PostsApi().postsControllerUnlikePost(postID)\n            .then(_ => console.log(\"Optimistic update (UNLIKE POST) finished in back end for Post ID\"))\n            .catch(err => console.log(\"Optimistic update (UNLIKE POST) rejected! \", err));\n        }\n        return { payload: { postID, increment } };\n      }\n    },\n    follow: {\n      reducer: (state, action: PayloadAction<UserIDPayload>) => {\n        // Optimistic update\n        const other = action.payload.userID;\n        if (!state.followingSet[other]) {\n          state.followingSet[other] = true;\n          state.following.push(other);\n        }\n      },\n      prepare: (payload: UserIDPayload ) => {\n        api.userControllerAddFollowing(payload.userID)\n            .then(_ => console.log(\"Optimistic update (FOLLOW) finished in back end\"))\n            .catch(err => console.log(\"Optimistic update (FOLLOW) rejected! \", err));\n        return { payload };\n      }\n    },\n    unfollow: {\n      reducer: (state, action: PayloadAction<UserIDPayload>) => {\n        // Optimistic update\n        const other = action.payload.userID;\n        if (state.followingSet[other]) {\n          state.followingSet[other] = false;\n          _.pull(state.following, other);\n        }\n      },\n      prepare: (payload: UserIDPayload ) => {\n        api.userControllerRemoveFollowing(payload.userID)\n            .then(_ => console.log(\"Optimistic update (UNFOLLOW) finished in back end\"))\n            .catch(err => console.log(\"Optimistic update (UNFOLLOW) rejected! \", err));\n        return { payload };\n      }\n    },\n\n\n  },\n  extraReducers: {\n    // fetchTrendingPosts will give the current logged in user as well\n    [fetchTrendingPosts.fulfilled.type]: (state, action: PayloadAction<GetInitialDataDto | GetInitialDataLoggedInDto>) => {\n      if (isGetInitialDataLoggedInDto(action.payload)) {\n        const userDto = action.payload.user;\n\n        // If the user already exists, merge the dto with the state (currentUser)\n        if (state) {\n          // Update likedPostsSet and savedPostsSet\n          userDto.likedPosts?.forEach(postID => state.likedPostsSet[postID] = true);\n          userDto.savedPosts?.forEach(postID => state.savedPostsSet[postID] = true);\n          userDto.followers?.forEach(userID => state.followersSet[userID] = true);\n          userDto.following?.forEach(userID => state.followingSet[userID] = true);\n          return { ...state, ...userDto };\n        }\n\n        if (userDto) {\n          const freshlyLoggedInUser = { ...userDto, likedPostsSet: {}, savedPostsSet: {}, followersSet: {}, followingSet: {} } as CurrentLoggedInUser;\n          userDto.likedPosts?.forEach(postID => freshlyLoggedInUser.likedPostsSet[postID] = true);\n          userDto.savedPosts?.forEach(postID => freshlyLoggedInUser.savedPostsSet[postID] = true);\n          userDto.followers?.forEach(userID => freshlyLoggedInUser.followersSet[userID] = true);\n          userDto.following?.forEach(userID => freshlyLoggedInUser.followingSet[userID] = true);\n          return freshlyLoggedInUser;\n        }\n      }\n\n      // state may be null, so must explicitly return it\n      return state;\n    },\n    //add group to user's list of groups\n    [createGroup.fulfilled.type]: (state, action: PayloadAction<CreateGroupSuccessDto>) => {\n      state.groups.push(action.payload._id);\n    },\n\n    [leaveGroup.fulfilled.type]: (state, action: PayloadAction<{ groupID: string, userID: string }>) => {\n      _.pull(state.groups, action.payload.groupID);\n    },\n    [joinGroup.fulfilled.type]: (state, action: PayloadAction<{ groupID: string, userID: string }>) => {\n      state.groups.push(action.payload.groupID);\n    },\n\n    // Logging out should clear the state\n    [isLoggedInSlice.actions.logOut.type]: () => {\n      return null;\n    },\n\n    [updateProfile.fulfilled.type]: (state, action: PayloadAction<UpdateProfileReqDto>) => {\n      if (!state) {\n        return null;\n      }\n      if (action.payload.name) {\n        state.name = action.payload.name;\n      }\n      if (action.payload.status) {\n        state.status = action.payload.status;\n      }\n      if (Array.isArray(action.payload.tags)) {\n        state.tags = action.payload.tags;\n      }\n    },\n\n\n  }\n})\n\nexport default userSlice.reducer;\n\nexport const { savePost, toggleLikePost, follow, unfollow, loginSuccess, logOut } = userSlice.actions;","import { initializeGitHubOAuth } from \"../pages/login/login\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../reducers/rootReducer\";\nimport { CurrentLoggedInUser } from \"../store/types\";\nimport { toggleLikePost } from \"../reducers/userSlice\";\n\ntype HandleToggleLike = () => void;\n\n/**\n * returns whether the user likes the post, and a callback function that sends anonymous user to login\n * \n * @param postID The ID of the post\n */\nexport function useLikePost(postID: string): { postIsLikedByUser: boolean, handleToggleLike: HandleToggleLike} {\n\n\n  const user = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\n  const dispatch = useDispatch();\n\n  if (!postID) {\n    return {\n      postIsLikedByUser: null,\n      handleToggleLike: () => {}\n    }\n  }\n\n  if (!user) {\n    return {\n      postIsLikedByUser: false,\n      handleToggleLike: initializeGitHubOAuth,\n    }\n  } else {\n    const postIsLikedByUser = !!user.likedPostsSet[postID];\n    return {\n      postIsLikedByUser,\n      handleToggleLike: () => dispatch(toggleLikePost({postID, increment: !postIsLikedByUser})),\n    }\n  }\n}","import { makeStyles } from \"@material-ui/core/styles\";\nimport React, {useEffect} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\n// import { likePost, savePost, viewPost } from '../../actions/home.ts';\nimport DefaultPic from \"../../assets/user.svg\";\nimport CommentIcon from \"../../icons/commentIcon.svg\";\nimport HeartIcon from \"../../icons/heartIcon.svg\";\nimport HeartIconRed from \"../../icons/heartIconRed.svg\";\nimport { RootState } from \"../../reducers/rootReducer\";\nimport { Post } from \"../../store/types\";\nimport { User } from \"../../store/types\";\nimport { Tag } from \"../../store/types\";\nimport { Dictionary } from \"@reduxjs/toolkit\";\nimport { savePost } from \"../../reducers/userSlice\";\nimport { useLikePost } from \"../../hooks/useLikePost\";\nimport { Loading } from \"../common/Loading\";\nimport {fetchPostByID} from \"../../reducers/postsSlice\";\n\nconst useStyles = makeStyles({\n  root: {\n    minHeight: \"fit-content\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"40vw\",\n    backgroundColor: \"white\",\n    boxShadow: \"3px 3px #F2F2F2\",\n    marginBottom: \"1em\",\n    borderRadius: \"5px\",\n    paddingLeft: \"1.5em\",\n    paddingRight: \"1.5em\",\n  },\n  account: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    paddingTop: \"1em\",\n  },\n  accountImg: {\n    width: \"3em\",\n    height: \"3em\",\n    borderRadius: \"50%\",\n    marginTop: \"0.5em\",\n  },\n  imgTitle: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  nameTime: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginLeft: \"0.5em\",\n  },\n  interactions: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  commentIcon: {\n    marginLeft: \"2em\",\n    width: \"2em\",\n    marginBottom: \"-1.5em\",\n  },\n  heartIcon: {\n    width: \"2em\",\n  },\n  interactionsIcons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    flexDirection: \"row\",\n  },\n  readSave: {\n    marginLeft: \"2em\",\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  link: {\n    textDecoration: \"none\",\n  },\n  tagText: {\n    fontFamily: \"Overpass Mono, monospace\",\n  },\n});\n\nexport const handleViewPost = (post, dispatch) => {\n  // use history.push instead -John\n  // dispatch(viewPost(post));\n};\n\ntype Props = {\n  postID: string;\n};\n\n//parent: Main\nconst Card = ({ postID }: Props) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const post = useSelector<RootState, Post>(\n    (state) => state.posts.entities[postID]\n  );\n\n  const { postIsLikedByUser, handleToggleLike } = useLikePost(post?._id);\n\n  const authorID = post?.author;\n  const author = useSelector<RootState, User>(\n    (state) => state.users.entities[authorID]\n  );\n  const tags = useSelector<RootState, Dictionary<Tag>>(\n    (state) => state.tags.entities\n  );\n\n  useEffect(() => {\n    if (!post) {\n      dispatch(fetchPostByID({id: postID, getAuthor: !author}));\n    }\n  }, [])\n\n  if (!post) {\n    return <Loading />\n  }\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.account}>\n        <img\n          className={classes.accountImg}\n          src={author.profilePic || DefaultPic}\n          alt=\"\"\n        />\n        <div className={classes.nameTime}>\n          <p>\n            <Link to={`/user/${author.userID}`} className={classes.link}>\n              <span\n                style={{\n                  fontWeight: \"bold\",\n                  color: \"#5DCBAF\",\n                }}\n              >\n                {author.name}&nbsp;\n              </span>\n            </Link>\n            posted&nbsp;\n            <span style={{ fontWeight: \"bolder\" }}>\n              <Link\n                to={`/post/${post.slug}`}\n                className={classes.link}\n                onClick={() => {\n                  handleViewPost(post, dispatch);\n                }}\n              >\n                {post.title}\n              </Link>\n            </span>\n          </p>\n          <p style={{ marginTop: \"-0.8em\" }}>{post.createdAt}</p>\n        </div>\n      </div>\n\n      <div className={classes.imgTitle}>\n        <img\n          src={post.featuredImg}\n          style={{ marginTop: \"10px\", width: \"200px\", height: \"200px\", objectFit: \"cover\" }}\n          alt=\"\"\n        />\n        <div>\n          <p style={{ marginLeft: \"2em\" }}>{post.previewContent}</p>\n          <div className={classes.readSave}>\n            <Link\n              to={`/post/${post._id}`}\n              className={classes.link}\n              onClick={() => {\n                handleViewPost(post, dispatch);\n              }}\n            >\n              <h4\n                style={{\n                  marginRight: \"2em\",\n                  color: \"#5D67E9\",\n                  textDecoration: \"none\",\n                }}\n              >\n                Read more\n              </h4>\n            </Link>\n\n            <h4\n              style={{ color: \"#5D67E9\", cursor: \"pointer\" }}\n              onClick={() => {\n                dispatch(savePost({ postID: post._id }));\n              }}\n            >\n              Save for later\n            </h4>\n          </div>\n        </div>\n      </div>\n\n      <div className={classes.interactions}>\n        {post.tags.length > 0 && post.tags.map((_id) => (\n          <p key={_id} className={classes.tagText}>\n            {/*}#{tags[_id].name}&nbsp;*/}\n          </p>\n        ))}\n        <div style={{ display: \"flex\", flex: 1 }}></div>\n        <div className={classes.interactionsIcons}>\n          <img\n            className={classes.heartIcon}\n            src={postIsLikedByUser ? HeartIconRed : HeartIcon}\n            alt=\"\"\n            onClick={handleToggleLike}\n          />\n          <p>&nbsp;{post.likes}</p>\n          <Link to={`/post/${post.slug}`} className={classes.link}>\n            <img className={classes.commentIcon} src={CommentIcon} alt=\"\" />\n          </Link>\n          <p>&nbsp;{post.commentsCount}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport \"./TagsCarousel.css\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../reducers/rootReducer\";\nimport { Tag } from \"../../store/types\";\nimport { Dictionary } from \"@reduxjs/toolkit\";\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction a11yProps(index: any) {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    \"aria-controls\": `scrollable-auto-tabpanel-${index}`\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    width: \"50%\",\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport const TagsCarousel = ({ value, setValue }) => {\n  const classes = useStyles();\n  const tags = useSelector<RootState, Dictionary<Tag>>(state => state.tags.entities);\n  const tagsArr = [null].concat(Object.values(tags));\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"relative\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          aria-label=\"scrollable auto tabs example\"\n        >\n          {tagsArr.map((tag, idx) => {\n            if (idx === 0) {\n              return <Tab label=\"all\" {...a11yProps({ idx })} key={idx} />;\n            }\n            return <Tab label={tag.name} {...a11yProps({ idx })} key={idx} />;\n          })}\n        </Tabs>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Card from './Card';\nimport { RootState } from '../../reducers/rootReducer';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Loading } from '../common/Loading';\nimport { fetchPostsByTag, fetchTrendingPosts } from '../../reducers/postsSlice';\nimport { AppDispatch } from '../../store';\nimport { Dictionary, unwrapResult } from '@reduxjs/toolkit';\nimport { TagsCarousel } from './TagsCarousel';\nimport { Tag } from '../../store/types';\n\n//parent: Home\nconst Main = () => {\n  const trendingPosts = useSelector<RootState, string[]>(\n      (state) => state.posts.trendingPosts\n  );\n  const dispatch: AppDispatch = useDispatch();\n  const [items, setItems] = useState(trendingPosts);//has 5 things initially\n  const currFetchCount: number = useSelector<RootState, number>(state => state.posts.trendingPostFetchCount);\n  const hasMoreTrendingPosts: boolean = useSelector<RootState, boolean>(state => state.posts.hasMorePosts);\n\n  const [tabIndex, setTabIndex] = React.useState(0);\n  const tags = useSelector<RootState, Dictionary<Tag>>(state => state.tags.entities);\n  const hasMorePostsInTags = useSelector<RootState, Record<string, boolean>>(state => state.tags.hasMorePostsInTags);\n  const tagsArr = Object.values(tags);\n  const currentTag = tagsArr[tabIndex - 1];\n  const currentTagID = currentTag?._id;\n\n  let hasMore: boolean;\n  if (tabIndex === 0) {\n    hasMore = hasMoreTrendingPosts;\n  } else {\n    hasMore = hasMorePostsInTags[currentTagID];\n  }\n\n  const handleTabChange = (newIdx: number) => {\n    setTabIndex(newIdx);\n    // if new index is 0 (All - trending posts)\n    if (newIdx === 0) {\n      setItems(trendingPosts);\n      return;\n    }\n    const currentTag = tagsArr[newIdx - 1];\n    console.log(currentTag);\n    // switch to a tag\n    setItems(Object.keys(currentTag.postsSet));\n    const startIdx = items.length; // communicate to back end which ones to skip\n    const tagID = currentTagID;\n    dispatch(fetchPostsByTag({ tagID, startIdx })).then(unwrapResult).then(res => {\n      setItems(prev => prev.concat(res.posts.map(post => post._id)))\n    }).catch(err => console.log(err));\n  }\n\n  const fetchMoreData = () => {\n    if (tabIndex === 0) {\n      if (hasMoreTrendingPosts) {\n        dispatch(fetchTrendingPosts({ fetchCount: currFetchCount })).then(unwrapResult).then(res => {\n          setItems(prev => prev.concat(res.posts.map(post => post._id)))\n        }).catch(err => console.log(err));\n      } else {\n        return;\n      }\n    }\n\n    const startIdx = items.length; // communicate to back end which ones to skip\n    const tagID = currentTagID;\n    if (hasMorePostsInTags[tagID]) {\n      dispatch(fetchPostsByTag({ tagID, startIdx })).then(unwrapResult).then(res => {\n        setItems(prev => prev.concat(res.posts.map(post => post._id)))\n      }).catch(err => console.log(err));\n    }\n  }\n\n  return (\n      <>\n        <div style={{ display: \"flex\", position: \"fixed\", justifyContent: \"center\", width: \"50%\", zIndex: 10, marginTop: \"-40px\" }}>\n          <TagsCarousel value={tabIndex} setValue={handleTabChange} />\n        </div>\n        <div style={{ marginTop: \"50px\" }}>\n          <InfiniteScroll\n              dataLength={items.length} //This is important field to render the next data\n              next={fetchMoreData}\n              hasMore={hasMore}\n              key={tabIndex.toString()}\n              loader={<Loading />}\n              endMessage={\n                <p style={{ textAlign: 'center' }}>\n                  <b>You've seen it all!</b>\n                </p>\n              }>\n            {items.map((_id, idx) => (\n                <Card postID={_id} key={idx} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      </>\n  );\n};\nexport default Main;\n","import { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../reducers/rootReducer';\nimport { TinyButton as ScrollUpButton } from \"react-scroll-up-button\"; //https://www.npmjs.com/package/react-scroll-up-button\nimport \"./TagsCarousel.css\";\nimport { Dictionary } from '@reduxjs/toolkit';\nimport { Post, User } from '../../store/types';\nimport Avatar from '../common/Avatar';\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"20vw\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    cursor: \"pointer\",\n    paddingLeft: \"2em\",\n    paddingTop: \"10vh\",\n    marginRight: \"5vw\",\n    position: \"fixed\",\n    right: 0,\n\n  },\n  savePostSection: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"50vh\",\n    overflowY: \"scroll\",\n  },\n  savePostText: {\n    marginBottom: \"-1px\",\n    borderBottom: \"solid 1px lightgray\",\n    fontSize: \"large\",\n    fontFamily: \"Passion One, cursive\",\n    color: \"#707070\",\n  },\n  link: {\n    textDecoration: \"none\",\n  },\n});\n\n//parent:\nexport default function RightSideBar() {\n  const classes = useStyles();\n\n  /*\n  const currViewedPost = null;\n  const savedPosts = [\n    {\n      postID: \"5f00faca1a9b9b1781929025\", author: \"fred\", title: \"sad\", previewContent: \"It is sad\", content: \"It is so sad\", tags: [ \"cpp\", \"html\" ], featuredImg: \"\", likesCount: 100, comments: \"this is a comment\", commentsCount: 100, views: 10, createdAt: \"created here\", likedByUser: true, slug: \"slug\", group: \"group\"\n    }\n  ];\n  let isLoggedIn = useSelector<RootState, boolean>((state) => state.isLoggedIn);\n  console.log(isLoggedIn);\n  isLoggedIn = true;\n  */\n  const isLoggedIn = useSelector<RootState, boolean>((state) => state.isLoggedIn);\n  const trendingPosts = useSelector<RootState, string[]>(\n    (state) => state.posts.trendingPosts\n  );\n\n  const posts = useSelector<RootState, Dictionary<Post>>(\n    (state) => state.posts.entities\n  );\n  const users = useSelector<RootState, Dictionary<User>>(\n    (state) => state.users.entities\n  );\n  return (\n    <div className={classes.root}>\n      {isLoggedIn && <div>\n        <p className={classes.savePostText}># POPULAR</p>\n        <div className={classes.savePostSection}>\n          {trendingPosts.map((_id, idx) => (\n            <div key={idx}>\n              <Avatar pic={users[posts[_id].author].profilePic} title={posts[_id].title} subtitle={posts[_id].content.substr(0, 60).concat(\"...\")} isButton={false} isPost={true} extraText={posts[_id].createdAt}></Avatar>\n              {/* <Link\n                to={`/post/${post.postID}`}\n                className={classes.link}\n                onClick={() => {\n                  handleViewPost(currViewedPost, post);\n                }}\n              > */}\n              {/* <p style={{ marginTop: \"-0.5em\", fontWeight: \"bold\" }}>\n                {post.title}\n              </p> */}\n              {/* </Link> */}\n            </div>\n          ))}\n        </div>\n\n        <p className={classes.savePostText}># WHO TO FOLLOW</p>\n        <ScrollUpButton />\n      </div>}\n\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst ErrorPage = ({ error }) => {\n  return (<h3 style={{ position: \"absolute\", height: \"500px\", top: \"200px\" }}>Error: {JSON.stringify(error)}</h3>)\n}\n\nexport default ErrorPage;","import { createEntityAdapter, createSlice, PayloadAction, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { fetchTrendingPosts, fetchPostBySlug } from \"./postsSlice\";\nimport { User } from \"../store/types\";\nimport {\n  GetInitialDataDto,\n  GetInitialDataLoggedInDto,\n  GetPostDetailsSuccessDto,\n  UserApi,\n  GetUsersSuccessDto,\n  UserDto\n} from \"../api\";\nimport { leaveGroup, joinGroup } from \"./groupsSlice\";\nimport _ from \"lodash\";\nimport {getCommentsByPostIDSuccess} from \"./commentsSlice\";\nimport {GetCommentsServerToClientDto} from \"../ws-dto/comments/dto/getCommentsByPostID.ws.dto\";\n\nconst api = new UserApi();\n\nconst usersAdapter = createEntityAdapter<User>({\n  selectId: item => item._id,\n});\n\nexport const fetchUsersByIDs = createAsyncThunk('fetchUsersByIDs', async (IDs: string[]) => {\n  return await api.userControllerGetUsersByIDs(IDs.join());\n});\n\nexport const fetchUserByUsername = createAsyncThunk('fetchUserByUsername', async (username: string) => {\n  return await api.userControllerGetUserByUsername(username);\n})\n\n//https://redux-toolkit.js.org/api/createSlice\nexport const usersSlice = createSlice({\n  name: \"users\",\n  initialState: usersAdapter.getInitialState<{ usernameToID: Record<string, string> }>(\n    { usernameToID: {} }\n  ),\n  reducers: {\n\n  },\n  extraReducers: {\n    [fetchTrendingPosts.fulfilled.type]: (state, action: PayloadAction<GetInitialDataDto | GetInitialDataLoggedInDto>) => {\n      usersAdapter.addMany(state, action.payload.users) //add users (trending posts' authors) to ids and entities\n      // Update username to ObjectID map\n      action.payload.users.forEach(user => state.usernameToID[user.userID] = user._id);\n    },\n    [fetchPostBySlug.fulfilled.type]: (state, action: PayloadAction<GetPostDetailsSuccessDto>) => {\n      if (action.payload.author) {\n        usersAdapter.upsertOne(state, action.payload.author);\n\n        // Update username to ObjectID map\n        state.usernameToID[action.payload.author.userID] = action.payload.author._id;\n      }\n    },\n    [fetchUsersByIDs.fulfilled.type]: (state, action: PayloadAction<GetUsersSuccessDto>) => {\n      usersAdapter.upsertMany(state, action.payload.users);\n      // Update username to ObjectID map\n      action.payload.users.forEach(user => state.usernameToID[user.userID] = user._id);\n    },\n    [fetchUserByUsername.fulfilled.type]: (state, action: PayloadAction<UserDto>) => {\n      usersAdapter.upsertOne(state, action.payload);\n      // Update username to ObjectID map\n      state.usernameToID[action.payload.userID] = action.payload._id;\n    },\n    [leaveGroup.fulfilled.type]: (state, action: PayloadAction<{ groupID: string, userID: string }>) => {\n      if (state.entities[action.payload.userID]) {\n        _.pull(state.entities[action.payload.userID].groups, action.payload.groupID);\n      }\n    },\n    [joinGroup.fulfilled.type]: (state, action: PayloadAction<{ groupID: string, userID: string }>) => {\n      if (state.entities[action.payload.userID].groups) {\n        state.entities[action.payload.userID].groups.push(action.payload.groupID)\n      }\n    },\n    'getConversationsAndUsers': (state, action: PayloadAction<any>) => {\n      usersAdapter.upsertMany(state, action.payload.users);\n    },\n    [getCommentsByPostIDSuccess.type]: (state, action: PayloadAction<GetCommentsServerToClientDto>) => {\n      usersAdapter.upsertMany(state, action.payload.authors);\n    }\n  }\n})\n\nexport default usersSlice.reducer;","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Radio, { RadioProps } from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nconst useStyles = makeStyles({\n  root: {\n    '&:hover': {\n      backgroundColor: 'transparent',\n    },\n  },\n  icon: {\n    borderRadius: '50%',\n    width: 16,\n    height: 16,\n    boxShadow: 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\n    backgroundColor: '#f5f8fa',\n    backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\n    '$root.Mui-focusVisible &': {\n      outline: '2px auto rgba(19,124,189,.6)',\n      outlineOffset: 2,\n    },\n    'input:hover ~ &': {\n      backgroundColor: '#ebf1f5',\n    },\n    'input:disabled ~ &': {\n      boxShadow: 'none',\n      background: 'rgba(206,217,224,.5)',\n    },\n  },\n  checkedIcon: {\n    backgroundColor: '#137cbd',\n    backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))',\n    '&:before': {\n      display: 'block',\n      width: 16,\n      height: 16,\n      backgroundImage: 'radial-gradient(#fff,#fff 28%,transparent 32%)',\n      content: '\"\"',\n    },\n    'input:hover ~ &': {\n      backgroundColor: '#106ba3',\n    },\n  },\n});\n\n// Inspired by blueprintjs\nfunction StyledRadio(props: RadioProps) {\n  const classes = useStyles();\n  return (\n    <Radio\n      className={classes.root}\n      disableRipple\n      color=\"default\"\n      checkedIcon={<span className={clsx(classes.icon, classes.checkedIcon)} />}\n      icon={<span className={classes.icon} />}\n      {...props}\n    />\n  );\n}\n\nexport default function RadioButtons({ setItem }) {\n  const handleChange = (value) => { setItem(value) }\n  return (\n    <FormControl component=\"fieldset\" required={true}>\n      <FormLabel component=\"legend\" focused={false}>Privacy</FormLabel>\n\n      <RadioGroup row defaultValue=\"public\" name=\"customized-radios\" onChange={handleChange}>\n        <FormControlLabel value=\"public\" control={<StyledRadio />} label=\"Public\" />\n        <FormControlLabel value=\"private\" control={<StyledRadio />} label=\"Private\" />\n\n      </RadioGroup>\n    </FormControl>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport ImageUploader from \"react-images-upload\";\nimport AddMultiple from './AddMuliple';\nimport { RootState } from '../../reducers/rootReducer';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { User } from '../../store/types';\nimport { Dictionary, unwrapResult } from '@reduxjs/toolkit';\nimport { AppDispatch } from '../../store';\nimport { Loading } from '../common/Loading';\nimport ErrorPage from '../common/ErrorPage';\nimport { fetchUsersByIDs } from '../../reducers/usersSlice';\nimport { convertArrToMap, getFollowingFollowersOfUser } from '../../util/helperFunctions';\nimport { TextFields } from './TextFields';\nimport RadioButtons from './RadioButtons';\nimport styled from '@emotion/styled';\nimport { withStyles, Theme } from '@material-ui/core';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport PurpleButton from '../common/PurpleButton';\nimport { createGroup } from '../../reducers/groupsSlice';\nimport { UploadApi } from '../../api';\nimport { JwtLocalStorageKey } from '../../constants';\nimport { uploadPublicAsset } from \"../../api-upload\";\n\nconst TextWrapper = styled.div`\n  margin-left: 10px;\n  margin-right: 10px;\n`;\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nexport const CreateGroupForm = ({ handleClose }) => {\n  const [people, setPeople] = useState<string[]>([]);\n  const [profileBannerFile, setProfileBanner] = useState<File>(null);\n  const [profilePicFile, setProfilePic] = useState<File>(null);\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [_private, setPrivate] = useState(false);\n\n  const usersMap = useSelector<RootState, Dictionary<User>>(state => state.users.entities);\n  const user = useSelector<RootState, User>(state => state.user);\n  let followingFollowers: User[] = getFollowingFollowersOfUser(usersMap, user);\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [creatingGroupLoading, setCreatingGroupLoading] = useState(false);\n\n  const dispatch = useDispatch<AppDispatch>();\n  useEffect(() => {\n    if (user.followers.length > 0 || user.following.length > 0) {\n      setLoading(true);\n      dispatch(fetchUsersByIDs(user.following.concat(user.followers)))\n        .then(unwrapResult).then( //must set dispatch to any to use .then\n          () => {\n            setLoading(false)\n          }\n        ).catch(error => {\n          console.log(error);\n          setError(error);\n          setLoading(false);\n        });\n    }\n  }, []);\n\n  if (!followingFollowers || loading) {\n    return <Loading />\n  }\n\n  if (error) {\n    return <ErrorPage error={error} />\n  }\n\n  const handleBannerImageChange = picture => {\n    // picture is an array containing 1 file\n    setProfileBanner(picture[0]);\n  }\n    ;\n\n  const handleProfilePicChange = picture => {\n    // picture is an array containing 1 file\n    setProfilePic(picture[0])\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Upload images if they exist\n    let profilePic: string;\n    let profileBanner: string;\n    // upload profile pic\n    if (profilePicFile) {\n      // TODO: show loading while uploading\n      profilePic = await uploadPublicAsset(profilePicFile);\n    }\n\n    if (profileBannerFile) {\n      profileBanner = await uploadPublicAsset(profileBannerFile);\n    }\n\n    const group = {\n      name,\n      description,\n      private: _private,\n      users: people,\n      profilePic,\n      profileBanner,\n    };\n\n    dispatch(createGroup(group)).then(unwrapResult).then(() => {\n      setCreatingGroupLoading(true);\n    }).catch(err => {\n      setLoading(false);\n      setError(err);\n    })\n    handleClose();\n  }\n\n\n  return (\n    <>\n      {creatingGroupLoading ? <Loading /> :\n        <form onSubmit={handleSubmit}>\n          {/* https://github.com/jakehartnell/react-images-upload#readme */}\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n            <ImageUploader\n              // {...props}\n              buttonText='Upload cover photo'\n              withPreview={true}\n              withIcon={true}\n              onChange={handleBannerImageChange}\n              imgExtension={[\".jpg\", \".jpeg\", \".gif\", \".png\", \".gif\"]}\n              maxFileSize={5242880}\n              singleImage={true}\n              buttonStyles={{ backgroundColor: \"#6a6a6a\" }}\n            />\n            {/* <div style={{ width: \"20px\" }}></div> */}\n            <ImageUploader\n              // {...props}\n              buttonText='Upload profile pic'\n              withPreview={true}\n              withIcon={false}\n              onChange={handleProfilePicChange}\n              imgExtension={[\".jpg\", \".jpeg\", \".gif\", \".png\", \".gif\"]}\n              maxFileSize={5242880}\n              style={{ width: \"50%\" }}\n              singleImage={true}\n              buttonStyles={{ backgroundColor: \"#6a6a6a\" }}\n            />\n          </div>\n\n          <TextFields name=\"Add Group Name\" description=\"Add Group Description\" setName={setName} setDescription={setDescription} />\n\n          {/* https://material-ui.com/components/autocomplete/#Tags.tsx */}\n          <TextWrapper>\n            <AddMultiple label=\"Add People\" options={followingFollowers} imgKey=\"profilePic\" setItems={setPeople} panelWidth={500} />\n          </TextWrapper>\n\n          <div style={{ height: \"25px\" }}></div>\n\n          <TextWrapper>\n            <RadioButtons setItem={setPrivate} />\n          </TextWrapper>\n\n          <DialogActions>\n            <div>\n              <PurpleButton content=\"Create group\" />\n            </div>\n          </DialogActions>\n        </form>}\n    </>\n  )\n}","import React, { useState } from 'react';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport styled from '@emotion/styled';\nimport PurpleButton from '../common/PurpleButton';\nimport { CreateGroupForm } from './CreateGroupForm';\n\nconst CreateGroupButton = styled.p`\n  margin-top: 10px;\n  color: #5D67E9; \n  font-weight: bold;\n  padding-top: 20px;\n  cursor: pointer;\n`;\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\n\n\nconst intialState = {\n  name: \"\",\n  description: \"\",\n  private: false,\n  profilePic: \"\",\n  profileBanner: \"\",\n  admins: [],\n  users: [],\n  posts: [],\n  videos: [],\n}\n\nexport const CreateGroupModal = () => {\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <CreateGroupButton onClick={handleClickOpen}>\n        Create Group\n      </CreateGroupButton>\n\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          Create a Group\n        </DialogTitle>\n\n        <DialogContent dividers>\n          <CreateGroupForm handleClose={handleClose} />\n        </DialogContent>\n\n\n\n      </Dialog>\n    </div>\n  );\n}","import React, { useEffect, useState } from \"react\";\nimport styled from '@emotion/styled';\nimport Avatar from \"../common/Avatar\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../reducers/rootReducer\";\nimport { User, Group } from \"../../store/types\";\nimport { Dictionary, unwrapResult } from \"@reduxjs/toolkit\";\nimport { AppDispatch } from \"../../store\";\nimport { Loading } from \"../common/Loading\";\nimport ErrorPage from \"../common/ErrorPage\";\nimport { fetchGroups, leaveGroup, joinGroup, selectGroup } from \"../../reducers/groupsSlice\";\nimport PurpleButton from \"../common/PurpleButton\";\nimport { CreateGroupModal } from \"./CreateGroupModal\";\nimport { Link } from \"react-router-dom\";\n\nconst GroupContainer = styled.div`\n  width: 40%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  background-color: white;\n\n`;\nconst Header = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding-left: 30px;\n  padding-right: 30px;\n  padding-top: 10\n  px;\n  border-bottom: solid 1px lightgray;\n`;\n\nconst GroupContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-left: 30px;\n  padding-right: 30px;\n  overflow-y: scroll;\n  margin-bottom: 5vh;\n`;\n\nconst GroupCard = ({ currentGroup, isUserAMember }: { currentGroup: Group, isUserAMember: boolean }) => {\n  const dispatch = useDispatch();\n\n  const handleJoinGroup = () => {\n    dispatch(joinGroup(currentGroup._id));\n  }\n  const handleLeaveGroup = () => {\n    dispatch(leaveGroup(currentGroup._id));\n  }\n\n  if (!currentGroup)\n    return <div><h1>NULL GROUP</h1></div>\n\n  return <div>\n    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n\n      <Link to={`/group/${currentGroup._id}`} style={{ textDecoration: \"none\" }} onClick={() => dispatch(selectGroup({ groupID: currentGroup._id }))}>\n        <Avatar pic={currentGroup.profilePic} title={currentGroup.name} subtitle={currentGroup.description} extraText=\"\" />\n      </Link>\n\n      <div style={{ flex: 1 }}></div>\n      <div style={{ marginTop: \"30px\" }}>\n        {!isUserAMember && <div onClick={handleJoinGroup}>\n          <PurpleButton content=\"Join Group\" /> </div>}\n        {isUserAMember && <div onClick={handleLeaveGroup}> <PurpleButton content=\"Leave Group\" /> </div>}\n      </div>\n    </div>\n  </div>\n}\n\nexport default function GroupTab() {\n  const user = useSelector<RootState, User>(state => state.user);\n  const groups = useSelector<RootState, Dictionary<Group>>(state => state.groups.entities);\n\n  const dispatch: AppDispatch = useDispatch();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    dispatch(fetchGroups()).then(unwrapResult).then(() => {\n      setLoading(false);\n    }).catch(err => {\n      setLoading(false);\n      setError(err);\n    })\n  }, []);\n\n  if (loading || !groups) {\n    return <Loading />\n  }\n  if (error) {\n    return <ErrorPage error={error} />\n  }\n\n  const joinedGroupIDs = user.groups;\n  const otherGroupsIDs = Object.keys(groups).filter((_id) => {\n    return !joinedGroupIDs.includes(_id);\n  })\n\n  return (\n    <GroupContainer>\n      <Header>\n        <span><h2>Groups</h2></span>\n        <div style={{ flex: 1 }}></div>\n        <span>\n          <CreateGroupModal />\n        </span>\n      </Header>\n\n      <hr style={{ color: \"black\" }}></hr>\n      <GroupContent>\n        {joinedGroupIDs.length > 0 && <>\n          <h3>Your groups</h3>\n          {joinedGroupIDs.map((_id) => {\n            return <GroupCard currentGroup={groups[_id]} key={_id} isUserAMember={true} />\n          })}\n        </>}\n\n        {joinedGroupIDs.length === 0 && <h3>Groups you may be interested in</h3>}\n        {joinedGroupIDs.length > 0 && <h3>Other groups</h3>}\n        {otherGroupsIDs.map((_id) => {\n          return <GroupCard currentGroup={groups[_id]} key={_id} isUserAMember={false} />\n        })}\n      </GroupContent>\n    </GroupContainer >\n  );\n}","import { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport LeftSideBar from './LeftSideBar';\nimport Main from './Main';\nimport RightSideBar from './RightSideBar';\nimport GroupTab from '../group';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\n\nconst useStyles = makeStyles({\n  home: {\n    paddingTop: \"7vh\",\n    display: \"flex\",\n  },\n  main: {\n    marginTop: \"5vh\",\n    display: \"flex\",\n    flex: 1,\n    marginBottom: \"1vh\",\n    height: \"86vh\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    width: \"100%\",\n  },\n});\n\nexport default function Home() {\n  const classes = useStyles();\n  // https://reactrouter.com/web/example/nesting\n  // path and url are both for building relative destinations\n  // path is for route, url is for link\n  const { path } = useRouteMatch();\n\n  return (\n    <div className={classes.home}>\n      <LeftSideBar />\n      <div className={classes.main}>\n        <Switch>\n          <Route path={`${path}/groups`}>\n            <GroupTab />\n          </Route>\n          <Route exact path={path}>\n            <Main />\n          </Route>\n        </Switch>\n      </div>\n      <RightSideBar />\n    </div>\n  );\n}","import React from 'react'\nimport { useEffect } from \"react\"\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { loginSuccess } from '../../reducers/isLoggedInSlice';\n\nexport function DevLogin() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    fetch(\"http://localhost:3001/api/dev/login\").then(res => res.json()).then(\n      (res) => {\n        const jwt: string = res.jwt;\n        dispatch(loginSuccess({jwt}));\n        history.push(\"/\");\n      }\n    )\n  }, [])\n  return (<h1>Logging in...</h1>);\n}","import { createAsyncThunk, createEntityAdapter, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Socket } from \"socket.io-client\";\nimport { CreateMessageBodyDto, CreateMessageSuccessDto, MessageDto, MessagesApi } from \"../api\";\nimport { Message } from \"../store/types\";\nimport _ from \"lodash\";\n\nconst messagesAdapter = createEntityAdapter<Message>({\n  selectId: item => item._id,\n});\n\nexport const fetchMessagesInConversation = createAsyncThunk(\n  'fetchMessagesInConversation',\n  async ({ conversationID }: { conversationID: string }) => {\n    return await new MessagesApi().messagesControllerGetMessagesInConversation(conversationID);\n  }\n)\n\nexport type PendingMessage = {\n  createdAt: number,\n  conversationID: string,\n  text: string\n}\n\nexport const messagesSlice = createSlice({\n  name: \"messages\",\n  initialState: messagesAdapter.getInitialState<{ isSending: boolean, isTyping: boolean, isError: any, pendingMessages: PendingMessage[] }>({\n    isSending: false,\n    isTyping: false,\n    isError: null,\n    pendingMessages: []\n  }),//also has ids[] and entities{}\n  reducers: {\n    createMessagePending: (state, action: PayloadAction<CreateMessageBodyDto>) => {\n      state.isSending = true;\n      state.isError = null;\n      const newMessage: PendingMessage = {\n        conversationID: action.payload.conversationID,\n        text: action.payload.text,\n        createdAt: action.payload.createdAt,\n      }\n      state.pendingMessages.push(newMessage);\n    },\n    createMessageSuccess: (state, action: PayloadAction<CreateMessageSuccessDto>) => {\n      state.isSending = false;\n      messagesAdapter.addOne(state, action.payload);\n      _.remove(state.pendingMessages, (message) => {\n        return message.createdAt === action.payload.createdAt;\n      });\n      state.isError = null;\n    },\n    createMessageError: (state, action: PayloadAction<Error>) => {\n      state.isSending = false;\n      state.isError = action.payload;\n    },\n    receiveNewMessage: (state, action: PayloadAction<CreateMessageSuccessDto>) => {\n      messagesAdapter.addOne(state, action.payload);\n    }\n  },\n  extraReducers: {\n    [fetchMessagesInConversation.fulfilled.type]: (state, action: PayloadAction<CreateMessageSuccessDto[]>) => {\n      messagesAdapter.upsertMany(state, action.payload);\n    }\n  }\n})\n\nexport default messagesSlice.reducer;\nexport const { createMessagePending, createMessageSuccess, createMessageError, receiveNewMessage } = messagesSlice.actions;","import {createEntityAdapter, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {CreateConversationBodyDto, CreateMessageSuccessDto} from \"../api\";\nimport {Conversation} from \"../store/types\";\nimport {ConversationDto} from \"../ws-dto/messages/messenger.ws.dto\";\nimport {fetchMessagesInConversation, createMessageSuccess, receiveNewMessage} from \"./messagesSlice\";\n\nconst conversationsAdapter = createEntityAdapter<Conversation>({\n  selectId: item => item._id\n});\n\nexport const conversationSlice = createSlice({\n  name: \"conversations\",\n  initialState: conversationsAdapter.getInitialState<{\n    currentConversationID: string,\n    isGroupConversation: boolean,\n    isDirectConversation: boolean\n    isLoading: boolean,\n  }>({\n    currentConversationID: '', //the conversation shown in CHat Window\n    isGroupConversation: false,\n    isDirectConversation: true,\n    isLoading: false,\n  }),//also has ids[] and entities{}\n  reducers: {\n    addConversation: (state, action: PayloadAction<ConversationDto>) => {\n      conversationsAdapter.addOne(state, action.payload);\n    },\n    setNewConversation: (state) => {\n      state.currentConversationID = \"\";\n    },\n    selectConversation: (state, action: PayloadAction<{ conversationID: string }>) => {\n      const id = action.payload.conversationID;\n      const conversation = state.entities[id];\n      if (conversation.users.length > 2) {\n        state.isDirectConversation = false;\n        state.isGroupConversation = true;\n      } else {\n        state.isDirectConversation = true;\n        state.isGroupConversation = false;\n      }\n      state.isLoading = true;\n      state.currentConversationID = id;\n    },\n    createDirectConversationPending: (state) => {\n      state.isLoading = true;\n      state.isDirectConversation = true;\n      state.isGroupConversation = false;\n    },\n    createGroupConversationPending: (state) => {\n      state.isLoading = true;\n      state.isGroupConversation = true;\n      state.isDirectConversation = false;\n    },\n    createConversationSuccess: (state, action: PayloadAction<ConversationDto>) => {\n      conversationsAdapter.addOne(state, action.payload);\n      state.isLoading = true;\n      state.currentConversationID = action.payload._id;\n    }\n  },\n  extraReducers: {\n    'getConversationsAndUsers': (state, action: PayloadAction<any>) => {\n      conversationsAdapter.upsertMany(state, action.payload.conversations);\n    },\n    [fetchMessagesInConversation.fulfilled.type]: (state) => {\n      state.isLoading = false;\n    },\n    [createMessageSuccess.type]: (state, action: PayloadAction<CreateMessageSuccessDto>) => {\n      state.entities[state.currentConversationID].messages.push(action.payload._id);\n    },\n    [receiveNewMessage.type]: (state, action: PayloadAction<CreateMessageSuccessDto>) => {\n      state.entities[action.payload.conversationID].messages.push(action.payload._id);\n    }\n  }\n\n})\nexport default conversationSlice.reducer;\nexport const {\n  addConversation,\n  selectConversation,\n  createDirectConversationPending,\n  createGroupConversationPending,\n  createConversationSuccess,\n  setNewConversation\n} = conversationSlice.actions;","import React, { useState, useEffect, useContext } from 'react';\nimport { RootState } from '../../reducers/rootReducer';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { User } from '../../store/types';\nimport { Dictionary, unwrapResult } from '@reduxjs/toolkit';\nimport { AppDispatch } from '../../store';\nimport { Loading } from '../common/Loading';\nimport ErrorPage from '../common/ErrorPage';\nimport { fetchUsersByIDs } from '../../reducers/usersSlice';\nimport { convertArrToMap } from '../../util/helperFunctions';\nimport styled from '@emotion/styled';\nimport { withStyles, Theme } from '@material-ui/core';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport PurpleButton from '../common/PurpleButton';\nimport { TextFields } from '../group/TextFields';\nimport AddMultiple from '../group/AddMuliple';\nimport { NewConversationClientToServerDto } from \"../../ws-dto/messages/messenger.ws.dto\";\nimport { createDirectConversationPending, createGroupConversationPending } from \"../../reducers/conversationsSlice\";\nimport { SocketContext } from '../../App';\n\nconst TextWrapper = styled.div`\n  margin-left: 10px;\n  margin-right: 10px;\n`;\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nexport const CreateGroupChatForm = ({ handleClose }) => {\n  const [people, setPeople] = useState<string[]>([]);\n  const [name, setName] = useState(\"\");\n\n  const usersMap = useSelector<RootState, Dictionary<User>>(state => state.users.entities);\n\n  const user = useSelector<RootState, User>(state => state.user);\n  let followingFollowers: User[] = [];\n  user.followers.concat(user.following).forEach((_id) => {\n    if (usersMap[_id]) {\n      followingFollowers.push(usersMap[_id])\n    }\n  });\n  followingFollowers = Object.values(convertArrToMap(followingFollowers));\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [creatingGroupLoading, setCreatingGroupLoading] = useState(false);\n\n  const socket = useContext(SocketContext);\n\n  const dispatch = useDispatch<AppDispatch>();\n  useEffect(() => {\n    if (user.followers.length > 0 || user.following.length > 0) {\n      setLoading(true);\n      dispatch(fetchUsersByIDs(user.following.concat(user.followers)))\n        .then(unwrapResult).then( //must set dispatch to any to use .then\n          () => {\n            setLoading(false)\n          }\n        ).catch(error => {\n          console.log(error);\n          setError(error);\n          setLoading(false);\n        });\n    }\n  }, []);\n\n  if (!followingFollowers || loading) {\n    return <Loading />\n  }\n\n  if (error) {\n    return <ErrorPage error={error} />\n  }\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // if the conversationID is \"\", then the user is starting a new group chat with anonymous name\n    const dto: NewConversationClientToServerDto = { otherUsers: people, name }\n    socket.current.emit('newConversation', dto);\n    dispatch(createGroupConversationPending());\n    // when the back end responds, dispatch is called (in socket.on in messenger/index)\n    handleClose();\n  }\n\n\n  return (\n    <>\n      {creatingGroupLoading ? <Loading /> :\n        <form onSubmit={handleSubmit}>\n          <TextFields name=\"Add Name\" setName={setName} />\n\n          <TextWrapper>\n            <AddMultiple label=\"Add People\" options={followingFollowers} imgKey=\"profilePic\" setItems={setPeople} />\n          </TextWrapper>\n\n          <div style={{ height: \"25px\" }}></div>\n\n          <DialogActions>\n            <PurpleButton content=\"Done\" />\n          </DialogActions>\n\n        </form>}\n    </>\n  )\n}","import React, { useState } from 'react';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport styled from '@emotion/styled';\nimport PurpleButton from '../common/PurpleButton';\nimport { CreateGroupChatForm } from './CreateGroupChatForm';\nimport { HeadingText } from './SideBar';\nimport PlusIcon from \"../../icons/plusIcon.svg\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectConversation } from \"../../reducers/conversationsSlice\";\nimport { RootState } from '../../reducers/rootReducer';\nimport { Dictionary } from '@reduxjs/toolkit';\nimport { Conversation, Group, User } from '../../store/types';\nimport Avatar from \"../common/Avatar\";\nimport { fetchMessagesInConversation } from \"../../reducers/messagesSlice\";\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\n\nexport const GroupConversations = ({ setOpen }: { setOpen: any }) => {\n  const conversations = useSelector<RootState, Dictionary<Conversation>>(state => state.conversations.entities);\n  const groupConv = Object.values(conversations).filter(c => { return c.users.length > 2 });\n\n  const dispatch = useDispatch();\n\n  const handleSelectConversation = (conversationID) => {\n    // console.log(conversationID);\n    dispatch(selectConversation({ conversationID }));\n\n    // console.log(conversationID);\n    //fetch messages in current conversation\n    dispatch(fetchMessagesInConversation({ conversationID }));\n  }\n  return (<>\n    <div style={{ paddingTop: \"20px\" }}>\n      <span><img src={PlusIcon} alt=\"\" style={{ float: \"right\" }} onClick={setOpen} /></span>\n\n      <span><HeadingText>GROUP CONVERSATIONS</HeadingText></span>\n\n      {groupConv.length > 0 && groupConv.map((group) => {\n        return (\n          <p style={{ fontWeight: \"bold\", color: \"#333333\" }}\n            onClick={() => handleSelectConversation(group._id)}>#{group.name}</p>)\n\n      })}\n    </div>\n  </>)\n}\n\nexport const CreateGroupChatModal = () => {\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      {/* list of all group chats */}\n      <GroupConversations setOpen={handleClickOpen}></GroupConversations>\n\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open} disableBackdropClick={true}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          Create a Group Chat\n        </DialogTitle>\n\n        <DialogContent dividers >\n          <CreateGroupChatForm handleClose={handleClose} />\n        </DialogContent>\n\n      </Dialog>\n    </div>\n  );\n}","import { Dictionary } from \"@reduxjs/toolkit\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../reducers/rootReducer\";\nimport { Conversation, User } from \"../../store/types\";\nimport Avatar from \"../common/Avatar\";\nimport styled from '@emotion/styled';\nimport ComposeIcon from \"../../icons/composeIcon.svg\";\nimport { CreateGroupChatModal } from \"./CreateGroupChatModal\";\nimport { selectConversation, setNewConversation } from \"../../reducers/conversationsSlice\";\nimport { fetchMessagesInConversation } from \"../../reducers/messagesSlice\";\nimport { AppDispatch } from \"../../store\";\n\nconst SideBarContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 17%;\n  height: 92vh;\n  cursor: pointer;\n  box-shadow: 2px 2px 3px #F5F5F5;\n  z-index: 1;\n`;\n\nexport const HeadingText = styled.div`\n  font-size: larger;\n  font-family: Passion One, cursive;\n  color: #707070;\n`;\n\nconst DirectMessages = () => {\n  const dispatch: AppDispatch = useDispatch();\n  const conversations = useSelector<RootState, Dictionary<Conversation>>(state => state.conversations.entities);\n  const directConv = Object.values(conversations).filter(c => {return c.users.length === 2});\n\n  const userID = useSelector<RootState, string>(state => state.user._id);\n  //these are only the users who have posts\n  const usersMap = useSelector<RootState, Dictionary<User>>(state => state.users.entities);\n\n  const handleSelectConversation = (conversationID) => {\n    // console.log(conversationID);\n    dispatch(selectConversation({ conversationID }));\n\n    // console.log(conversationID);\n    //fetch messages in current conversation\n    dispatch(fetchMessagesInConversation({ conversationID }));\n  }\n\n  return (\n    <>\n      <span><img src={ComposeIcon} alt=\"\" style={{ float: \"right\" }} onClick={() => {\n        dispatch(setNewConversation());\n      }}/></span>\n\n      <span><HeadingText>DIRECT MESSAGES</HeadingText></span>\n\n      <div style={{ overflowY: \"scroll\" }}>\n        {directConv.length > 0 && directConv.map((c) => {\n          const otherUserID = c.users.filter((id) => id !== userID)[0];\n          const otherUser: User = usersMap[otherUserID];\n          return (\n            <div onClick={() => handleSelectConversation(c._id)} >\n              <Avatar isText={true} pic={otherUser.profilePic} title={otherUser.name} />\n            </div>)\n        })}\n      </div>\n\n    </>\n  )\n}\n\nexport const SideBar = () => {\n  // const users = useSelector<RootState, Dictionary<User>>(state => state.users.entities);\n  //replace these groups with group chat later\n\n  return (\n    <SideBarContainer>\n      {/* <SearchBar></SearchBar> */}\n      <div style={{ paddingLeft: \"30px\", paddingRight: \"30px\", marginTop: \"20%\" }}>\n\n        <DirectMessages></DirectMessages>\n\n        <CreateGroupChatModal></CreateGroupChatModal>\n      </div>\n\n    </SideBarContainer >\n  )\n}","import { Dictionary } from \"@reduxjs/toolkit\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../reducers/rootReducer\";\nimport { Conversation, User } from \"../../store/types\";\nimport Avatar from \"../common/Avatar\";\nimport styled from '@emotion/styled';\nimport { HeadingText } from \"./SideBar\";\nimport { ChatHeader } from \"./ChatArea\";\n\nconst ChatInfoContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 20%;\n  height: 92vh;\n  box-shadow: 1px 1px 2px 4px #F5F5F5;\n`;\n\nexport const H2 = styled.h2`\n  margin-bottom: -1px;\n`;\n\nexport const ChatInfoHeader = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  height: 15vh;\n`;\nexport const ChatInfo = () => {\n  const isGroupConversation = useSelector<RootState, boolean>(state => state.conversations.isGroupConversation);\n  const conversations = useSelector<RootState, Dictionary<Conversation>>(state => state.conversations.entities);\n  const currentConversationID = useSelector<RootState, string>(state => state.conversations.currentConversationID);\n  const currentConversation = conversations[currentConversationID];\n  //replace with people in the conversation\n  const users = useSelector<RootState, Dictionary<User>>(state => state.users.entities);\n\n  return (!currentConversation? <></> :\n    <ChatInfoContainer>\n      <ChatInfoHeader>\n        <div style={{ paddingLeft: \"30px\" }}>\n          {isGroupConversation ? <H2>Group info</H2> : <H2>Chat info</H2>}\n           {/*<p>{currentConversation.createdAt}</p>*/}\n          <span>Created Jul 17, 2020</span>\n        </div>\n      </ChatInfoHeader>\n\n      {/* <hr></hr> */}\n      <div style={{ paddingLeft: \"30px\", paddingTop: \"10px\" }}>\n        <HeadingText>PEOPLE</HeadingText>\n        {currentConversation.users.map((uID) => (\n          <Avatar isText={true} pic={users[uID].profilePic} title={users[uID].name} />\n        ))}\n      </div>\n    </ChatInfoContainer >\n  )\n}","import Quill from \"quill\";\nimport React, { useContext, useEffect, useRef } from \"react\";\nimport styled from '@emotion/styled';\nimport SendIcon from \"../../icons/sendIcon.svg\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../reducers/rootReducer\";\nimport { createMessagePending, fetchMessagesInConversation } from \"../../reducers/messagesSlice\";\nimport { CreateMessageBodyDto } from \"../../api\";\nimport \"../../App.css\";\nimport { createDirectConversationPending, createGroupConversationPending, selectConversation } from \"../../reducers/conversationsSlice\";\nimport { NewConversationClientToServerDto } from \"../../ws-dto/messages/messenger.ws.dto\";\nimport { Dictionary } from \"@reduxjs/toolkit\";\nimport { Conversation } from \"../../store/types\";\nimport { SocketContext } from \"../../App\";\n\nconst Editor = styled.div`\n  max-height: 50%;\n  height: fit-content;\n  width: 63%;\n  position: absolute;\n  bottom: 50px;\n  background-color: white;\n  overflow: scroll;\n  font-size: medium;\n`;\n\nconst Toolbar = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  position: absolute;\n  bottom: 0;\n  width: 63%;\n  background-color: #D3D3D3;\n  padding-left: 30px;\n`;\n\nexport const ChatInput = ({ newMessageSelectedUserIDs }: { newMessageSelectedUserIDs: string[] }) => {\n  const editor = useRef<Quill>(null);//handy for keeping any mutable value around similar to how you’d use instance fields in classes.\n  const socket = useContext(SocketContext);\n  const userID = useSelector<RootState, string>(state => state.user._id);\n\n  const conversations = useSelector<RootState, Dictionary<Conversation>>(state => state.conversations.entities);\n  const conversationID = useSelector<RootState, string>(state => state.conversations.currentConversationID);\n  const dispatch = useDispatch();\n\n  const handleSend = useRef(null);\n  // console.log(\"ChatInput render... newMessageSelectedUserIDs\", newMessageSelectedUserIDs);\n\n  useEffect(() => {\n    handleSend.current = () => {\n      // get text from editor\n      const text = editor.current.root.innerHTML;\n\n      // if the conversationID is \"\", then the user is starting a new group chat with anonymous name\n      if (conversationID === \"\") {\n        const dto: NewConversationClientToServerDto = { otherUsers: newMessageSelectedUserIDs, initialMessage: text }\n\n        if (newMessageSelectedUserIDs.length > 1) {\n          socket.current.emit('newConversation', dto);\n          dispatch(createGroupConversationPending())\n        } else {\n          let foundExistingConversation = false;\n          for (const conv of Object.values(conversations)) {\n            if (conv.users.length !== 2) {\n              continue;\n            }\n            if (conv.users.includes(newMessageSelectedUserIDs[0])) {\n              // Select this conversation instead of making a new one\n              console.log(\"Found existing conversation!\");\n              dispatch(selectConversation({ conversationID: conv._id }));\n              dispatch(fetchMessagesInConversation({ conversationID: conv._id }));\n\n              const messageDto: CreateMessageBodyDto = { conversationID: conv._id, text, userID, createdAt: Date.now()};\n              socket.current.emit('newMessage', messageDto);\n              dispatch(createMessagePending(messageDto));\n              foundExistingConversation = true;\n              break;\n            }\n          }\n          if (!foundExistingConversation) {\n            socket.current.emit('newConversation', dto);\n            dispatch(createDirectConversationPending());\n          }\n        }\n        return;\n        // when the back end responds, dispatch is called (in socket.on in messenger/index)\n      }\n\n      //general case, when sending a message\n      const createMessageBodyDto: CreateMessageBodyDto = {\n        userID,\n        conversationID,\n        // text: editor.current.getText(),\n        text,\n        createdAt: Date.now(),\n      }\n      console.log(createMessageBodyDto);\n      socket.current.emit('newMessage', createMessageBodyDto);\n      dispatch(createMessagePending(createMessageBodyDto));\n      editor.current.setText('');\n    }\n  }, [conversationID, newMessageSelectedUserIDs]);\n\n  useEffect(() => {\n    editor.current = new Quill('#editor', {\n      modules: {\n        toolbar: '#toolbar',\n        keyboard: {\n          bindings: {\n            enter: {\n              key: 13,\n              handler: () => handleSend.current()\n            }\n          }\n        }\n      },\n      placeholder: 'Send message',\n      theme: 'snow'  // or 'bubble'\n    });\n  }, [])\n\n  return (\n    <>\n      <Editor id=\"editor\">\n      </Editor>\n\n      <Toolbar id=\"toolbar\">\n        {/* < Add a bold button  */}\n        <button className=\"ql-bold\"></button>\n        {/* add subscript and superscript buttons */}\n        <button className=\"ql-italic\"></button>\n        <button className=\"ql-underline\"></button>\n        <button className=\"ql-strike\"></button>\n        <button className=\"ql-image\"></button>\n        <button className=\"ql-code-block\"></button>\n        <button className=\"ql-link\"></button>\n        <button className=\"ql-blockquote\"></button>\n        <button className=\"ql-list\" value=\"ordered\"></button>\n        <button className=\"ql-list\" value=\"bullet\"></button>\n\n        <div style={{ flex: 1 }}></div>\n        <p style={{ fontSize: \"small\", fontStyle: \"italic\" }}>\n          <strong>Enter</strong> to send&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n          <strong>Shift</strong> + <strong>Enter</strong> to add a new line&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n\n        <div style={{ marginRight: \"15px\", marginTop: \"10px\" }}>\n          <img src={SendIcon} alt=\"send\" onClick={handleSend.current} />\n        </div>\n      </Toolbar>\n    </>\n  )\n}","import React, { useEffect, useRef } from \"react\";\nimport styled from '@emotion/styled';\n\nexport const ChatBubble = styled.div<{ isUser: boolean }>`\n  margin-left: 2.6em;\n  margin-top: ${({ isUser }) => isUser ? \"-1em\" : \"-0.5em\"};\n  `\n\nexport const ChatMessage = ({ content, isUser }) => {\n  const chatMessage = useRef(null);\n  useEffect(() => {\n    chatMessage.current.innerHTML += content;\n  }, [content])\n\n  return (\n    <div className=\"ql-snow\" >\n      <div className=\"ql-editor\">\n        <ChatBubble ref={chatMessage} isUser={isUser} />\n      </div>\n    </div>\n  )\n}","import { Dictionary } from \"@reduxjs/toolkit\";\nimport React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../reducers/rootReducer\";\nimport { User } from \"../../store/types\";\nimport { getFollowingFollowersOfUser } from \"../../util/helperFunctions\";\nimport AddMultiple from \"../group/AddMuliple\";\nimport { ChatHeader } from \"./ChatArea\";\nimport { H2 } from \"./ChatInfo\";\n\n\nexport const NewConversation = ({ setPeople }) => {\n  const usersMap = useSelector<RootState, Dictionary<User>>(state => state.users.entities);\n  const user = useSelector<RootState, User>(state => state.user);\n  let followingFollowers: User[] = getFollowingFollowersOfUser(usersMap, user);\n\n  return (\n    <ChatHeader>\n      <div style={{ paddingLeft: \"30px\", display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}>\n        <div style={{ display: \"flex\", flexDirection: \"column\", marginLeft: \"20px\" }}>\n          <H2>New message</H2>\n          {/* <p>ViewProfile</p> */}\n          <AddMultiple label=\"To: Select names to send message\" options={followingFollowers} imgKey=\"profilePic\" setItems={setPeople}></AddMultiple>\n        </div>\n      </div>\n    </ChatHeader>\n  )\n}","import React, {useState} from \"react\";\nimport styled from '@emotion/styled';\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport Avatar from \"../common/Avatar\";\nimport {Dictionary} from \"@reduxjs/toolkit\";\nimport {Conversation, CurrentLoggedInUser, Message, User} from \"../../store/types\";\nimport {ChatInfoHeader, H2} from \"./ChatInfo\";\nimport {ChatInput} from \"./ChatInput\";\n\nimport {PendingMessage} from \"../../reducers/messagesSlice\";\nimport {ChatMessage} from \"./ChatMessage\";\nimport \"../../App.css\";\nimport moment from \"moment\";\nimport {NewConversation} from \"./NewConversation\";\nimport { Loading } from \"../common/Loading\";\n\nconst ChatAreaContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 63%;\n  height: 80vh;\n  background-color: white;\n`;\n\nexport const ChatHeader = styled(ChatInfoHeader)`\n  border-bottom: 1px solid #F2F2F2;\n`;\n\nconst GroupChatHeader = ({ conversation }: {conversation: Conversation}) => {\n  return (\n    <ChatHeader>\n      <div style={{ paddingLeft: \"30px\" }}>\n        <H2>{conversation.name}</H2>\n        <span>{conversation.users.length} members&nbsp;&nbsp;&nbsp;&nbsp;</span>\n        <span>+ Add member</span>\n      </div>\n    </ChatHeader >)\n}\n\nconst DirectChatHeader = ({ currentConversation }) => {\n  // const user = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\n  const userID = useSelector<RootState, string>(state => state.user._id);\n\n  const users = useSelector<RootState, Dictionary<User>>(state => state.users.entities);\n  const otherUserID = currentConversation.users.filter((id) => id !== userID)[0];\n  const otherUser: User = users[otherUserID];\n  return (\n    <ChatHeader>\n      <div style={{ paddingLeft: \"30px\", display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}>\n        <div style={{ display: \"flex\", flexDirection: \"column\", marginLeft: \"20px\" }}>\n          <H2>{otherUser.name}</H2>\n          <p>ViewProfile</p>\n        </div>\n      </div>\n    </ChatHeader>)\n}\n\nexport const ChatArea = () => {\n  const user = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\n  const users = useSelector<RootState, Dictionary<User>>(state => state.users.entities);\n\n  const isGroupConversation = useSelector<RootState, boolean>(state => state.conversations.isGroupConversation);\n  const isDirectConversation = useSelector<RootState, boolean>(state => state.conversations.isDirectConversation);\n\n  const conversations = useSelector<RootState, Dictionary<Conversation>>(state => state.conversations.entities);\n  const currentConversationID = useSelector<RootState, string>(state => state.conversations.currentConversationID);\n  const currentConversation = conversations[currentConversationID];\n\n  const messages = useSelector<RootState, Dictionary<Message>>(state => state.messages.entities);\n  const messagesArr = Object.values(messages).filter((message) => {\n    if (currentConversation) {\n      return currentConversation.messages.includes(message._id);\n    }\n  });\n\n  const pendingMessages = useSelector<RootState, PendingMessage[]>(state => state.messages.pendingMessages);\n  const pendingMessagesFromCurrConversation = pendingMessages.filter((msg) => msg.conversationID === currentConversationID);\n\n  const [people, setPeople] = useState<string[]>([]);\n\n  const isLoading = useSelector<RootState, boolean>(state => state.conversations.isLoading);\n  if (isLoading) {\n    return (\n      <Loading></Loading>\n    )\n  }\n\n  return (\n    <ChatAreaContainer>\n      {!currentConversation && <NewConversation setPeople={setPeople}></NewConversation>}\n      {currentConversation && isGroupConversation && <GroupChatHeader conversation={currentConversation} />}\n      {currentConversation && isDirectConversation && <DirectChatHeader currentConversation={currentConversation} />}\n\n      {/* all messages sent by the server */}\n      { currentConversation &&\n      <div style={{ paddingTop: \"20px\", overflowY: \"scroll\" }}>\n        {messagesArr.map((msg) => {\n          return (\n            <div style={{ margin: \"10px 40px 10px 40px\" }}>\n              {msg.author === user._id ? (\n                <>\n                  <div className=\"textBlock\" style={{ display: \"flex\", flexDirection: \"column\" }}>\n                    <Avatar pic={user.profilePic} title={user.name} isText={true} extraText={moment(msg.createdAt).calendar()}></Avatar>\n                    <ChatMessage content={msg.text} isUser={true} />\n                  </div>\n                </>\n              ) :\n                <>\n                  <div className=\"textBlock\" style={{ display: \"flex\", flexDirection: \"column\" }}>\n                    <Avatar pic={users[msg.author].name} title={users[msg.author].name} isText={true} extraText={moment(msg.createdAt).calendar()}></Avatar>\n                    <ChatMessage content={msg.text} isUser={false}></ChatMessage>\n                  </div>\n                </>}\n            </div>)\n        })}</div>\n      }\n\n      {/* pending message from current user */}\n      <div style={{ paddingTop: \"20px\", overflowY: \"scroll\" }}>\n        {pendingMessagesFromCurrConversation.map((pendingMsg) => (\n          <div style={{ margin: \"10px 40px 10px 40px\" }}>\n            <Avatar pic={user.profilePic} title={user.name} subtitle={pendingMsg.text} isText={true} />\n            <em style={{ fontSize: \"smaller\", paddingLeft: \"50px\" }}>Sending...</em>\n          </div>\n        ))}</div>\n\n      <ChatInput newMessageSelectedUserIDs={people}></ChatInput>\n\n    </ChatAreaContainer >\n  )\n}","import React, { useEffect, useRef } from \"react\";\nimport { SideBar } from \"./SideBar\";\nimport styled from '@emotion/styled';\nimport { ChatArea } from \"./ChatArea\";\nimport { ChatInfo } from \"./ChatInfo\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../reducers/rootReducer\";\nimport io from 'socket.io-client';\nimport { createMessageSuccess, fetchMessagesInConversation, receiveNewMessage } from \"../../reducers/messagesSlice\";\nimport { BackEndBaseUriForWs, JwtLocalStorageKey } from \"../../constants\";\nimport { addConversation, createConversationSuccess } from \"../../reducers/conversationsSlice\";\nimport { NewConversationServerToClientDto } from \"../../ws-dto/messages/messenger.ws.dto\";\n\nexport const ChatContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding-top: 8vh;\n`;\n\nexport const Messenger = () => {\n  // const userID = useSelector<RootState, string>(state => state.user._id);\n  // const dispatch = useDispatch();\n\n  return (\n      <ChatContainer>\n        <SideBar />\n        <ChatArea />\n        <ChatInfo />\n      </ChatContainer>\n  )\n}","import React, {useContext, useRef} from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport PurpleButton from \"../common/PurpleButton\";\nimport {createCommentPending} from \"../../reducers/commentsSlice\";\n\nimport { CreateCommentClientToServerDto } from \"../../ws-dto/comments/dto/createComment.ws.dto\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { SocketContext } from \"../../App\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport {Loading} from \"../common/Loading\";\n\nconst useStyles = makeStyles({\n  root: {\n    marginTop: \"1em\",\n  },\n  name: {\n    fontSize: \"medium\",\n    border: \"none\",\n    borderRadius: \"5px\",\n    width: \"60%\",\n    paddingLeft: \"2em\",\n    height: \"3em\",\n    marginBottom: \"1em\",\n  },\n  comment: {\n    alignContent: \"\",\n    height: \"5em\",\n  },\n});\n\nconst NewComment = ({postID}) => {\n  const socket = useContext(SocketContext);\n  const classes = useStyles();\n  const inputRef = useRef(null);\n  const dispatch = useDispatch();\n  const createPending = useSelector<RootState, boolean>(state => state.comments.isLoading);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputRef.current.value.trim() === '') {\n      return;\n    }\n    const content = inputRef.current.value.trim();\n    const newCommentDto: CreateCommentClientToServerDto = {\n      content,\n      // parentComment?: string;\n      parentPost: postID,\n      // parentVideo?: string;\n      commentRoot: \"post\",\n    };\n    socket.current.emit('createComment', newCommentDto);\n    dispatch(createCommentPending());\n  }\n\n  if (createPending) {\n    return <Loading />\n  }\n\n  return (\n    <form className={classes.root} onSubmit={(e) => handleSubmit(e)}>\n      <input\n        className={`${classes.name} ${classes.comment}`}\n        placeholder=\"Type comment\"\n        ref={inputRef}\n      />\n      {/*<input className={classes.name} placeholder=\"Type comment\" />*/}\n      <PurpleButton content=\"Post comment\"></PurpleButton>\n    </form>\n  );\n};\n\nexport default NewComment;\n","import {Link, useHistory} from \"react-router-dom\";\nimport PurpleButton from \"../common/PurpleButton\";\nimport React from \"react\";\n\nfunction UpdateButton(params) {\n    const history = useHistory();\n\n    const handleClick = () => {\n        console.log(\"POSTDETAIL::UPDATE\");\n        console.log(params);\n        console.log(params.slug);\n        history.push(`/update-post/${params.slug}`);\n    }\n    return (<PurpleButton handleClick={handleClick} content={\"Update Post\"}></PurpleButton>);\n}\n\nexport default UpdateButton;","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport {Comment, User} from \"../../store/types\";\nimport Avatar from \"../common/Avatar\";\nimport moment from \"moment\";\nimport styled from \"@emotion/styled\";\n\nconst Container = styled.div`\n\n`\n\nconst CommentContent = styled.p`\n  margin-left: 3.5em;\n  margin-top: -0.35em;\n`\n\nexport function ChildComment({commentID}: {commentID: string}) {\n  const comment = useSelector<RootState, Comment>(state => state.comments.entities[commentID]);\n  const author = useSelector<RootState, User>(state => state.users.entities[comment?.author]);\n\n  return (<Container>\n    <Avatar pic={author.profilePic}\n            small\n            title={author.userID} titleSrc={`/user/${author.userID}`}\n            subtitle={moment(comment.createdAt).calendar()}\n            subtitleIsDate\n    ></Avatar>\n    <CommentContent>{comment.content}</CommentContent>\n  </Container>);\n}","import React, {useContext, useRef, useState} from \"react\";\nimport styled from \"@emotion/styled\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport {useSelector} from \"react-redux\";\nimport {Comment, CurrentLoggedInUser, User} from \"../../store/types\";\nimport Avatar from \"../common/Avatar\";\nimport moment from \"moment\";\nimport {ChildComment} from \"./ChildComment\";\nimport {Modal} from \"@material-ui/core\";\nimport {initializeGitHubOAuth} from \"../login/login\";\nimport {SocketContext} from \"../../App\";\nimport {CreateCommentClientToServerDto, CreateCommentEvent} from \"../../ws-dto/comments/dto/createComment.ws.dto\";\nimport ReplySvg from \"../../assets/reply.svg\";\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\n\n\nconst CommentContent = styled.p`\n  margin-left: 3.5em;\n  margin-top: -0.35em;\n`\n\nconst TopLevelCommentContainer = styled.div`\n\n`\n\nconst ChildCommentsContainer = styled.div`\n  margin-left: 5em;\n`\n\nconst CreateCommentReplyContainer = styled.div`\n  background-color: white;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  padding: 1em;\n  text-align: center;\n`\n\nconst CreateCommentInfo = styled.p`\n  font-style: italic;\n  color: gray;\n`\n\nconst CreateCommentReplyInput = styled.input`\n  width: 300px;\n  font-size: medium;\n  padding: 1em;\n`\n\ntype Props = {\n  commentID: string;\n}\n\nexport function TopLevelComment({commentID}: Props) {\n  const comment = useSelector<RootState, Comment>(state => state.comments.entities[commentID]);\n  const author = useSelector<RootState, User>(state => state.users.entities[comment?.author]);\n  const [expanded, setExpanded] = useState(false);\n  const [openReplyModal, setOpenReplyModal] = useState(false);\n  const replyInputRef = useRef(null); // Form input for creating a reply in the modal\n  const currentUser = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\n  const socket = useContext(SocketContext);\n\n  if (!comment) {\n    console.log('TopLevelComment.tsx.. Comment does not exist in Redux store for ID: ', commentID);\n    return <></>;\n  }\n\n  function createCommentReply(event) {\n    event.preventDefault();\n\n    if (replyInputRef.current.value.trim() === '') {\n      return;\n    }\n\n    const content = replyInputRef.current.value.trim();\n    const dto: CreateCommentClientToServerDto = {\n      commentRoot: 'post',\n      parentPost: comment.parentPost,\n      parentComment: commentID,\n      content\n    };\n    socket.current.emit(CreateCommentEvent, dto);\n    setOpenReplyModal(false);\n  }\n\n  function handleClickReply(event) {\n    if (!currentUser) {\n      // Send user to login\n      initializeGitHubOAuth();\n      return; // unreacheable\n    }\n    setOpenReplyModal(true);\n  }\n\n  return (\n    <div style={{backgroundColor: expanded ? \"white\" : \"inherit\", borderRadius: \"20px\", paddingLeft: \"1em\", paddingBottom: \"1.5em\", cursor: \"pointer\"}}>\n      <TopLevelCommentContainer onClick={() => setExpanded(expanded => !expanded)}>\n        <Avatar pic={author.profilePic}\n                title={author.userID} titleSrc={`/user/${author.userID}`}\n                subtitle={moment(comment.createdAt).calendar()}\n                subtitleIsDate\n                extraText=\"Reply\"\n                extraTextOnClick={handleClickReply}\n        ></Avatar>\n\n      </TopLevelCommentContainer>\n      <CommentContent>{comment.content}</CommentContent>\n      {expanded && (<ChildCommentsContainer>\n        {comment.replies.map(reply => <ChildComment commentID={reply}></ChildComment>)}\n      </ChildCommentsContainer>)}\n\n      <Modal open={openReplyModal} onClose={() => setOpenReplyModal(false)} closeAfterTransition\n             BackdropComponent={Backdrop} BackdropProps={{timeout: 500}}>\n        <Fade in={openReplyModal}>\n          <CreateCommentReplyContainer>\n            <img height={80} src={ReplySvg} alt=\"Reply\"/>\n            <CreateCommentInfo>Reply to {author.userID}</CreateCommentInfo>\n            <form onSubmit={createCommentReply}>\n              <CreateCommentReplyInput ref={replyInputRef} placeholder=\"Type comment\"/>\n            </form>\n          </CreateCommentReplyContainer>\n        </Fade>\n      </Modal>\n    </div>\n  );\n}","import { CommentDto } from './getCommentsByPostID.ws.dto';\n\nexport const CreateCommentEvent = \"createComment\";\nexport const CreateCommentInvalidPostErrorString = \"Cannot create comment -- invalid Post ID\";\nexport const CreateCommentInvalidParentCommentErrorString = \"Cannot create comment -- invalid parent comment ID\";\n\nexport class CreateCommentClientToServerDto {\n  content: string;\n  parentComment?: string;\n  parentPost?: string;\n  parentVideo?: string;\n  commentRoot: string;\n}\n\nexport class CreateCommentServerToClientDto {\n  comment: CommentDto;\n}","import React, {useContext, useEffect, useState} from \"react\";\nimport styled from \"@emotion/styled\";\nimport {useSelector} from \"react-redux\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport {Dictionary} from \"@reduxjs/toolkit\";\nimport {Comment, Post} from \"../../store/types\";\nimport {Loading} from \"../common/Loading\";\nimport WriteThefirstComment from \"../../assets/write_the_first_comment.svg\";\nimport Avatar from \"../common/Avatar\";\nimport {SocketContext} from \"../../App\";\nimport {\n  GetCommentsByPostIDEvent,\n  GetCommentsClientToServerDto\n} from \"../../ws-dto/comments/dto/getCommentsByPostID.ws.dto\";\nimport {TopLevelComment} from \"./TopLevelComment\";\n\nconst Container = styled.div`\n\n`\n\nconst NoCommentsContainer = styled.div`\n  text-align: center;\n`\n\nconst SubtleEncouragement = styled.p`\n  color: gray;\n  font-style: italic;\n`\n\nfunction postHasNoComments() {\n  return (<NoCommentsContainer>\n    <SubtleEncouragement>No comments yet...</SubtleEncouragement>\n    <img height={150} src={WriteThefirstComment} alt='Write the first comment'/>\n    <SubtleEncouragement>Write the first comment below!</SubtleEncouragement>\n  </NoCommentsContainer>)\n}\n\nexport function Comments({postID}:{postID?:string}) {\n  const post = useSelector<RootState, Post>(state => state.posts.entities[postID]);\n  const fetchedComments = useSelector<RootState, boolean>(state => state.posts.fetchedComments[postID]);\n  const socket = useContext(SocketContext);\n\n  // Emit fetch comments WS event if needed\n  useEffect(() => {\n    console.log('post_detail/Comments.tsx useEffect, postID:', postID)\n    if (postID && !fetchedComments) {\n      const dto: GetCommentsClientToServerDto = {postID};\n      socket.current.emit(GetCommentsByPostIDEvent, dto);\n      console.log('post_detail/Comments.tsx useEffect -- emitting ', GetCommentsByPostIDEvent);\n    }\n  }, [postID]);\n\n  const topLevelComments = useSelector<RootState, string[]>(state => {\n    const ret = [];\n    post?.comments?.forEach(commentID => {\n      const comment = state.comments.entities[commentID];\n      if (comment && !comment.parentComment) {\n        // top level comment if it has no parentComment\n        ret.push(commentID);\n      }\n    });\n    return ret;\n  });\n\n  if (!post?.content) {\n    console.log('post_detail/Comments.tsx render .. post is not loaded');\n    return <Loading />\n  }\n\n  if (post.comments.length === 0) {\n    return postHasNoComments();\n  }\n\n  return (\n    <Container>\n      {topLevelComments.map(commentID => <TopLevelComment commentID={commentID}/>)}\n    </Container>\n  )\n}","export const GetCommentsByPostIDEvent = \"getCommentsByPostID\";\n\nexport class GetCommentsServerToClientDto {\n  postID: string;\n  comments: CommentDto[];\n  authors: CommentAuthorDto[];\n}\n\nexport class GetCommentsClientToServerDto {\n  postID: string;\n}\n\nexport class CommentDto {\n  _id: string;\n  author: string;\n  content: string;\n  commentRoot: string;\n  replies?: string[];\n  likes: number;\n  parentPost?: string;\n  parentComment?: string;\n  parentVideo?: string;\n  createdAt: number;\n}\n\nexport class CommentAuthorDto {\n  _id: string;\n  userID: string;\n  name: string;\n  profilePic?: string;\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function Tag(tag) {\n  const classes = useStyles();\n  return (\n    <div>\n      <Button variant=\"contained\" color=\"secondary\" className={classes.button} >\n        {tag.tag}\n      </Button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Tag from \"./Tag\";\nimport {fade, makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  cptag: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    // height: \"20vh\",\n    // width: \"40vw\",\n    // backgroundColor: \"white\",\n    boxShadow: \"3px 3px #F2F2F2\",\n    marginBottom: \"1em\",\n    borderRadius: \"5px\",\n    paddingLeft: \"1.5em\",\n    paddingRight: \"1.5em\",\n  },\n  tags: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    margin: \"0 0\",\n    padding: \"0 0\",\n  },\n});\n\nexport default function TagPanel(params) {\n  const classes = useStyles();\n  // console.log(\"POSTDETAIL::TAGPANEL\");\n  const tags = params.tags;\n  return (\n    <div className={classes.cptag}>\n      <ul className={classes.tags}>{\n        tags.map(tag => (\n          <Tag tag={tag}/>\n        ))\n      }\n      </ul>\n    </div>\n  );\n}\n","import {makeStyles} from '@material-ui/core/styles';\nimport React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {Redirect, useParams} from 'react-router-dom';\nimport {PostDetailParams} from '../../App';\nimport Avatar from '../common/Avatar';\nimport {Loading} from '../common/Loading';\nimport {NotFoundError} from '../common/NotFoundError';\nimport NewComment from './NewComment';\nimport UpdateButton from './UpdateButton';\nimport {RootState} from '../../reducers/rootReducer';\nimport {fetchPostBySlug} from '../../reducers/postsSlice';\nimport {CurrentLoggedInUser, Post, Tag, User} from '../../store/types';\nimport {AppDispatch} from '../../store';\nimport defaultPostFeaturedImage from \"../../assets/defaultPostFeaturedImage.jpg\";\nimport {PostsApi} from \"../../api\";\nimport {useLikePost} from \"../../hooks/useLikePost\";\nimport CommentIcon from \"../../icons/commentIcon.svg\";\nimport HeartIcon from \"../../icons/heartIcon.svg\";\nimport HeartIconRed from \"../../icons/heartIconRed.svg\";\nimport BookmarkEmpty from \"../../icons/bookmarkEmpty.svg\";\nimport {Comments} from \"./Comments\";\nimport TagP from \"./TagPanel\";\nimport {Dictionary} from \"@reduxjs/toolkit\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  postDetail: {\n    paddingTop: \"10vh\",\n    // paddingBottom: \"20vh\",\n    width: \"60vw\",\n    margin: \"0 auto\",\n  },\n  interactions: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  shareIcon: {\n    marginLeft: \"2em\",\n    width: \"1.5em\",\n  },\n  heartIcon: {\n    width: \"1.3em\",\n  },\n  interactionsIcons: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    flexDirection: \"row\",\n    alignContent: \"center\",\n    marginTop: \"6vh\",\n  },\n});\n\nconst Interactions = () => {\n  return <> </>\n}\n\nconst PostDetail = () => {\n  console.log(\"POSTDETAIL::INDEX\");\n  const {slug} = useParams<PostDetailParams>(); //get the url param to render the appropriate post\n  const classes = useStyles();\n  const dispatch = useDispatch<AppDispatch>();\n  const currentUser = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\n\n  // const slugtoid = useSelector<RootState, Record<string, string>>(state => state.posts.slugToID);\n  const {post, author} = useSelector<RootState, { post: Post, author: User }>(state => {\n    const postID = state.posts.slugToID[slug];\n    if (!postID) {\n      return {post: null, author: null};\n    }\n    const post = state.posts.entities[postID];\n    const author = state.users.entities[post.author];\n    return {post, author};\n  });\n  const {postIsLikedByUser, handleToggleLike} = useLikePost(post._id);\n\n  // fetch tags\n  const tags = useSelector<RootState, Dictionary<Tag>>(state => state.tags.entities);\n  const tagsArr = post.tags.map(tag => {\n    return tags[tag].name;\n  })\n\n  let canUpdate = false; // if the current user is the author, show an 'update post' button\n  if (author !== null) {\n    canUpdate = currentUser !== null && currentUser._id === author._id;\n  }\n\n  const [error, setError] = useState(null);\n\n  let featuredImg: string;\n  if (!post?.featuredImg) {\n    featuredImg = defaultPostFeaturedImage;\n  } else {\n    featuredImg = post.featuredImg;\n  }\n\n  useEffect(() => {\n    if (slug == null || slug === \"\") {\n      return;\n    }\n    if (!post?.content) {\n      // automatically increments view count in PostService\n      dispatch(fetchPostBySlug({slug, getAuthor: !author})).catch(setError);\n    } else {\n      // increment view count if don't need to fetch the post\n      new PostsApi().postsControllerIncrementView(post._id).then(() => console.log(\"Already had post. Incremented view count.\")).catch(console.log);\n    }\n  }, []);\n\n  if (slug == null || slug === \"\") {\n    return <Redirect to=\"/\"/>\n  }\n\n  if (!post?.content || !author) {\n    return <Loading/>\n  }\n\n  if (error) {\n    return <NotFoundError/> // TODO: add something for server error\n  }\n\n  // post has item with content\n  // const likedByUser = isLoggedIn && post.likedByUser;\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.postDetail}>\n        <img\n          src={featuredImg}\n          style={{height: \"20em\", objectFit: \"cover\", width: \"100%\"}} alt=\"featured\"\n        />\n        <h1>{post.title}</h1>\n\n        <Avatar pic={author.profilePic} title={author.userID} subtitle={post.createdAt} isPost={true}\n                extraText=\"follow\" isButton={true}></Avatar>\n\n        <TagP tags={tagsArr}/>\n        <p>{post.content}</p>\n\n        <Interactions/>\n        <div className={classes.interactionsIcons}>\n          <span>\n            <img className={classes.heartIcon} src={postIsLikedByUser ? HeartIconRed : HeartIcon} alt=\"\"\n                 onClick={() => {\n                   handleToggleLike()\n                   ;\n                 }}/>&nbsp;&nbsp;{post.likes}\n          </span>\n          <span>\n            <img className={classes.shareIcon} src={CommentIcon} alt=\"\"/>\n            &nbsp;&nbsp;{post.commentsCount}\n          </span>\n          <span>\n            <img className={classes.shareIcon} src={BookmarkEmpty} alt=\"\"/>\n            &nbsp;&nbsp;Save\n          </span>\n        </div>\n\n        <hr></hr>\n        <Comments postID={post._id}></Comments>\n        <NewComment postID={post._id}></NewComment>\n        {canUpdate && <UpdateButton slug={slug}/>}\n      </div>\n    </div>\n  );\n};\n\nexport default PostDetail;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function TagCard() {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <Button variant=\"contained\" color=\"secondary\" className={classes.button} endIcon={<CloseIcon/>}>Cpp\n      </Button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { RootState, SavedPost, CurrentViewedPost, Tag } from \"../../initialData\";\nimport TagCard from \"./TagCard\";\n\nconst useStyles = makeStyles({\n  rightbar: {\n    width: \"20vw\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    // height: \"100%\",\n    cursor: \"pointer\",\n    paddingLeft: \"2em\",\n    paddingTop: \"5vh\",\n    marginRight: \"5vw\",\n  },\n  title: {\n    fontSize: \"1em\"\n  },\n  search: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"40vh\",\n    overflowY: \"auto\",\n  },\n  searchoption: {\n    fontSize: \"1em\"\n  },\n  filter: {\n    height: \"56vh\",\n    display: \"flex\",\n  },\n  display: {\n    fontWeight: \"bold\",\n    marginBottom: \"1em\",\n  },\n  filtertags: {\n  }\n});\n\nexport default function RightSideBar() {\n  const classes = useStyles();\n  // const dispatch = useDispatch();\n  // const currViewedPost = useSelector<RootState, CurrentViewedPost>(\n  //   (state) => state.currentViewedPost\n  // );\n  // const savedPosts = useSelector<RootState, SavedPost[]>(\n  //   (state) => state.savedPosts\n  // );\n\n  // const tags = useSelector<RootState, Tag[]>((state) => state.tags);\n\n  return (\n    <div className={classes.rightbar}>\n      <div className={classes.search}>\n        <p className={classes.title}># Search</p>\n        <hr className={classes.display}></hr>\n        <div className={classes.searchoption}>\n          <input type=\"checkbox\" checked />\n          <label>posts</label>\n          <br></br>\n          <input type=\"checkbox\" />\n          <label>users</label>\n          <br></br>\n          <input type=\"checkbox\" />\n          <label>videos</label>\n        </div>\n      </div>\n      <div className={classes.filter}>\n        <p className={classes.title}># Filter by</p>\n        <hr className={classes.display}></hr>\n        <div className={classes.filtertags}>\n          <TagCard />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\nimport Main from '../home/Main';\nimport RightSideBar from './RightSideBar';\n\nconst useStyles = makeStyles({\n  home: {\n    paddingTop: \"7vh\",\n    display: \"flex\",\n  },\n});\n\nexport default function Home() {\n  const classes = useStyles();\n  return (\n    <div className={classes.home}>\n      <Main />\n      <RightSideBar />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport {ImageType} from \"../../constants\";\nimport {UpdateImageModal} from \"../common/UpdateImageModal\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    bannerImg: {\n      maxHeight: \"284px\",\n      marginLeft: \"10%\",\n      width: \"80%\",\n      objectFit: \"none\",\n    },\n  })\n);\n\nexport function ProfileBanner({ imgSrc }) {\n  const classes = useStyles();\n\n  return (\n    <div style={{ height: \"284px\" }}>\n      <img className={classes.bannerImg} src={imgSrc} alt=\"banner\"></img>\n    </div>\n  );\n}\n","import React from \"react\";\nimport styled from '@emotion/styled';\nimport { User } from \"../../store/types\";\nimport { useFollow, UseFollowHook } from \"../../hooks/useFollow\";\nimport { Loading } from \"../common/Loading\";\n\nexport const TradingCardContainer = styled.div`\n  height: 350px;\n  width: 288px;\n  background-color: white;\n  border-radius: 20px;\n  display: flex;\n  flex-direction: column;\n`\n\nexport const AvatarPic = styled.img`\n  margin-top: 19px;\n  margin-left: 98px;\n  margin-right: 98px;\n  width: 92px;\n  height: 92px;\n  border-radius: 100px;\n`\n\nexport const AllCapsName = styled.h3`\n  padding: 0;\n  margin-top: 16px;\n  margin-bottom: 0;\n  font-family: Roboto, sans-serif;;\n  font-style: normal;\n  font-weight: bold;\n  font-size: 24px;\n  color: #000000;\n  text-align: center;\n`\n\nexport const Subtitle = styled.h4`\n  margin-top: 4px;\n  padding: 0;\n  font-family: Roboto, sans-serif;;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 20px;\n  line-height: 23px;\n  color: #000000;\n  text-align: center;\n`;\n\nexport const FollowersAndPostsCountContainer = styled.div`\n  display: flex;\n\n`\n\nexport const FollowersCountContainer = styled.div`\n  font-family: Roboto, sans-serif;;\n  font-style: normal;\n  font-weight: 300;\n  font-size: 18px;\n  line-height: 21px;\n  padding: 0;\n  margin: 0;\n\n  color: #000000;\n`\n\nexport const PostsCountContainer = FollowersCountContainer;\n\nexport const BigBoldNumber = styled.p`\n  padding: 0;\n  margin: 0;\n  font-family: Roboto, sans-serif;;\n  font-style: normal;\n  font-weight: bold;\n  font-size: 24px;\n  line-height: 28px;\n  color: #000000;\n`\n\nexport const SpaceBetweenFollowersAndPosts = styled.div`\n  width: 87px;\n`\n\nexport const SpaceAround = styled.div`\n  flex: 1;\n`\n\nexport const TradingCardButton = styled.button`\n  margin-bottom: 23px;\n  margin-left: 73px;\n  margin-right: 73px;\n  background: #FFFFFF;\n  border: 1px solid #000000;\n  box-sizing: border-box;\n  width: 141px;\n  height: 38px;\n  border-radius: 10px;\n  font-family: Roboto, sans-serif;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 18px;\n  line-height: 21px;\n`\n\n// https://www.figma.com/file/ehowTfq9OAMUdMf3Qbngi0/Programmers-Social-Network?node-id=50%3A0\n// Can be adapted to work for groups as well, need to change props\nexport function TradingCard({ user, isCurrentUser, followHook }: { user: User, isCurrentUser?: boolean, followHook?: UseFollowHook }) {\n\n  // TODO: Change follow button depending on follow relationship\n  function button() {\n    if (isCurrentUser) {\n      return (<TradingCardButton onClick={() => console.log(\"edit profile button clicked!\")}>Edit\n                profile</TradingCardButton>)\n    }\n\n    if (followHook.followsOtherUser && followHook.isFollowedByOtherUser) {\n      return (<TradingCardButton onClick={(e) => followHook.handleToggleFollow(e)}>Unfollow</TradingCardButton>)\n    }\n\n    if (followHook.followsOtherUser) {\n      return (<TradingCardButton onClick={(e) => followHook.handleToggleFollow(e)}>Unfollow</TradingCardButton>)\n    }\n\n    if (!followHook.followsOtherUser && followHook.isFollowedByOtherUser) {\n      return (<TradingCardButton onClick={(e) => followHook.handleToggleFollow(e)}>Follow</TradingCardButton>)\n    }\n\n    // Neither is following each other\n    return (<TradingCardButton onClick={(e) => followHook.handleToggleFollow(e)}>Follow</TradingCardButton>);\n  }\n\n\n  return (<TradingCardContainer>\n    <AvatarPic src={user.profilePic} />\n    <AllCapsName>{user.name.toUpperCase()}</AllCapsName>\n    <Subtitle>{user.status}</Subtitle>\n    <FollowersAndPostsCountContainer>\n      <SpaceAround />\n      <FollowersCountContainer>\n        <BigBoldNumber>\n          {user.followers.length}\n        </BigBoldNumber>\n                followers\n            </FollowersCountContainer>\n      <SpaceBetweenFollowersAndPosts />\n      <PostsCountContainer>\n        <BigBoldNumber>\n          {user.posts.length}\n        </BigBoldNumber>\n                posts\n            </PostsCountContainer>\n      <SpaceAround />\n    </FollowersAndPostsCountContainer>\n    <SpaceAround />\n    {button()}\n  </TradingCardContainer>)\n}","import React, {useState} from \"react\";\nimport {CurrentLoggedInUser} from \"../../store/types\";\nimport styled from '@emotion/styled';\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Card from \"../home/Card\";\n\nconst Container = styled.div`\n  width: 816px; // to match the Card.tsx width\n  align-content: center;\n`\n\nconst PostsContainer = styled.div`\n  margin-top: 34px;\n  \n`\n\nconst SavedPostsContainer = PostsContainer;\n\n\nexport function OwnPostsBoard({user}: {user: CurrentLoggedInUser}) {\n    const [tabIdx, setTabIdx] = useState(0);\n\n    function child() {\n        if (tabIdx === 0) {\n            return (\n                <PostsContainer>\n                    {user.posts.map(postID => <Card postID={postID} />)}\n                </PostsContainer>\n            );\n        } else {\n            return (\n                <SavedPostsContainer>\n                    {user.savedPosts.map(postID => <Card postID={postID} />)}\n                </SavedPostsContainer>\n            );\n        }\n    }\n\n    return (\n        <Container>\n            <Tabs\n              value={tabIdx}\n              onChange={(_, newValue) => {setTabIdx(newValue)}}\n              indicatorColor=\"primary\"\n              textColor=\"inherit\"\n              variant=\"fullWidth\"\n            >\n              <Tab\n                label=\"Posts\"\n                style={{\n                  fontFamily: \"Roboto\",\n                  textTransform: \"none\",\n                  fontWeight: tabIdx === 0 ? \"bold\" : \"lighter\",\n                  fontSize: \"1.2rem\",\n                }}\n              />\n              <Tab\n                 label=\"Saved\"\n                 style={{\n                   fontFamily: \"Roboto\",\n                   textTransform: \"none\",\n                   fontWeight: tabIdx === 1 ? \"bold\" : \"lighter\",\n                   fontSize: \"1.2rem\",\n                 }}\n              />\n            </Tabs>\n            {child()}\n        </Container>\n    );\n}","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../reducers/rootReducer\";\nimport { CurrentLoggedInUser } from \"../../store/types\";\nimport styled from '@emotion/styled';\nimport { ProfileBanner } from \"./ProfileBanner\";\nimport DefaultImg from \"../../assets/defaultUserProfileBannerImg.jpg\";\nimport { TradingCard } from \"./TradingCard\";\nimport { OwnPostsBoard } from \"./OwnPostsBoard\";\n\nexport const Container = styled.div`\n  display: flex;\n`\n\nexport const FlexSpace = styled.div<{ flex?: number }>`\n  flex: ${props => props.flex || 1};\n`\n\nexport const WidthSpace = styled.div<{ width: string }>`\n  width: ${props => props.width};\n`\n\nexport const HeightSpace = styled.div<{ height: string }>`\n  height: ${props => props.height};\n`\n\nexport function OwnProfile() {\n  const user = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\n  const src = user.profileBanner || DefaultImg;\n\n  return (\n    <>\n      <ProfileBanner imgSrc={src} />\n      <HeightSpace height=\"26px\" />\n      <Container>\n        <FlexSpace flex={1} />\n        <TradingCard user={user} isCurrentUser />\n        <WidthSpace width=\"47px\" />\n        <OwnPostsBoard user={user} />\n        <FlexSpace flex={3} />\n      </Container>\n    </>\n  );\n}","import React, { useEffect } from \"react\";\nimport {User} from \"../../store/types\";\nimport styled from \"@emotion/styled\";\nimport Card from \"../home/Card\";\nimport { Loading } from \"../common/Loading\";\nimport {fetchUserByUsername} from \"../../reducers/usersSlice\";\nimport {AppDispatch} from \"../../store\";\nimport {useDispatch} from \"react-redux\";\n\nconst Container = styled.div`\n  width: 816px; // to match the Card.tsx width\n  align-content: center;\n`\n\nconst PostsContainer = styled.div`\n  margin-top: 34px;\n  \n`\n\nexport function OtherPostsBoard ({user}: {user: User}) {\n    const dispatch = useDispatch<AppDispatch>();\n\n    useEffect(() => {\n        if (!user?.posts) {\n            dispatch(fetchUserByUsername(user.userID));\n        }\n    }, []);\n\n    if (!user?.posts) {\n        return <Loading />\n    }\n\n    return <Container>\n        <PostsContainer>\n            {user.posts.map(postID => <Card postID={postID} />)}\n        </PostsContainer>\n    </Container>\n}","import React, {useEffect, useState} from \"react\";\nimport {User} from \"../../store/types\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppDispatch} from \"../../store\";\nimport {fetchUserByUsername} from \"../../reducers/usersSlice\";\nimport {NotFoundError} from \"../common/NotFoundError\";\nimport {unwrapResult} from \"@reduxjs/toolkit\";\nimport {ProfileBanner} from \"./ProfileBanner\";\nimport {TradingCard} from \"./TradingCard\";\nimport styled from \"@emotion/styled\";\nimport {OtherPostsBoard} from \"./OtherPostsBoard\";\nimport { Loading } from \"../common/Loading\";\nimport DefaultImg from \"../../assets/defaultUserProfileBannerImg.jpg\";\nimport {useFollow} from \"../../hooks/useFollow\";\n\nconst Container = styled.div`\n  display: flex;\n`\n\nconst FlexSpace = styled.div<{flex: number}>`\n  flex: ${props => props.flex};\n`\n\nconst WidthSpace = styled.div<{width: string}>`\n  width: ${props => props.width};\n`\n\nconst HeightSpace = styled.div<{height: string}>`\n  height: ${props => props.height};\n`\n\nexport function OtherProfile({username}: {username: string}) {\n    const userObjectID = useSelector<RootState, string>(state => state.users.usernameToID[username]);\n    const user = useSelector<RootState, User>(state => state.users.entities[userObjectID]);\n    const [notFound, setNotFound] = useState(false);\n    const followHook = useFollow(user?._id);\n    const dispatch = useDispatch<AppDispatch>();\n\n\n    useEffect(() => {\n        if (!user?.followers) {\n            dispatch(fetchUserByUsername(username))\n                .then(unwrapResult)\n                .catch(err => setNotFound(true));\n        }\n    }, []);\n\n    if (notFound) {\n        return <NotFoundError />\n    }\n\n    if (!user?.followers) {\n        return <Loading />\n    }\n    const src = user.profileBanner || DefaultImg;\n    return <>\n        <ProfileBanner imgSrc={src}/>\n        <HeightSpace height=\"26px\" />\n        <Container>\n            <FlexSpace flex={1} />\n            <TradingCard user={user} isCurrentUser={false} followHook={followHook} />\n            <WidthSpace width=\"47px\"/>\n            <OtherPostsBoard user={user}/>\n            <FlexSpace flex={3} />\n        </Container>\n    </>\n}","import { initializeGitHubOAuth } from \"../pages/login/login\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../reducers/rootReducer\";\nimport {CurrentLoggedInUser} from \"../store/types\";\nimport { unfollow, follow } from \"../reducers/userSlice\";\n\n\ntype HandleToggleFollow = (event?) => void;\n\nexport type UseFollowHook = {\n    followsOtherUser: boolean,\n    isFollowedByOtherUser: boolean,\n    handleToggleFollow: HandleToggleFollow\n}\n\n/**\n * Helper hook for displaying and interacting with follows\n *\n * @param otherUserID The ID of the user to follow or unfollow\n */\nexport function useFollow(otherUserID?: string): UseFollowHook {\n    const currentUser = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\n    const dispatch = useDispatch();\n\n    // Not logged in\n    if (!currentUser) {\n        return {\n            followsOtherUser: false,\n            isFollowedByOtherUser: false,\n            // Redirect user to log in\n            handleToggleFollow: initializeGitHubOAuth\n        }\n    }\n\n    // Edge case, not done loading yet\n    if (!currentUser.followersSet) {\n        return null;\n    }\n\n    // Same person!\n    if (currentUser._id === otherUserID) {\n        return null;\n    }\n\n    const followsOtherUser = !!currentUser.followingSet[otherUserID];\n    let handleToggleFollow: HandleToggleFollow;\n    if (followsOtherUser) {\n        handleToggleFollow = (event?) => {\n            if (event) {\n                event.preventDefault();\n            }\n            dispatch(unfollow({userID: otherUserID}));\n        }\n    } else {\n        handleToggleFollow = (event?) => {\n            if (event) {\n                event.preventDefault();\n            }\n            dispatch(follow({userID: otherUserID}));\n        }\n    }\n\n    const isFollowedByOtherUser = !!currentUser.followersSet[otherUserID];\n    return {\n        followsOtherUser,\n        isFollowedByOtherUser,\n        handleToggleFollow,\n    }\n}","import { createStyles, makeStyles } from '@material-ui/core/styles';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams, Redirect } from 'react-router-dom';\n\nimport { ViewProfileParams } from '../../App';\nimport { Loading } from '../common/Loading';\nimport { NotFoundError } from '../common/NotFoundError';\nimport { getLoggedInUser, getUserForViewProfile } from '../../reducers/userSlice';\nimport { RootState } from '../../reducers/rootReducer';\nimport { CurrentLoggedInUser, User } from '../../store/types';\nimport { OwnProfile } from \"./OwnProfile\";\nimport { OtherProfile } from './OtherProfile';\nimport styled from '@emotion/styled';\n\nconst Container = styled.div`\n  margin-top: 9.5vh;\n`\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    container: {\n      display: \"g rid\",\n      gridTemplateAreas: `\n        \"banner banner banner\"\n        \"card board space\"\n      `,\n      gridTemplateColumns: \"1fr 1.5fr 1fr\",\n      gridTemplateRows: \"min-content auto\",\n      backgroundColor: \"#E5E5E5\",\n      height: \"100%\",\n    },\n    banner: {\n      gridArea: \"banner\",\n      marginBottom: \"1rem\",\n    },\n    card: {\n      gridArea: \"card\",\n    },\n    board: {\n      gridArea: \"board\",\n    },\n  })\n);\n\nexport function ViewProfile() {\n  const { username } = useParams<ViewProfileParams>();\n  const loggedInUsername = useSelector<RootState, string>(state => state.user?.userID);\n\n  function child() {\n    if (!username) {\n      return <Redirect to=\"/\" />\n    }\n\n    if (username === loggedInUsername) {\n      return <OwnProfile />\n    }\n\n    if (!loggedInUsername || loggedInUsername !== username) {\n      return <OtherProfile username={username} />\n    }\n  }\n\n  return (<Container>{child()}</Container>);\n}\n//\n//   let viewedUser = useSelector<RootState, User>(\n//     (state) => {\n//       const userObjectID = state.user._id;\n//       return state.users[userObjectID];\n//     }\n//   );\n//\n//   // Load the viewed user if user hasn't loaded yet\n//   useEffect(() => {\n//     // check redux cache for user(s)\n//     if (isLoggedIn) {\n//       // check current user\n//       if (!currentUser && !loading && !error) {\n//         dispatch(getLoggedInUser());\n//       }\n//     }\n//     if (currentUser && currentUser.userID === username) {\n//       // Current user is looking at own profile, so there is no other user info to get\n//       return;\n//     }\n//     if (!viewedUser) {\n//       dispatch(getUserForViewProfile(username));\n//       return;\n//     }\n//     if (viewedUser && !loading && !error && !viewedUser.posts) {\n//       dispatch(getUserForViewProfile(username));\n//     }\n//   }, []);\n//\n//   if (!currentUser || loading || !viewedUser) {\n//     return <Loading />\n//   }\n//\n//   if (error) {\n//     return <NotFoundError />\n//   }\n//\n//   const userIsLookingAtOwnProfile = isLoggedIn && currentUser?.userID === username;\n//   if (userIsLookingAtOwnProfile) {\n//     viewedUser = currentUser;\n//   }\n//\n//   return (\n//     <div className={classes.container}>\n//       {/* <div className={classes.banner}>\n//         <ProfileBanner imgSrc={viewedUser.item.profileBanner} isUser={userIsLookingAtOwnProfile}></ProfileBanner>\n//       </div>\n//       <div className={classes.card}>\n//         <ProfileCard profile={profile} isUser={userIsLookingAtOwnProfile}></ProfileCard>\n//       </div>\n//       <div className={classes.board}>\n//         {userIsLookingAtOwnProfile ? (\n//           <ProfileBoard\n//             isUser={userIsLookingAtOwnProfile}\n//             user={viewedUser}\n//             savedPosts={savedPosts}\n//           ></ProfileBoard>\n//         ) : (\n//             <ProfileBoard isUser={false} posts={posts}></ProfileBoard>\n//           )}\n//       </div> */}\n//     </div>\n//   );\n// }\n","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { logOut } from '../../reducers/isLoggedInSlice';\n\nexport function LogOut() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  useEffect(() => {\n    dispatch(logOut());\n    history.push('/');\n  }, [])\n\n  return <></>\n}","import React, { useState, useEffect } from 'react'\nimport { DevApi } from '../../api';\n\n/**\n * Used for testing only\n */\nexport function Experimental() {\n  const [text, setText] = useState(\"...\");\n  useEffect(() => {\n    const api = new DevApi();\n    //@ts-ignore\n    api.devControllerMarcoPersonal().then(res => res.json()).then(res => setText(JSON.stringify(res)));\n  }, [])\n\n  return <h1 style={{height: \"500px\", marginTop: \"200px\", \"zIndex\": 500 }}>{text}</h1>\n}","import React, {useEffect} from \"react\";\nimport {useHistory, useLocation} from \"react-router-dom\";\nimport qs from \"qs\";\nimport {stateContainer} from \"./login\";\nimport {AuthApi} from \"../../api\";\nimport {useDispatch} from \"react-redux\";\nimport {loginSuccess} from \"../../reducers/isLoggedInSlice\";\nimport {AppDispatch} from \"../../store\";\n\nexport function LoginGitHub() {\n  const location = useLocation();\n  const history = useHistory();\n  const dispatch = useDispatch<AppDispatch>();\n\n  const parsed = qs.parse(location.search);\n  const code = parsed[\"?code\"];\n  const state = parsed[\"state\"];\n\n  const expectedState = stateContainer.state;\n\n  if ((state as string) !== expectedState) {\n    console.log(\"Got back different state from GitHub OAuth!\");\n  }\n\n  useEffect(() => {\n    new AuthApi()\n      .authControllerLoginGitHub({\n        code: code as string,\n        state: state as string,\n      })\n      .then((loginSuccessDto) => {\n        dispatch(loginSuccess(loginSuccessDto));\n        history.push(\"/\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  if (!code || !state) {\n    history.push(\"/\");\n  }\n\n  return <h1>Hello... we are waiting for the back end to respond!</h1>;\n}\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst Container = styled.div`\n  margin-top: 8vh;\n  display: flex;\n  flex-direction: column;\n  height: 85vh;\n`\n\nexport function SearchHomePage() {\n    return <Container></Container>\n}","import {createAsyncThunk} from \"@reduxjs/toolkit\";\nimport {SearchApi} from \"../api\";\n\n/**\n * At this moment, not yet connected to Redux store proper to cache the results.\n */\nexport const search = createAsyncThunk(\n    'search',\n    async ({query}: {query: string}) => {\n        const api = new SearchApi();\n        const posts = await api.searchControllerSearch(query);\n        return posts;\n    });\n\n","import React, {useEffect, useState} from \"react\";\nimport styled from \"@emotion/styled\";\nimport {Loading} from \"../common/Loading\";\nimport {NotFoundError} from \"../common/NotFoundError\";\nimport {AppDispatch} from \"../../store\";\nimport {useDispatch} from \"react-redux\";\nimport {search} from \"../../reducers/search\";\nimport {unwrapResult} from \"@reduxjs/toolkit\";\nimport ErrorPage from \"../common/ErrorPage\";\nimport Card from \"../home/Card\";\nimport {FlexSpace} from \"../view_profile/OwnProfile\";\n\nconst Header = styled.h2`\n  text-align: center;\n`\n\nconst Container = styled.div`\n  margin-top: 10vh;\n  height: 90vh;\n`\n\nconst Content = styled.div`\n  display: flex;\n`\n\nexport function Search({query}: {query:string}) {\n    const [results, setResults] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const dispatch = useDispatch<AppDispatch>();\n\n    useEffect(() => {\n        setLoading(true);\n        dispatch(search({query}))\n            .then(unwrapResult)\n            .then(\n            dto =>\n            {\n                setLoading(false);\n                setResults(dto.posts);\n            }\n        ).catch(err => {\n            setLoading(false);\n            setError(err);\n        })\n    }, [query]);\n\n    if (!results || loading) {\n        return <Loading />\n    }\n\n    if (results.length === 0) {\n        return <NotFoundError />\n    }\n\n    if (error) {\n        return <ErrorPage error={error} />\n    }\n\n    // Show search results\n    return (\n        <Container>\n            <Header>{results.length} results for: {query}</Header>\n            <Content>\n            <FlexSpace />\n            <div>\n            {results.map((post, idx) => <Card postID={post._id} key={idx} />)}\n            </div>\n            <FlexSpace />\n            </Content>\n        </Container>\n    )\n}","import React from \"react\";\nimport qs from \"qs\";\nimport {useLocation} from \"react-router-dom\";\nimport { SearchHomePage } from \"./SearchHomePage\";\nimport {Search} from \"./Search\";\n\nexport function SearchPage() {\n    const location = useLocation();\n\n    const parsed = qs.parse(location.search);\n    const query = parsed[\"?q\"];\n\n    if (!query) {\n        return <SearchHomePage />\n    }\n\n    return <Search query={query.toString()}/>\n}","import React from \"react\";\nimport styled from '@emotion/styled';\nimport { Group, User } from \"../../store/types\";\nimport { useFollow, UseFollowHook } from \"../../hooks/useFollow\";\nimport { Loading } from \"../common/Loading\";\nimport { AllCapsName, AvatarPic, BigBoldNumber, FollowersAndPostsCountContainer, FollowersCountContainer, PostsCountContainer, SpaceAround, SpaceBetweenFollowersAndPosts, Subtitle, TradingCardButton, TradingCardContainer } from \"../view_profile/TradingCard\";\n\n\n// https://www.figma.com/file/ehowTfq9OAMUdMf3Qbngi0/Programmers-Social-Network?node-id=50%3A0\n// Can be adapted to work for groups as well, need to change props\nexport function TradingGroupCard({ group, isCurrentUser, followHook }: { group: Group, isCurrentUser?: boolean, followHook?: UseFollowHook }) {\n\n  // TODO: Change follow button depending on follow relationship\n  function button() {\n    if (isCurrentUser) {\n      return (<TradingCardButton onClick={() => console.log(\"edit profile button clicked!\")}>Edit\n                profile</TradingCardButton>)\n    }\n\n    if (followHook.followsOtherUser && followHook.isFollowedByOtherUser) {\n      return (<TradingCardButton onClick={(e) => followHook.handleToggleFollow(e)}>Unfollow</TradingCardButton>)\n    }\n\n    if (followHook.followsOtherUser) {\n      return (<TradingCardButton onClick={(e) => followHook.handleToggleFollow(e)}>Unfollow</TradingCardButton>)\n    }\n\n    if (!followHook.followsOtherUser && followHook.isFollowedByOtherUser) {\n      return (<TradingCardButton onClick={(e) => followHook.handleToggleFollow(e)}>Follow</TradingCardButton>)\n    }\n\n    // Neither is following each other\n    return (<TradingCardButton onClick={(e) => followHook.handleToggleFollow(e)}>Follow</TradingCardButton>);\n  }\n\n\n  return (<TradingCardContainer>\n    <AvatarPic src={group.profilePic} />\n    <AllCapsName>{group.name.toUpperCase()}</AllCapsName>\n    {/* <Subtitle>{user.status}</Subtitle> */}\n    <FollowersAndPostsCountContainer>\n      <SpaceAround />\n      <FollowersCountContainer>\n        <BigBoldNumber>\n          {/* {group.followers.length} */}\n        </BigBoldNumber>\n                followers\n            </FollowersCountContainer>\n      <SpaceBetweenFollowersAndPosts />\n      <PostsCountContainer>\n        <BigBoldNumber>\n          {group.posts.length}\n        </BigBoldNumber>\n                posts\n        </PostsCountContainer>\n      <SpaceAround />\n    </FollowersAndPostsCountContainer>\n    <SpaceAround />\n    {button()}\n  </TradingCardContainer>)\n}","import React, { useState } from \"react\";\nimport { CurrentLoggedInUser, Group } from \"../../store/types\";\nimport styled from '@emotion/styled';\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Card from \"../home/Card\";\n\nconst Container = styled.div`\n  width: 816px; // to match the Card.tsx width\n  align-content: center;\n`\n\nconst PostsContainer = styled.div`\n  margin-top: 34px;\n\n`\nconst SavedPostsContainer = PostsContainer;\n\n\nexport function GroupPostsBoard({ group }: { group: Group }) {\n  const [tabIdx, setTabIdx] = useState(0);\n\n  function child() {\n    if (tabIdx === 0) {\n      return (\n        <PostsContainer>\n          {group.posts.map(postID => <Card postID={postID} />)}\n        </PostsContainer>\n      );\n    }\n  }\n\n  return (\n    <Container>\n      <Tabs\n        value={tabIdx}\n        onChange={(_, newValue) => { setTabIdx(newValue) }}\n        indicatorColor=\"primary\"\n        textColor=\"inherit\"\n        variant=\"fullWidth\"\n      >\n        <Tab\n          label=\"Posts\"\n          style={{\n            fontFamily: \"Roboto\",\n            textTransform: \"none\",\n            fontWeight: tabIdx === 0 ? \"bold\" : \"lighter\",\n            fontSize: \"1.2rem\",\n          }}\n        />\n        <Tab\n          label=\"Saved\"\n          style={{\n            fontFamily: \"Roboto\",\n            textTransform: \"none\",\n            fontWeight: tabIdx === 1 ? \"bold\" : \"lighter\",\n            fontSize: \"1.2rem\",\n          }}\n        />\n      </Tabs>\n      {child()}\n    </Container>\n  );\n}","import { createStyles, makeStyles } from '@material-ui/core/styles';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { ViewProfileParams } from '../../App';\nimport { Loading } from '../common/Loading';\nimport { NotFoundError } from '../common/NotFoundError';\nimport {\n  getLoggedInUser\n} from '../../reducers/userSlice';\nimport { RootState } from '../../reducers/rootReducer';\nimport { Group, User } from '../../store/types';\nimport { Dictionary } from '@reduxjs/toolkit';\nimport { ProfileBanner } from '../view_profile/ProfileBanner';\nimport { Container, FlexSpace, HeightSpace, WidthSpace } from '../view_profile/OwnProfile';\nimport DefaultImg from \"../../assets/defaultUserProfileBannerImg.jpg\";\nimport { TradingGroupCard } from './TradingGroupCard';\nimport { GroupPostsBoard } from './GroupPostsBoard';\n\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    container: {\n      display: \"g rid\",\n      gridTemplateAreas: `\n        \"banner banner banner\"\n        \"card board space\"\n      `,\n      gridTemplateColumns: \"1fr 1.5fr 1fr\",\n      gridTemplateRows: \"min-content auto\",\n      backgroundColor: \"#E5E5E5\",\n      height: \"100%\",\n    },\n    banner: {\n      gridArea: \"banner\",\n      marginBottom: \"1rem\",\n    },\n    card: {\n      gridArea: \"card\",\n    },\n    board: {\n      gridArea: \"board\",\n    },\n  })\n);\n\nexport function ViewGroupProfile() {\n  const classes = useStyles();\n\n  const { username } = useParams<ViewProfileParams>();\n  const isLoggedIn = useSelector<RootState, boolean>(state => state.isLoggedIn);\n  const dispatch = useDispatch();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const groups = useSelector<RootState, Dictionary<Group>>(state => state.groups.entities);\n  const currentGroupID = useSelector<RootState, string>(\n    (state) => state.groups.currentGroupID)\n  const currentGroup = groups[currentGroupID];\n\n  // let viewedGroup = useSelector<RootState, Group>(\n  //   (state) => {\n  //     const groupObjectID = state.group._id;\n  //     return state.groups[groupObjectID];\n  //   }\n  // )\n\n  // Get user if user hasn't loaded yet\n  useEffect(() => {\n    // check redux cache for user(s)\n    if (isLoggedIn) {\n      // check current user\n      if (!currentGroup && !loading && !error) {\n        dispatch(getLoggedInUser());\n      }\n    }\n    if (currentGroup && currentGroup._id === username) {\n      // Current user is looking at own profile, so there is no other user info to get\n      return;\n    }\n    // if (!viewedGroup) {\n    //   dispatch(getUserForViewProfile(username));\n    //   return;\n    // }\n    // if (viewedGroup && !loading && !error && !viewedGroup.posts) {\n    //   dispatch(getUserForViewProfile(username));\n    // }\n  }, []);\n\n  if (!currentGroup || loading) {\n    return <Loading />\n  }\n\n  if (error) {\n    return <NotFoundError />\n  }\n\n  const userIsLookingAtOwnProfile = isLoggedIn && currentGroup?._id === username;\n  if (userIsLookingAtOwnProfile) {\n    // viewedGroup = currentGroup;\n  }\n  const src = currentGroup.profileBanner || DefaultImg;\n  return (\n    <div className={classes.container}>\n      <ProfileBanner imgSrc={src} />\n      <HeightSpace height=\"26px\" />\n      <Container>\n        <FlexSpace flex={1} />\n        <TradingGroupCard group={currentGroup} isCurrentUser />\n        <WidthSpace width=\"47px\" />\n        <GroupPostsBoard group={currentGroup} />\n        <FlexSpace flex={3} />\n      </Container>\n\n    </div>\n  );\n}\n","import \"./App.css\";\n\nimport React, {useEffect, useRef, useState} from \"react\";\nimport {BrowserRouter as Router, Redirect, Route, Switch} from \"react-router-dom\";\n// import Footer from \"./containers/footer/Footer\";\nimport Header from \"./containers/header/Header\";\nimport CreatePost from \"./pages/create_post/CreatePost\";\nimport UpdatePost from \"./pages/update_post\";\nimport Home from \"./pages/home\";\nimport {DevLogin} from \"./pages/login/DevLogin\";\nimport {Messenger} from \"./pages/messenger\";\nimport PostDetail from \"./pages/post_detail\";\nimport SearchResult from \"./pages/search_result/SearchResult\";\nimport Upload from \"./pages/create_video_post\";\nimport {ViewProfile} from \"./pages/view_profile/ViewProfile\";\nimport {LogOut} from \"./pages/login/Logout\";\nimport {Experimental} from \"./pages/experimental/Experimental\";\nimport {LoginGitHub} from \"./pages/login/LoginGitHub\";\nimport {AppDispatch} from \"./store\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {fetchTrendingPosts} from \"./reducers/postsSlice\";\nimport {unwrapResult} from \"@reduxjs/toolkit\";\nimport {Loading} from \"./pages/common/Loading\";\nimport ErrorPage from \"./pages/common/ErrorPage\";\nimport {RootState} from \"./reducers/rootReducer\";\nimport {SearchPage} from \"./pages/search/SearchPage\";\nimport {ViewGroupProfile} from \"./pages/group_profile/ViewGroupProfile\";\nimport io from \"socket.io-client\";\nimport {BackEndBaseUriForWs, JwtLocalStorageKey} from \"./constants\";\nimport {createMessageSuccess, fetchMessagesInConversation, receiveNewMessage} from \"./reducers/messagesSlice\";\nimport {NewConversationServerToClientDto} from \"./ws-dto/messages/messenger.ws.dto\";\nimport {addConversation, createConversationSuccess} from \"./reducers/conversationsSlice\";\nimport {CreateCommentEvent} from \"./ws-dto/comments/dto/createComment.ws.dto\";\nimport {createCommentSuccess, getCommentsByPostIDSuccess} from \"./reducers/commentsSlice\";\nimport {GetCommentsByPostIDEvent, GetCommentsServerToClientDto} from \"./ws-dto/comments/dto/getCommentsByPostID.ws.dto\";\n\nexport type ViewProfileParams = {\n  username: string;\n};\n\nexport type PostDetailParams = {\n  slug: string;\n};\nexport const SocketContext = React.createContext<React.MutableRefObject<SocketIOClient.Socket>>(null);\n\nexport default function App() {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const isLoggedIn = useSelector<RootState, boolean>(state => state.isLoggedIn);\n  const dispatch = useDispatch<AppDispatch>();\n\n  const socket = useRef<SocketIOClient.Socket>(null);\n  console.log(\"App.tsx render\");\n  useEffect(() => {\n    console.log(\"App.tsx useEffect (creating new socket)\");\n    socket.current = io(BackEndBaseUriForWs);\n    socket.current.on('connection', () => {\n      console.log(`Connected to ${BackEndBaseUriForWs}: ` + socket.current.connected); // true\n      console.log('Authenticating...'); // true\n      // Send server the JWT so it can authenticate ther user\n      socket.current.emit('authenticate', {jwt: localStorage.getItem(JwtLocalStorageKey)});\n    });\n\n    // The server responds with the same event\n    socket.current.on('authenticate', () => {\n      console.log(\"Auth passed! emitting getcConversationsAndUsers...\");\n      // Upon receiving this event, can now ask for everything else\n      socket.current.emit('getConversationsAndUsers', {}); // an empty object is required for auth\n    });\n\n    socket.current.on('getConversationsAndUsers', (data: any) => {\n      dispatch({\n        type: 'getConversationsAndUsers',\n        payload: data,\n      });\n    });\n\n    socket.current.on('newMessage', (response: any) => {//listen for the incoming response(s) from 'newMessage' event\n      // if message is sent by user\n      if (socket.current.id === response.id) {\n        dispatch(createMessageSuccess(response));\n      } else {\n        dispatch(receiveNewMessage(response));\n      }\n    });\n\n    socket.current.on('newConversation', (data: NewConversationServerToClientDto) => {\n      // Client (user) created the new conversation\n      if (data.isCreator) {\n        dispatch(createConversationSuccess(data.conversation));\n        dispatch(fetchMessagesInConversation({conversationID: data.conversation._id}));\n      } else {\n        // Conversation was created elsewhere\n        dispatch(addConversation(data.conversation))\n      }\n    });\n\n    socket.current.on(GetCommentsByPostIDEvent, (response: GetCommentsServerToClientDto) => {\n      dispatch(getCommentsByPostIDSuccess(response)); // TODO\n    });\n\n    socket.current.on(CreateCommentEvent, (response: any) => {//listen for the incoming response(s) from 'newMessage' event\n      // if message is sent by user\n      dispatch(createCommentSuccess(response));\n    });\n\n  }, [])\n\n  useEffect(() => {\n    setLoading(true);\n    dispatch(fetchTrendingPosts({fetchCount: 0}))\n      .then(unwrapResult).then( //must set dispatch to any to use .then\n      () => {\n        setLoading(false)\n      }\n    ).catch(error => {\n      console.log(error);\n      setError(error);\n      setLoading(false);\n    });\n  }, [isLoggedIn]);\n\n  if (loading) {\n    return <Loading/>\n  }\n\n  if (error) {\n    return <ErrorPage error={error}/>\n  }\n\n  return (\n    <SocketContext.Provider value={socket}>\n\n      <Router>\n        <Header></Header>\n        <Switch>\n          <Route path=\"/user/:username\">\n            <ViewProfile/>\n          </Route>\n          <Route path=\"/group/:groupname\">\n            <ViewGroupProfile/>\n          </Route>\n          <Route path=\"/create-post\">\n            <CreatePost/>\n          </Route>\n          <Route path=\"/update-post/:slug\">\n            <UpdatePost/>\n          </Route>\n          <Route exact path=\"/post\">\n            <Home/>\n          </Route>\n          <Route path=\"/post/:slug\">\n            <PostDetail/>\n          </Route>\n          <Route path=\"/messages\">\n            <Messenger/>\n          </Route>\n          <Route path={\"/search\"}>\n            <SearchPage/>\n          </Route>\n          <Route path=\"/result\">\n            {/*Unused*/}\n            <SearchResult/>\n          </Route>\n          {/*<Route path=\"/video_management\">\n            <Upload/>\n          </Route>*/}\n          <Route path=\"/login/github\">\n            <LoginGitHub/>\n          </Route>\n          <Route path=\"/login\">\n            <DevLogin/>\n          </Route>\n          <Route path=\"/logout\">\n            <LogOut></LogOut>\n          </Route>\n          <Route path=\"/test\">\n            <Experimental/>\n          </Route>\n          <Route path=\"/home\">\n            <Home/>\n          </Route>\n          <Route exact path=\"/\">\n            <Redirect to=\"/home\"></Redirect>\n          </Route>\n        </Switch>\n        {/* <Footer></Footer> */}\n      </Router>\n\n    </SocketContext.Provider>\n  );\n}\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#FFFFFF',\n     },\n//    secondary: {\n//      main: '#19857b',\n//    },\n    textPrimary: {\n      main: '#000000',\n    },\n\n    text: {\n   main: '#000000',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;","import {createEntityAdapter, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {fetchTrendingPosts, fetchPostBySlug, fetchPostsByTag} from \"./postsSlice\";\nimport {Tag} from \"../store/types\";\nimport {GetInitialDataDto, GetInitialDataLoggedInDto, GetPostDetailsSuccessDto, GetPostsByTagDto} from \"../api\";\n\nconst tagsAdapter = createEntityAdapter<Tag>({\n    selectId: item => item._id\n})\n\n//https://redux-toolkit.js.org/api/createSlice\nexport const tagsSlice = createSlice({\n    name: \"users\",\n    initialState: tagsAdapter.getInitialState<{ hasMorePostsInTags: Record<string, boolean> }>({\n        hasMorePostsInTags: {\n            \"CPP\": true,\n        }\n    }),\n    reducers: {},\n    extraReducers: {\n        // Initialize Tags slice when initial data is fetched\n        [fetchTrendingPosts.fulfilled.type]: (state, action: PayloadAction<GetInitialDataDto | GetInitialDataLoggedInDto>) => {\n            // Create tags\n            // console.log(\"TAGSLICE::START\")\n            // console.log(action.payload)\n            // console.log(action.payload.tags)\n            tagsAdapter.upsertMany(state, action.payload.tags.map(tag => {\n                // console.log(\"TAGSLICE::INMAP\");\n                const tagEntity = tag as unknown as Tag;\n                // console.log(tagEntity);\n                tagEntity.postsSet = {};\n                return tagEntity;\n            }));\n\n            // Update tags with trending posts\n            action.payload.posts.forEach(post => {\n                post.tags.forEach(id => {\n                    // For each tag in each post, add/update post to the tag in Redux store (idempotent)\n                    tagsAdapter.updateOne(state, {id, changes: {postsSet: {[post._id]: true}}});\n                });\n            });\n\n            // Initialize hasMorePostsInTags\n            action.payload.tags.forEach(tag => {\n                state.hasMorePostsInTags[tag._id] = true;\n            })\n        },\n\n        // Update Tags when a post is fetched\n        [fetchPostBySlug.fulfilled.type]: (state, action: PayloadAction<GetPostDetailsSuccessDto>) => {\n            action.payload.post.tags.forEach(id => {\n                tagsAdapter.updateOne(state, {id, changes: {postsSet: {[action.payload.post._id]: true}}});\n            });\n        },\n\n        // TODO Update Tags when posts are fetched by tag\n        [fetchPostsByTag.fulfilled.type]: (state, action: PayloadAction<GetPostsByTagDto>) => {\n            const postsSet = {};\n            action.payload.posts.forEach(post => {\n                postsSet[post._id] = true\n            });\n            tagsAdapter.updateOne(state, {id: action.payload.tagID, changes: {postsSet}});\n        },\n\n        // payload is tagID\n        [fetchPostsByTag.rejected.type]: (state, action: PayloadAction<string>) => {\n            state.hasMorePostsInTags[action.payload] = false;\n        }\n\n        // TODO: add post to tags upon post creation\n        // TODO: potentially update tags upon post update\n    }\n});\n\nexport default tagsSlice.reducer;","// export function videos(state = {}, action) {\n//   return state;\n// }\n\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { PostsApi, VideoApi, GetAllVideosDto, VideoDto } from './../api/api';\nimport { Video } from './../store/types';\nimport { createEntityAdapter, createAsyncThunk } from '@reduxjs/toolkit';\nimport { createSlice } from '@reduxjs/toolkit';\n\n\nconst videosAdapter = createEntityAdapter<Video>({\n  selectId: video => video._id,\n})\n\nexport const getAllVideos = createAsyncThunk(\n  'getAllVideosStatus',\n  async () => {\n    return await new VideoApi().videoControllerGetAllVideos();\n  }\n);\n\nexport const createVideo = createAsyncThunk(\n  'createVideoStatus',\n  async (video: any) => {\n    const videoDto = { name: video.name, description: video.description };\n    return await new VideoApi().videoControllerCreateVideo(videoDto);\n  }\n)\n\n// dispatch(createVideo(video))\n\nexport const videosSlice = createSlice({\n  name: 'video',\n  initialState: videosAdapter.getInitialState(),\n  reducers: {\n\n  },\n  extraReducers: {\n    [getAllVideos.fulfilled.type]: (state, action: PayloadAction<GetAllVideosDto>) => {\n      const videosToAdd = action.payload.videos;\n      videosAdapter.upsertMany(state, videosToAdd);\n    },\n    [createVideo.fulfilled.type]: (state, action: PayloadAction<VideoDto>) => {\n      const video: Video = action.payload;\n      videosAdapter.addOne(state, video);\n    }\n  }\n})\n\nexport default videosSlice.reducer;","import { combineReducers } from \"redux\";\nimport postsReducer from './postsSlice';\nimport usersReducer from './usersSlice';\nimport tagsReducer from './tagsSlice';\nimport userReducer from \"./userSlice\";\nimport isLoggedInReducer from \"./isLoggedInSlice\";\nimport groupsReducer from \"./groupsSlice\";\nimport commentsReducer from \"./commentsSlice\";\nimport conversationsReducer from \"./conversationsSlice\";\nimport videosReducer from \"./videosSlice\";\nimport messagesReducer from \"./messagesSlice\";\n\nconst rootReducer = combineReducers({\n  isLoggedIn: isLoggedInReducer,\n  user: userReducer,\n  users: usersReducer,\n  posts: postsReducer,\n  tags: tagsReducer,\n  groups: groupsReducer,\n  comments: commentsReducer,\n  conversations: conversationsReducer,\n  videos: videosReducer,\n  messages: messagesReducer,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default rootReducer","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from '../reducers/rootReducer';\n\n\nconst store = configureStore({\n  reducer: rootReducer\n})\n\nexport default store;\nexport type AppDispatch = typeof store.dispatch;\n","import './index.css';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport theme from './theme';\nimport store from './store';\n\n/*\nimport { JwtLocalStorageKey } from './constants';\nimport { rootReducer } from './reducers';\nimport RootState, {Loadable, Tag} from './store';\nimport theme from './theme';\nimport {postsCreation} from \"./reducers/postsCreation\";\n\nconst initialState: RootState = {\n  isLoggedIn: !!localStorage.getItem(JwtLocalStorageKey),\n  postsCreation: {\n    title: '',\n    content: '',\n    tags: []\n  },\n\n  attachments: {},\n  comments: {},\n  conversations: {},\n  groups: {},\n  messages: {},\n  posts: {},\n  tags: {},\n  users: {},\n  videos: {},\n\n  slugs: {},\n  userIDs: {},\n\n  user: { loading: false },\n  trendingPosts: { loading: false },\n  userOwnPosts: { loading: false },\n  trendingVideos: { loading: false },\n  savedPosts: { loading: false },\n}\n\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(thunk)));\n */\n\nconst Root = () => {\n  return (\n    <React.StrictMode>\n      <ThemeProvider theme={theme}>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </ThemeProvider>\n    </React.StrictMode>)\n}\n\nReactDOM.render(\n  <Root />,\n  document.querySelector(\"#root\")\n);\n","module.exports = __webpack_public_path__ + \"static/media/404.6695af99.svg\";","module.exports = __webpack_public_path__ + \"static/media/defaultUserProfileBannerImg.5cb40d28.jpg\";","module.exports = __webpack_public_path__ + \"static/media/commentIcon.1b5b0267.svg\";","module.exports = __webpack_public_path__ + \"static/media/heartIcon.7746f5e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/heartIconRed.095cbef3.svg\";"],"sourceRoot":""}